
bootloader:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005378  08000000  08000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .preinit_array 00000000  08005378  08005378  000205d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .init_array   00000000  08005378  08005378  000205d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000000  08005378  08005378  000205d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .ARM.extab    0000009c  08005378  08005378  00015378  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.exidx    00000218  08005414  08005414  00015414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000005d8  20000000  0800562c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004470  200005d8  08005c04  000205d8  2**2
                  ALLOC
  8 .debug_info   00017fb4  00000000  00000000  000205d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00004574  00000000  00000000  0003858c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00007d58  00000000  00000000  0003cb00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000c60  00000000  00000000  00044858  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001090  00000000  00000000  000454b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00007d37  00000000  00000000  00046548  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00014b2d  00000000  00000000  0004e27f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      000000fe  00000000  00000000  00062dac  2**0
                  CONTENTS, READONLY
 16 .ARM.attributes 00000039  00000000  00000000  00062eaa  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001cf8  00000000  00000000  00062ee4  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  00004547  00000000  00000000  00064bdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .stabstr      00000076  00000000  00000000  00069123  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000000 <vector_table>:
 8000000:	00 00 02 20 0d 3a 00 08 0b 3a 00 08 09 3a 00 08     ... .:...:...:..
 8000010:	09 3a 00 08 09 3a 00 08 09 3a 00 08 00 00 00 00     .:...:...:......
	...
 800002c:	0b 3a 00 08 0b 3a 00 08 00 00 00 00 0b 3a 00 08     .:...:.......:..
 800003c:	85 06 00 08 09 3a 00 08 09 3a 00 08 09 3a 00 08     .....:...:...:..
 800004c:	09 3a 00 08 09 3a 00 08 09 3a 00 08 09 3a 00 08     .:...:...:...:..
 800005c:	09 3a 00 08 09 3a 00 08 09 3a 00 08 09 3a 00 08     .:...:...:...:..
 800006c:	09 3a 00 08 09 3a 00 08 09 3a 00 08 09 3a 00 08     .:...:...:...:..
 800007c:	09 3a 00 08 09 3a 00 08 09 3a 00 08 09 3a 00 08     .:...:...:...:..
 800008c:	09 3a 00 08 09 3a 00 08 09 3a 00 08 09 3a 00 08     .:...:...:...:..
 800009c:	09 3a 00 08 09 3a 00 08 09 3a 00 08 09 3a 00 08     .:...:...:...:..
 80000ac:	09 3a 00 08 09 3a 00 08 09 3a 00 08 09 3a 00 08     .:...:...:...:..
 80000bc:	09 3a 00 08 09 3a 00 08 09 3a 00 08 09 3a 00 08     .:...:...:...:..
 80000cc:	09 3a 00 08 09 3a 00 08 09 3a 00 08 09 3a 00 08     .:...:...:...:..
 80000dc:	09 3a 00 08 09 3a 00 08 09 3a 00 08 09 3a 00 08     .:...:...:...:..
 80000ec:	09 3a 00 08 09 3a 00 08 09 3a 00 08 09 3a 00 08     .:...:...:...:..
 80000fc:	09 3a 00 08 09 3a 00 08 09 3a 00 08 09 3a 00 08     .:...:...:...:..
 800010c:	09 3a 00 08 09 3a 00 08 09 3a 00 08 09 3a 00 08     .:...:...:...:..
 800011c:	09 3a 00 08 09 3a 00 08 09 3a 00 08 09 3a 00 08     .:...:...:...:..
 800012c:	09 3a 00 08 09 3a 00 08 09 3a 00 08 09 3a 00 08     .:...:...:...:..
 800013c:	09 3a 00 08 09 3a 00 08 09 3a 00 08 09 3a 00 08     .:...:...:...:..
 800014c:	09 3a 00 08 09 3a 00 08 09 3a 00 08 09 3a 00 08     .:...:...:...:..
 800015c:	09 3a 00 08 09 3a 00 08 09 3a 00 08 09 3a 00 08     .:...:...:...:..
 800016c:	09 3a 00 08 09 3a 00 08 09 3a 00 08 09 3a 00 08     .:...:...:...:..
 800017c:	09 3a 00 08 09 3a 00 08 09 3a 00 08 09 3a 00 08     .:...:...:...:..
 800018c:	09 3a 00 08 09 3a 00 08 09 3a 00 08 09 3a 00 08     .:...:...:...:..
 800019c:	09 3a 00 08 09 3a 00 08 09 3a 00 08 09 3a 00 08     .:...:...:...:..

080001ac <_ZL10drawScreenPKcS0_S0_>:
    Canvas::setColor(0);
    Canvas::fill();
    Canvas::show();
}

static void drawScreen(const char *current, const char *update, const char *message = "\0") {
 80001ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80001ae:	b08b      	sub	sp, #44	; 0x2c
    char title[32];
    snprintf(title, sizeof(title), "bootloader %d.%d", CONFIG_VERSION_MAJOR, CONFIG_VERSION_MINOR);
 80001b0:	2302      	movs	r3, #2
    static constexpr int Height = CONFIG_LCD_HEIGHT;

    static void show();

    static uint8_t color() { return _color; }
    static void setColor(uint8_t color) { _color = color; }
 80001b2:	4c23      	ldr	r4, [pc, #140]	; (8000240 <_ZL10drawScreenPKcS0_S0_+0x94>)
 80001b4:	9300      	str	r3, [sp, #0]
static void drawScreen(const char *current, const char *update, const char *message = "\0") {
 80001b6:	4607      	mov	r7, r0
    snprintf(title, sizeof(title), "bootloader %d.%d", CONFIG_VERSION_MAJOR, CONFIG_VERSION_MINOR);
 80001b8:	2300      	movs	r3, #0
static void drawScreen(const char *current, const char *update, const char *message = "\0") {
 80001ba:	460e      	mov	r6, r1
 80001bc:	4615      	mov	r5, r2
    snprintf(title, sizeof(title), "bootloader %d.%d", CONFIG_VERSION_MAJOR, CONFIG_VERSION_MINOR);
 80001be:	2120      	movs	r1, #32
 80001c0:	4a20      	ldr	r2, [pc, #128]	; (8000244 <_ZL10drawScreenPKcS0_S0_+0x98>)
 80001c2:	a802      	add	r0, sp, #8
 80001c4:	f002 fb4a 	bl	800285c <stbsp_snprintf>
 80001c8:	2000      	movs	r0, #0
 80001ca:	7020      	strb	r0, [r4, #0]

    Canvas::setColor(0);
    Canvas::fill();
 80001cc:	f000 fac8 	bl	8000760 <_ZN6Canvas4fillEv>
 80001d0:	210f      	movs	r1, #15
 80001d2:	7021      	strb	r1, [r4, #0]

    Canvas::setColor(0xf);
    Canvas::drawText(10, 10, title);
 80001d4:	210a      	movs	r1, #10
 80001d6:	aa02      	add	r2, sp, #8
 80001d8:	4608      	mov	r0, r1
 80001da:	f000 fb09 	bl	80007f0 <_ZN6Canvas8drawTextEiiPKc>

    Canvas::drawText(10, 30, "current:");
 80001de:	4a1a      	ldr	r2, [pc, #104]	; (8000248 <_ZL10drawScreenPKcS0_S0_+0x9c>)
 80001e0:	211e      	movs	r1, #30
 80001e2:	200a      	movs	r0, #10
 80001e4:	f000 fb04 	bl	80007f0 <_ZN6Canvas8drawTextEiiPKc>
    Canvas::drawText(70, 30, current);
 80001e8:	463a      	mov	r2, r7
 80001ea:	211e      	movs	r1, #30
 80001ec:	2046      	movs	r0, #70	; 0x46
 80001ee:	f000 faff 	bl	80007f0 <_ZN6Canvas8drawTextEiiPKc>
    Canvas::drawText(10, 40, "update:");
 80001f2:	4a16      	ldr	r2, [pc, #88]	; (800024c <_ZL10drawScreenPKcS0_S0_+0xa0>)
 80001f4:	2128      	movs	r1, #40	; 0x28
 80001f6:	200a      	movs	r0, #10
 80001f8:	f000 fafa 	bl	80007f0 <_ZN6Canvas8drawTextEiiPKc>
    Canvas::drawText(70, 40, update);
 80001fc:	4632      	mov	r2, r6
 80001fe:	2128      	movs	r1, #40	; 0x28
 8000200:	2046      	movs	r0, #70	; 0x46
 8000202:	f000 faf5 	bl	80007f0 <_ZN6Canvas8drawTextEiiPKc>

    static void startSysTick();
    static void stopSysTick();

    static void tick() { ++_ticks; }
    static uint32_t ticks() { return _ticks; }
 8000206:	4a12      	ldr	r2, [pc, #72]	; (8000250 <_ZL10drawScreenPKcS0_S0_+0xa4>)

    const int period = 500;
    Canvas::setColor(3 + std::labs((System::ticks() % period) - (period / 2)) * 12 / (period / 2));
 8000208:	6817      	ldr	r7, [r2, #0]
 800020a:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
 800020e:	230c      	movs	r3, #12
 8000210:	fbb7 fcf6 	udiv	ip, r7, r6
 8000214:	fb06 701c 	mls	r0, r6, ip, r7
 8000218:	4343      	muls	r3, r0
 800021a:	f6a3 31b8 	subw	r1, r3, #3000	; 0xbb8
 800021e:	2900      	cmp	r1, #0
 8000220:	bfb8      	it	lt
 8000222:	4249      	neglt	r1, r1
    Canvas::drawText(10, 60, message);
 8000224:	200a      	movs	r0, #10
    Canvas::setColor(3 + std::labs((System::ticks() % period) - (period / 2)) * 12 / (period / 2));
 8000226:	22fa      	movs	r2, #250	; 0xfa
 8000228:	fb91 f7f2 	sdiv	r7, r1, r2
    Canvas::drawText(10, 60, message);
 800022c:	462a      	mov	r2, r5
 800022e:	213c      	movs	r1, #60	; 0x3c
    Canvas::setColor(3 + std::labs((System::ticks() % period) - (period / 2)) * 12 / (period / 2));
 8000230:	3703      	adds	r7, #3
 8000232:	7027      	strb	r7, [r4, #0]
    Canvas::drawText(10, 60, message);
 8000234:	f000 fadc 	bl	80007f0 <_ZN6Canvas8drawTextEiiPKc>

    Canvas::show();
 8000238:	f000 fa8c 	bl	8000754 <_ZN6Canvas4showEv>
}
 800023c:	b00b      	add	sp, #44	; 0x2c
 800023e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000240:	200045d8 	.word	0x200045d8
 8000244:	0800508e 	.word	0x0800508e
 8000248:	0800509f 	.word	0x0800509f
 800024c:	080050a8 	.word	0x080050a8
 8000250:	200045f0 	.word	0x200045f0

08000254 <_ZL13formatVersionRK10VersionTagPcj.constprop.2>:
static void formatVersion(const VersionTag &version, char *str, size_t len) {
 8000254:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000256:	4603      	mov	r3, r0
    if (version.isValid()) {
 8000258:	4a0c      	ldr	r2, [pc, #48]	; (800028c <_ZL13formatVersionRK10VersionTagPcj.constprop.2+0x38>)
static void formatVersion(const VersionTag &version, char *str, size_t len) {
 800025a:	4608      	mov	r0, r1
    if (version.isValid()) {
 800025c:	6819      	ldr	r1, [r3, #0]
 800025e:	4291      	cmp	r1, r2
 8000260:	d10d      	bne.n	800027e <_ZL13formatVersionRK10VersionTagPcj.constprop.2+0x2a>
        snprintf(str, len, "%s (%d.%d.%d)", version.name, version.major, version.minor, version.revision);
 8000262:	8bd9      	ldrh	r1, [r3, #30]
 8000264:	9102      	str	r1, [sp, #8]
 8000266:	7f5a      	ldrb	r2, [r3, #29]
 8000268:	9201      	str	r2, [sp, #4]
 800026a:	7f19      	ldrb	r1, [r3, #28]
 800026c:	9100      	str	r1, [sp, #0]
 800026e:	3304      	adds	r3, #4
 8000270:	4a07      	ldr	r2, [pc, #28]	; (8000290 <_ZL13formatVersionRK10VersionTagPcj.constprop.2+0x3c>)
 8000272:	2120      	movs	r1, #32
 8000274:	f002 faf2 	bl	800285c <stbsp_snprintf>
}
 8000278:	b005      	add	sp, #20
 800027a:	f85d fb04 	ldr.w	pc, [sp], #4
        snprintf(str, len, "invalid image");
 800027e:	4a05      	ldr	r2, [pc, #20]	; (8000294 <_ZL13formatVersionRK10VersionTagPcj.constprop.2+0x40>)
 8000280:	2120      	movs	r1, #32
}
 8000282:	b005      	add	sp, #20
 8000284:	f85d eb04 	ldr.w	lr, [sp], #4
        snprintf(str, len, "invalid image");
 8000288:	f002 bae8 	b.w	800285c <stbsp_snprintf>
 800028c:	fadebabe 	.word	0xfadebabe
 8000290:	080050b0 	.word	0x080050b0
 8000294:	080050be 	.word	0x080050be

08000298 <_ZL10bootloaderv>:



static void bootloader() {
 8000298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800029c:	f2ad 5d54 	subw	sp, sp, #1364	; 0x554
    char currentStr[32];
    char updateStr[32];
    char errorStr[32];

    formatVersion(currentVersion, currentStr, sizeof(currentStr));
 80002a0:	a90e      	add	r1, sp, #56	; 0x38
 80002a2:	48a1      	ldr	r0, [pc, #644]	; (8000528 <_ZL10bootloaderv+0x290>)
    snprintf(updateStr, sizeof(updateStr), "checking ...");
 80002a4:	ac16      	add	r4, sp, #88	; 0x58
    formatVersion(currentVersion, currentStr, sizeof(currentStr));
 80002a6:	f7ff ffd5 	bl	8000254 <_ZL13formatVersionRK10VersionTagPcj.constprop.2>
    snprintf(updateStr, sizeof(updateStr), "checking ...");
 80002aa:	4aa0      	ldr	r2, [pc, #640]	; (800052c <_ZL10bootloaderv+0x294>)
 80002ac:	2120      	movs	r1, #32
 80002ae:	4620      	mov	r0, r4
 80002b0:	f002 fad4 	bl	800285c <stbsp_snprintf>

    drawScreen(currentStr, updateStr);
 80002b4:	4a9e      	ldr	r2, [pc, #632]	; (8000530 <_ZL10bootloaderv+0x298>)
 80002b6:	4621      	mov	r1, r4
 80002b8:	a80e      	add	r0, sp, #56	; 0x38
 80002ba:	f7ff ff77 	bl	80001ac <_ZL10drawScreenPKcS0_S0_>

    printf("current image: %s\n", currentStr);
 80002be:	a90e      	add	r1, sp, #56	; 0x38
 80002c0:	489c      	ldr	r0, [pc, #624]	; (8000534 <_ZL10bootloaderv+0x29c>)
 80002c2:	f000 fb45 	bl	8000950 <printf>
    printf("checking for update image ...\n");
 80002c6:	489c      	ldr	r0, [pc, #624]	; (8000538 <_ZL10bootloaderv+0x2a0>)
 80002c8:	f000 fb42 	bl	8000950 <printf>

    VersionTag updateVersion;
    size_t updateSize;
    MD5::Sum updateMd5;

    bool success = UpdateFile::open(updateVersion, updateSize, updateMd5, errorStr, sizeof(errorStr));
 80002cc:	ae1e      	add	r6, sp, #120	; 0x78
 80002ce:	2320      	movs	r3, #32
 80002d0:	9300      	str	r3, [sp, #0]
 80002d2:	aa06      	add	r2, sp, #24
 80002d4:	4633      	mov	r3, r6
 80002d6:	a905      	add	r1, sp, #20
 80002d8:	a826      	add	r0, sp, #152	; 0x98
 80002da:	f001 fca1 	bl	8001c20 <_ZN10UpdateFile4openER10VersionTagRjPhPcj>

    // log update image status
    if (success) {
 80002de:	4681      	mov	r9, r0
 80002e0:	2800      	cmp	r0, #0
 80002e2:	d04e      	beq.n	8000382 <_ZL10bootloaderv+0xea>
        formatVersion(updateVersion, updateStr, sizeof(updateStr));
 80002e4:	4621      	mov	r1, r4
 80002e6:	a826      	add	r0, sp, #152	; 0x98
 80002e8:	f7ff ffb4 	bl	8000254 <_ZL13formatVersionRK10VersionTagPcj.constprop.2>
        printf("found update image: %s\n", updateStr);
 80002ec:	4621      	mov	r1, r4
 80002ee:	4893      	ldr	r0, [pc, #588]	; (800053c <_ZL10bootloaderv+0x2a4>)
        printf("size: %zd bytes\n", updateSize);
        printf("md5sum: ");
        for (size_t i = 0; i < sizeof(updateMd5); ++i) {
            printf("%02x", updateMd5[i]);
 80002f0:	4f93      	ldr	r7, [pc, #588]	; (8000540 <_ZL10bootloaderv+0x2a8>)
        printf("found update image: %s\n", updateStr);
 80002f2:	f000 fb2d 	bl	8000950 <printf>
        printf("size: %zd bytes\n", updateSize);
 80002f6:	9905      	ldr	r1, [sp, #20]
 80002f8:	4892      	ldr	r0, [pc, #584]	; (8000544 <_ZL10bootloaderv+0x2ac>)
 80002fa:	f000 fb29 	bl	8000950 <printf>
        printf("md5sum: ");
 80002fe:	4892      	ldr	r0, [pc, #584]	; (8000548 <_ZL10bootloaderv+0x2b0>)
 8000300:	f000 fb26 	bl	8000950 <printf>
        for (size_t i = 0; i < sizeof(updateMd5); ++i) {
 8000304:	2500      	movs	r5, #0
            printf("%02x", updateMd5[i]);
 8000306:	a806      	add	r0, sp, #24
 8000308:	5d41      	ldrb	r1, [r0, r5]
 800030a:	4638      	mov	r0, r7
        for (size_t i = 0; i < sizeof(updateMd5); ++i) {
 800030c:	3501      	adds	r5, #1
            printf("%02x", updateMd5[i]);
 800030e:	f000 fb1f 	bl	8000950 <printf>
        for (size_t i = 0; i < sizeof(updateMd5); ++i) {
 8000312:	2d10      	cmp	r5, #16
 8000314:	d1f7      	bne.n	8000306 <_ZL10bootloaderv+0x6e>
        }
        printf("\n");
 8000316:	488d      	ldr	r0, [pc, #564]	; (800054c <_ZL10bootloaderv+0x2b4>)

        uint32_t buf[1024 / 4];
        size_t bytesLeft = updateSize;
        while (bytesLeft > 0) {
            int progress = ((updateSize - bytesLeft) * 100) / updateSize;
            snprintf(updateStr, sizeof(updateStr), "verifying image %d%%", progress);
 8000318:	f8df a274 	ldr.w	sl, [pc, #628]	; 8000590 <_ZL10bootloaderv+0x2f8>
            drawScreen(currentStr, updateStr);
 800031c:	f8df b210 	ldr.w	fp, [pc, #528]	; 8000530 <_ZL10bootloaderv+0x298>
        printf("\n");
 8000320:	f000 fb16 	bl	8000950 <printf>
        printf("verifying update image ...\n");
 8000324:	488a      	ldr	r0, [pc, #552]	; (8000550 <_ZL10bootloaderv+0x2b8>)
 8000326:	f000 fb13 	bl	8000950 <printf>

struct MD5 {
    typedef unsigned char Sum[16];

    MD5() {
        MD5_Init(&ctx);
 800032a:	a82e      	add	r0, sp, #184	; 0xb8
 800032c:	f001 f8e6 	bl	80014fc <_Z8MD5_InitP7MD5_CTX>
        size_t bytesLeft = updateSize;
 8000330:	9d05      	ldr	r5, [sp, #20]
            int progress = ((updateSize - bytesLeft) * 100) / updateSize;
 8000332:	f04f 0864 	mov.w	r8, #100	; 0x64
        while (bytesLeft > 0) {
 8000336:	2d00      	cmp	r5, #0
 8000338:	d03e      	beq.n	80003b8 <_ZL10bootloaderv+0x120>
            int progress = ((updateSize - bytesLeft) * 100) / updateSize;
 800033a:	9a05      	ldr	r2, [sp, #20]
 800033c:	1b51      	subs	r1, r2, r5
 800033e:	fb08 fc01 	mul.w	ip, r8, r1
            snprintf(updateStr, sizeof(updateStr), "verifying image %d%%", progress);
 8000342:	4620      	mov	r0, r4
 8000344:	fbbc f3f2 	udiv	r3, ip, r2
 8000348:	2120      	movs	r1, #32
 800034a:	4652      	mov	r2, sl
 800034c:	f002 fa86 	bl	800285c <stbsp_snprintf>
            drawScreen(currentStr, updateStr);
 8000350:	465a      	mov	r2, fp
 8000352:	4621      	mov	r1, r4
 8000354:	a80e      	add	r0, sp, #56	; 0x38
 8000356:	f7ff ff29 	bl	80001ac <_ZL10drawScreenPKcS0_S0_>
            size_t chunkSize = bytesLeft < sizeof(buf) ? bytesLeft : sizeof(buf);
 800035a:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800035e:	462f      	mov	r7, r5
 8000360:	bf28      	it	cs
 8000362:	f44f 6780 	movcs.w	r7, #1024	; 0x400
            if (!UpdateFile::read(buf, chunkSize, errorStr, sizeof(errorStr))) {
 8000366:	2320      	movs	r3, #32
 8000368:	4632      	mov	r2, r6
 800036a:	4639      	mov	r1, r7
 800036c:	a854      	add	r0, sp, #336	; 0x150
 800036e:	f001 fccb 	bl	8001d08 <_ZN10UpdateFile4readEPvjPcj>
 8000372:	b308      	cbz	r0, 80003b8 <_ZL10bootloaderv+0x120>
    }

    void update(const void *data, unsigned long size) {
        MD5_Update(&ctx, data, size);
 8000374:	463a      	mov	r2, r7
 8000376:	a954      	add	r1, sp, #336	; 0x150
 8000378:	a82e      	add	r0, sp, #184	; 0xb8
 800037a:	f001 f8d5 	bl	8001528 <_Z10MD5_UpdateP7MD5_CTXPKvm>
                break;
            }

            md5.update(buf, chunkSize);

            bytesLeft -= chunkSize;
 800037e:	1bed      	subs	r5, r5, r7
        while (bytesLeft > 0) {
 8000380:	e7d9      	b.n	8000336 <_ZL10bootloaderv+0x9e>
        printf("no update image found: %s\n", errorStr);
 8000382:	4631      	mov	r1, r6
 8000384:	4873      	ldr	r0, [pc, #460]	; (8000554 <_ZL10bootloaderv+0x2bc>)
 8000386:	f000 fae3 	bl	8000950 <printf>
 800038a:	2500      	movs	r5, #0
            flash_lock();
        }
    }

    // final screen
    formatVersion(currentVersion, currentStr, sizeof(currentStr));
 800038c:	a90e      	add	r1, sp, #56	; 0x38
 800038e:	4866      	ldr	r0, [pc, #408]	; (8000528 <_ZL10bootloaderv+0x290>)
 8000390:	f7ff ff60 	bl	8000254 <_ZL13formatVersionRK10VersionTagPcj.constprop.2>
    Encoder::reset();
 8000394:	f000 fb84 	bl	8000aa0 <_ZN7Encoder5resetEv>
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf08      	it	eq
 800039c:	4634      	moveq	r4, r6
    while (1) {
        drawScreen(currentStr, success ? updateStr : errorStr, "press encoder to reset!");
 800039e:	4d6e      	ldr	r5, [pc, #440]	; (8000558 <_ZL10bootloaderv+0x2c0>)
 80003a0:	462a      	mov	r2, r5
 80003a2:	4621      	mov	r1, r4
 80003a4:	a80e      	add	r0, sp, #56	; 0x38
 80003a6:	f7ff ff01 	bl	80001ac <_ZL10drawScreenPKcS0_S0_>
        if (Encoder::pressed()) {
 80003aa:	f000 fb89 	bl	8000ac0 <_ZN7Encoder7pressedEv>
 80003ae:	2800      	cmp	r0, #0
 80003b0:	d0f6      	beq.n	80003a0 <_ZL10bootloaderv+0x108>
            System::reset();
 80003b2:	f001 fc04 	bl	8001bbe <_ZN6System5resetEv>
 80003b6:	e7f3      	b.n	80003a0 <_ZL10bootloaderv+0x108>
    }

    void finish(Sum sum) {
        MD5_Final(sum, &ctx);
 80003b8:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
 80003bc:	f10d 0b28 	add.w	fp, sp, #40	; 0x28
 80003c0:	4641      	mov	r1, r8
 80003c2:	4658      	mov	r0, fp
 80003c4:	f001 f8ee 	bl	80015a4 <_Z9MD5_FinalPhP7MD5_CTX>
        printf("computed md5sum: ");
 80003c8:	4864      	ldr	r0, [pc, #400]	; (800055c <_ZL10bootloaderv+0x2c4>)
            printf("%02x", computedMd5[i]);
 80003ca:	f8df a174 	ldr.w	sl, [pc, #372]	; 8000540 <_ZL10bootloaderv+0x2a8>
        printf("computed md5sum: ");
 80003ce:	f000 fabf 	bl	8000950 <printf>
        for (size_t i = 0; i < sizeof(computedMd5); ++i) {
 80003d2:	2700      	movs	r7, #0
            printf("%02x", computedMd5[i]);
 80003d4:	f81b 1007 	ldrb.w	r1, [fp, r7]
 80003d8:	4650      	mov	r0, sl
        for (size_t i = 0; i < sizeof(computedMd5); ++i) {
 80003da:	3701      	adds	r7, #1
            printf("%02x", computedMd5[i]);
 80003dc:	f000 fab8 	bl	8000950 <printf>
        for (size_t i = 0; i < sizeof(computedMd5); ++i) {
 80003e0:	2f10      	cmp	r7, #16
 80003e2:	d1f7      	bne.n	80003d4 <_ZL10bootloaderv+0x13c>
        printf("\n");
 80003e4:	4859      	ldr	r0, [pc, #356]	; (800054c <_ZL10bootloaderv+0x2b4>)
 80003e6:	f000 fab3 	bl	8000950 <printf>
        success = memcmp(updateMd5, computedMd5, sizeof(MD5::Sum)) == 0;
 80003ea:	463a      	mov	r2, r7
 80003ec:	4659      	mov	r1, fp
 80003ee:	a806      	add	r0, sp, #24
 80003f0:	f004 fca9 	bl	8004d46 <memcmp>
        if (success) {
 80003f4:	4607      	mov	r7, r0
 80003f6:	bb00      	cbnz	r0, 800043a <_ZL10bootloaderv+0x1a2>
            printf("valid image\n");
 80003f8:	4859      	ldr	r0, [pc, #356]	; (8000560 <_ZL10bootloaderv+0x2c8>)
            drawScreen(currentStr, updateStr, writeUpdate ? "write update? yes" : "write update? no");
 80003fa:	f8df a198 	ldr.w	sl, [pc, #408]	; 8000594 <_ZL10bootloaderv+0x2fc>
 80003fe:	f8df b198 	ldr.w	fp, [pc, #408]	; 8000598 <_ZL10bootloaderv+0x300>
            printf("valid image\n");
 8000402:	f000 faa5 	bl	8000950 <printf>
        formatVersion(updateVersion, updateStr, sizeof(updateStr));
 8000406:	4621      	mov	r1, r4
 8000408:	a826      	add	r0, sp, #152	; 0x98
 800040a:	f7ff ff23 	bl	8000254 <_ZL13formatVersionRK10VersionTagPcj.constprop.2>
        Encoder::reset();
 800040e:	f000 fb47 	bl	8000aa0 <_ZN7Encoder5resetEv>
        while (!Encoder::pressed()) {
 8000412:	f000 fb55 	bl	8000ac0 <_ZN7Encoder7pressedEv>
 8000416:	4605      	mov	r5, r0
 8000418:	2800      	cmp	r0, #0
 800041a:	f040 80c1 	bne.w	80005a0 <_ZL10bootloaderv+0x308>
            int value = Encoder::value();
 800041e:	f000 fb59 	bl	8000ad4 <_ZN7Encoder5valueEv>
            if (value < 0) {
 8000422:	2800      	cmp	r0, #0
 8000424:	db12      	blt.n	800044c <_ZL10bootloaderv+0x1b4>
            } else if (value > 0) {
 8000426:	d114      	bne.n	8000452 <_ZL10bootloaderv+0x1ba>
            drawScreen(currentStr, updateStr, writeUpdate ? "write update? yes" : "write update? no");
 8000428:	2f00      	cmp	r7, #0
 800042a:	bf0c      	ite	eq
 800042c:	4652      	moveq	r2, sl
 800042e:	465a      	movne	r2, fp
 8000430:	4621      	mov	r1, r4
 8000432:	a80e      	add	r0, sp, #56	; 0x38
 8000434:	f7ff feba 	bl	80001ac <_ZL10drawScreenPKcS0_S0_>
 8000438:	e7eb      	b.n	8000412 <_ZL10bootloaderv+0x17a>
            printf("invalid image (md5sum mismatch)\n");
 800043a:	484a      	ldr	r0, [pc, #296]	; (8000564 <_ZL10bootloaderv+0x2cc>)
 800043c:	f000 fa88 	bl	8000950 <printf>
            snprintf(errorStr, sizeof(errorStr), "invalid checksum");
 8000440:	4a49      	ldr	r2, [pc, #292]	; (8000568 <_ZL10bootloaderv+0x2d0>)
 8000442:	2120      	movs	r1, #32
 8000444:	4630      	mov	r0, r6
 8000446:	f002 fa09 	bl	800285c <stbsp_snprintf>
 800044a:	e79e      	b.n	800038a <_ZL10bootloaderv+0xf2>
                writeUpdate = false;
 800044c:	462f      	mov	r7, r5
            drawScreen(currentStr, updateStr, writeUpdate ? "write update? yes" : "write update? no");
 800044e:	4652      	mov	r2, sl
 8000450:	e7ee      	b.n	8000430 <_ZL10bootloaderv+0x198>
 8000452:	464f      	mov	r7, r9
 8000454:	465a      	mov	r2, fp
 8000456:	e7eb      	b.n	8000430 <_ZL10bootloaderv+0x198>
    for (size_t i = 0; i < sizeof(flashSectorAddr) / sizeof(flashSectorAddr[0]); ++i) {
 8000458:	f10b 0b01 	add.w	fp, fp, #1
 800045c:	f1bb 0f0c 	cmp.w	fp, #12
 8000460:	f040 80d8 	bne.w	8000614 <_ZL10bootloaderv+0x37c>
 8000464:	e0eb      	b.n	800063e <_ZL10bootloaderv+0x3a6>
            bytesLeft -= chunkSize;
 8000466:	eba9 090a 	sub.w	r9, r9, sl
        while (bytesLeft > 0) {
 800046a:	e0ad      	b.n	80005c8 <_ZL10bootloaderv+0x330>
                success = false;
 800046c:	4605      	mov	r5, r0
        flash_lock();
 800046e:	f003 fa33 	bl	80038d8 <flash_lock>
        if (success) {
 8000472:	2d00      	cmp	r5, #0
 8000474:	d039      	beq.n	80004ea <_ZL10bootloaderv+0x252>
            printf("write successful\n");
 8000476:	483d      	ldr	r0, [pc, #244]	; (800056c <_ZL10bootloaderv+0x2d4>)
            printf("%02x", computedMd5[i]);
 8000478:	4f31      	ldr	r7, [pc, #196]	; (8000540 <_ZL10bootloaderv+0x2a8>)
            printf("write successful\n");
 800047a:	f000 fa69 	bl	8000950 <printf>
        printf("verifying written image ...\n");
 800047e:	483c      	ldr	r0, [pc, #240]	; (8000570 <_ZL10bootloaderv+0x2d8>)
 8000480:	f000 fa66 	bl	8000950 <printf>
        drawScreen(currentStr, "verifying");
 8000484:	4a2a      	ldr	r2, [pc, #168]	; (8000530 <_ZL10bootloaderv+0x298>)
 8000486:	493b      	ldr	r1, [pc, #236]	; (8000574 <_ZL10bootloaderv+0x2dc>)
 8000488:	a80e      	add	r0, sp, #56	; 0x38
 800048a:	f7ff fe8f 	bl	80001ac <_ZL10drawScreenPKcS0_S0_>
        MD5_Init(&ctx);
 800048e:	a854      	add	r0, sp, #336	; 0x150
 8000490:	f001 f834 	bl	80014fc <_Z8MD5_InitP7MD5_CTX>
        MD5_Update(&ctx, data, size);
 8000494:	9a05      	ldr	r2, [sp, #20]
 8000496:	4938      	ldr	r1, [pc, #224]	; (8000578 <_ZL10bootloaderv+0x2e0>)
 8000498:	a854      	add	r0, sp, #336	; 0x150
 800049a:	f001 f845 	bl	8001528 <_Z10MD5_UpdateP7MD5_CTXPKvm>
        MD5_Final(sum, &ctx);
 800049e:	a954      	add	r1, sp, #336	; 0x150
 80004a0:	4640      	mov	r0, r8
 80004a2:	f001 f87f 	bl	80015a4 <_Z9MD5_FinalPhP7MD5_CTX>
        printf("computed md5sum: ");
 80004a6:	482d      	ldr	r0, [pc, #180]	; (800055c <_ZL10bootloaderv+0x2c4>)
 80004a8:	f000 fa52 	bl	8000950 <printf>
        for (size_t i = 0; i < sizeof(computedMd5); ++i) {
 80004ac:	2500      	movs	r5, #0
            printf("%02x", computedMd5[i]);
 80004ae:	f818 1005 	ldrb.w	r1, [r8, r5]
 80004b2:	4638      	mov	r0, r7
        for (size_t i = 0; i < sizeof(computedMd5); ++i) {
 80004b4:	3501      	adds	r5, #1
            printf("%02x", computedMd5[i]);
 80004b6:	f000 fa4b 	bl	8000950 <printf>
        for (size_t i = 0; i < sizeof(computedMd5); ++i) {
 80004ba:	2d10      	cmp	r5, #16
 80004bc:	d1f7      	bne.n	80004ae <_ZL10bootloaderv+0x216>
        printf("\n");
 80004be:	4823      	ldr	r0, [pc, #140]	; (800054c <_ZL10bootloaderv+0x2b4>)
 80004c0:	f000 fa46 	bl	8000950 <printf>
        success = memcmp(updateMd5, computedMd5, sizeof(MD5::Sum)) == 0;
 80004c4:	462a      	mov	r2, r5
 80004c6:	4641      	mov	r1, r8
 80004c8:	a806      	add	r0, sp, #24
 80004ca:	f004 fc3c 	bl	8004d46 <memcmp>
 80004ce:	2800      	cmp	r0, #0
 80004d0:	bf0c      	ite	eq
 80004d2:	2501      	moveq	r5, #1
 80004d4:	2500      	movne	r5, #0
        if (success) {
 80004d6:	d10d      	bne.n	80004f4 <_ZL10bootloaderv+0x25c>
            printf("verify successful\n");
 80004d8:	4828      	ldr	r0, [pc, #160]	; (800057c <_ZL10bootloaderv+0x2e4>)
 80004da:	f000 fa39 	bl	8000950 <printf>
            snprintf(updateStr, sizeof(updateStr), "successful");
 80004de:	4a28      	ldr	r2, [pc, #160]	; (8000580 <_ZL10bootloaderv+0x2e8>)
 80004e0:	2120      	movs	r1, #32
 80004e2:	4620      	mov	r0, r4
 80004e4:	f002 f9ba 	bl	800285c <stbsp_snprintf>
 80004e8:	e750      	b.n	800038c <_ZL10bootloaderv+0xf4>
            printf("failed to write update image: %s\n", errorStr);
 80004ea:	4631      	mov	r1, r6
 80004ec:	4825      	ldr	r0, [pc, #148]	; (8000584 <_ZL10bootloaderv+0x2ec>)
 80004ee:	f000 fa2f 	bl	8000950 <printf>
 80004f2:	e74b      	b.n	800038c <_ZL10bootloaderv+0xf4>
            printf("verify failed (md5sum mismatch)\n");
 80004f4:	4824      	ldr	r0, [pc, #144]	; (8000588 <_ZL10bootloaderv+0x2f0>)
            flash_unlock();
 80004f6:	4f0c      	ldr	r7, [pc, #48]	; (8000528 <_ZL10bootloaderv+0x290>)
            for (uint32_t addr = 0; addr < sizeof(VersionTag); addr += 4) {
 80004f8:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 800059c <_ZL10bootloaderv+0x304>
            printf("verify failed (md5sum mismatch)\n");
 80004fc:	f000 fa28 	bl	8000950 <printf>
            snprintf(errorStr, sizeof(errorStr), "writing image failed");
 8000500:	4a22      	ldr	r2, [pc, #136]	; (800058c <_ZL10bootloaderv+0x2f4>)
 8000502:	2120      	movs	r1, #32
 8000504:	4630      	mov	r0, r6
 8000506:	f002 f9a9 	bl	800285c <stbsp_snprintf>
            flash_unlock();
 800050a:	f003 f9d3 	bl	80038b4 <flash_unlock>
                flash_program_word(CONFIG_APPLICATION_ADDR + CONFIG_VERSION_TAG_OFFSET + addr, 0);
 800050e:	4638      	mov	r0, r7
 8000510:	2100      	movs	r1, #0
 8000512:	3704      	adds	r7, #4
 8000514:	f003 f9fc 	bl	8003910 <flash_program_word>
                flash_wait_for_last_operation();
 8000518:	f003 f9e6 	bl	80038e8 <flash_wait_for_last_operation>
            for (uint32_t addr = 0; addr < sizeof(VersionTag); addr += 4) {
 800051c:	4547      	cmp	r7, r8
 800051e:	d1f6      	bne.n	800050e <_ZL10bootloaderv+0x276>
            flash_lock();
 8000520:	f003 f9da 	bl	80038d8 <flash_lock>
 8000524:	e732      	b.n	800038c <_ZL10bootloaderv+0xf4>
 8000526:	bf00      	nop
 8000528:	08010400 	.word	0x08010400
 800052c:	08004e5d 	.word	0x08004e5d
 8000530:	08004e38 	.word	0x08004e38
 8000534:	08004e6a 	.word	0x08004e6a
 8000538:	08004e7d 	.word	0x08004e7d
 800053c:	08004e9c 	.word	0x08004e9c
 8000540:	08004ec5 	.word	0x08004ec5
 8000544:	08004eb4 	.word	0x08004eb4
 8000548:	08004f1f 	.word	0x08004f1f
 800054c:	0800511f 	.word	0x0800511f
 8000550:	08004eca 	.word	0x08004eca
 8000554:	08004ee6 	.word	0x08004ee6
 8000558:	08005076 	.word	0x08005076
 800055c:	08004f16 	.word	0x08004f16
 8000560:	08004f28 	.word	0x08004f28
 8000564:	08004f35 	.word	0x08004f35
 8000568:	08004f56 	.word	0x08004f56
 800056c:	08004fc7 	.word	0x08004fc7
 8000570:	08004fd9 	.word	0x08004fd9
 8000574:	08004ff6 	.word	0x08004ff6
 8000578:	08010000 	.word	0x08010000
 800057c:	08005022 	.word	0x08005022
 8000580:	08005035 	.word	0x08005035
 8000584:	08005000 	.word	0x08005000
 8000588:	08005040 	.word	0x08005040
 800058c:	08005061 	.word	0x08005061
 8000590:	08004f01 	.word	0x08004f01
 8000594:	08004e4c 	.word	0x08004e4c
 8000598:	08004e3a 	.word	0x08004e3a
 800059c:	08010420 	.word	0x08010420
    if (success && writeUpdate) {
 80005a0:	2f00      	cmp	r7, #0
 80005a2:	f43f aef3 	beq.w	800038c <_ZL10bootloaderv+0xf4>
        success = UpdateFile::rewind(errorStr, sizeof(errorStr));
 80005a6:	2120      	movs	r1, #32
 80005a8:	4630      	mov	r0, r6
 80005aa:	f001 fb23 	bl	8001bf4 <_ZN10UpdateFile6rewindEPcj>
    if (success && writeUpdate) {
 80005ae:	4605      	mov	r5, r0
 80005b0:	2800      	cmp	r0, #0
 80005b2:	f43f aeeb 	beq.w	800038c <_ZL10bootloaderv+0xf4>
        printf("writing update image to 0x%08lx ...\n", CONFIG_APPLICATION_ADDR);
 80005b6:	492c      	ldr	r1, [pc, #176]	; (8000668 <_ZL10bootloaderv+0x3d0>)
 80005b8:	482c      	ldr	r0, [pc, #176]	; (800066c <_ZL10bootloaderv+0x3d4>)
        uint32_t addr = CONFIG_APPLICATION_ADDR;
 80005ba:	4f2b      	ldr	r7, [pc, #172]	; (8000668 <_ZL10bootloaderv+0x3d0>)
        printf("writing update image to 0x%08lx ...\n", CONFIG_APPLICATION_ADDR);
 80005bc:	f000 f9c8 	bl	8000950 <printf>
        flash_unlock();
 80005c0:	f003 f978 	bl	80038b4 <flash_unlock>
        size_t bytesLeft = updateSize;
 80005c4:	f8dd 9014 	ldr.w	r9, [sp, #20]
        while (bytesLeft > 0) {
 80005c8:	f1b9 0f00 	cmp.w	r9, #0
 80005cc:	f43f af4f 	beq.w	800046e <_ZL10bootloaderv+0x1d6>
            int progress = ((updateSize - bytesLeft) * 100) / updateSize;
 80005d0:	9805      	ldr	r0, [sp, #20]
 80005d2:	2264      	movs	r2, #100	; 0x64
 80005d4:	eba0 0309 	sub.w	r3, r0, r9
 80005d8:	4353      	muls	r3, r2
            snprintf(updateStr, sizeof(updateStr), "writing image %d%%", progress);
 80005da:	2120      	movs	r1, #32
 80005dc:	fbb3 f3f0 	udiv	r3, r3, r0
 80005e0:	4a23      	ldr	r2, [pc, #140]	; (8000670 <_ZL10bootloaderv+0x3d8>)
 80005e2:	4620      	mov	r0, r4
 80005e4:	f002 f93a 	bl	800285c <stbsp_snprintf>
            drawScreen(currentStr, updateStr);
 80005e8:	4a22      	ldr	r2, [pc, #136]	; (8000674 <_ZL10bootloaderv+0x3dc>)
 80005ea:	4621      	mov	r1, r4
 80005ec:	a80e      	add	r0, sp, #56	; 0x38
 80005ee:	f7ff fddd 	bl	80001ac <_ZL10drawScreenPKcS0_S0_>
            size_t chunkSize = bytesLeft < sizeof(buf) ? bytesLeft : sizeof(buf);
 80005f2:	f5b9 6f80 	cmp.w	r9, #1024	; 0x400
 80005f6:	46ca      	mov	sl, r9
 80005f8:	bf28      	it	cs
 80005fa:	f44f 6a80 	movcs.w	sl, #1024	; 0x400
            if (!UpdateFile::read(buf, chunkSize, errorStr, sizeof(errorStr))) {
 80005fe:	2320      	movs	r3, #32
 8000600:	4632      	mov	r2, r6
 8000602:	4651      	mov	r1, sl
 8000604:	a854      	add	r0, sp, #336	; 0x150
 8000606:	f001 fb7f 	bl	8001d08 <_ZN10UpdateFile4readEPvjPcj>
 800060a:	2800      	cmp	r0, #0
 800060c:	f43f af2e 	beq.w	800046c <_ZL10bootloaderv+0x1d4>
    for (size_t i = 0; i < sizeof(flashSectorAddr) / sizeof(flashSectorAddr[0]); ++i) {
 8000610:	f04f 0b00 	mov.w	fp, #0
        if (addr == flashSectorAddr[i]) {
 8000614:	4918      	ldr	r1, [pc, #96]	; (8000678 <_ZL10bootloaderv+0x3e0>)
 8000616:	f851 002b 	ldr.w	r0, [r1, fp, lsl #2]
 800061a:	4287      	cmp	r7, r0
 800061c:	f47f af1c 	bne.w	8000458 <_ZL10bootloaderv+0x1c0>
                printf("erasing sector %d at 0x%08lx ... ", sector, addr);
 8000620:	463a      	mov	r2, r7
 8000622:	4659      	mov	r1, fp
 8000624:	4815      	ldr	r0, [pc, #84]	; (800067c <_ZL10bootloaderv+0x3e4>)
 8000626:	f000 f993 	bl	8000950 <printf>
                flash_erase_sector(sector, 2);
 800062a:	fa5f f08b 	uxtb.w	r0, fp
 800062e:	2102      	movs	r1, #2
 8000630:	f003 f986 	bl	8003940 <flash_erase_sector>
                flash_wait_for_last_operation();
 8000634:	f003 f958 	bl	80038e8 <flash_wait_for_last_operation>
                printf("done\n");
 8000638:	4811      	ldr	r0, [pc, #68]	; (8000680 <_ZL10bootloaderv+0x3e8>)
 800063a:	f000 f989 	bl	8000950 <printf>
            for (size_t i = 0; i < (chunkSize + 3) / 4; ++i) {
 800063e:	f10a 0303 	add.w	r3, sl, #3
 8000642:	f023 0b03 	bic.w	fp, r3, #3
                flash_program_word(addr, buf[i]);
 8000646:	aa54      	add	r2, sp, #336	; 0x150
 8000648:	44bb      	add	fp, r7
 800064a:	1bd0      	subs	r0, r2, r7
            for (size_t i = 0; i < (chunkSize + 3) / 4; ++i) {
 800064c:	455f      	cmp	r7, fp
 800064e:	f43f af0a 	beq.w	8000466 <_ZL10bootloaderv+0x1ce>
                flash_program_word(addr, buf[i]);
 8000652:	59c1      	ldr	r1, [r0, r7]
 8000654:	9003      	str	r0, [sp, #12]
 8000656:	4638      	mov	r0, r7
 8000658:	f003 f95a 	bl	8003910 <flash_program_word>
                addr += 4;
 800065c:	3704      	adds	r7, #4
                flash_wait_for_last_operation();
 800065e:	f003 f943 	bl	80038e8 <flash_wait_for_last_operation>
            for (size_t i = 0; i < (chunkSize + 3) / 4; ++i) {
 8000662:	9803      	ldr	r0, [sp, #12]
 8000664:	e7f2      	b.n	800064c <_ZL10bootloaderv+0x3b4>
 8000666:	bf00      	nop
 8000668:	08010000 	.word	0x08010000
 800066c:	08004f67 	.word	0x08004f67
 8000670:	08004f8c 	.word	0x08004f8c
 8000674:	08004e38 	.word	0x08004e38
 8000678:	080050cc 	.word	0x080050cc
 800067c:	08004f9f 	.word	0x08004f9f
 8000680:	08004fc1 	.word	0x08004fc1

08000684 <sys_tick_handler>:
    static void tick() { ++_ticks; }
 8000684:	4a02      	ldr	r2, [pc, #8]	; (8000690 <sys_tick_handler+0xc>)
 8000686:	6813      	ldr	r3, [r2, #0]
 8000688:	3301      	adds	r3, #1
 800068a:	6013      	str	r3, [r2, #0]
    Encoder::process();
 800068c:	f000 b9b2 	b.w	80009f4 <_ZN7Encoder7processEv>
 8000690:	200045f0 	.word	0x200045f0

08000694 <main>:
        }
    }
}

int main(void) {
 8000694:	b510      	push	{r4, lr}
 8000696:	b088      	sub	sp, #32
    System::init();
 8000698:	f001 fa8a 	bl	8001bb0 <_ZN6System4initEv>
    Console::init();
 800069c:	f000 f8de 	bl	800085c <_ZN7Console4initEv>
    Encoder::init();
 80006a0:	f000 f980 	bl	80009a4 <_ZN7Encoder4initEv>
    Lcd::init();
 80006a4:	f000 fac2 	bl	8000c2c <_ZN3Lcd4initEv>
    SdCard::init();
 80006a8:	f001 f826 	bl	80016f8 <_ZN6SdCard4initEv>
    System::startSysTick();
 80006ac:	f001 fa8a 	bl	8001bc4 <_ZN6System12startSysTickEv>
 80006b0:	4b1f      	ldr	r3, [pc, #124]	; (8000730 <main+0x9c>)
 80006b2:	2400      	movs	r4, #0
 80006b4:	701c      	strb	r4, [r3, #0]
    Canvas::fill();
 80006b6:	f000 f853 	bl	8000760 <_ZN6Canvas4fillEv>
    Canvas::show();
 80006ba:	f000 f84b 	bl	8000754 <_ZN6Canvas4showEv>
    init();

    clearScreen();

    printf("\nbootloader %d.%d\n", CONFIG_VERSION_MAJOR, CONFIG_VERSION_MINOR);
 80006be:	4621      	mov	r1, r4
 80006c0:	481c      	ldr	r0, [pc, #112]	; (8000734 <main+0xa0>)
 80006c2:	2202      	movs	r2, #2
 80006c4:	f000 f944 	bl	8000950 <printf>
    static void init();
    static void deinit();

    static void process();

    static bool down() { return _down; }
 80006c8:	481b      	ldr	r0, [pc, #108]	; (8000738 <main+0xa4>)

    // enter bootloader mode if encoder is pressed or no valid image is found
    if (Encoder::down() || !currentVersion.isValid()) {
 80006ca:	7801      	ldrb	r1, [r0, #0]
 80006cc:	b921      	cbnz	r1, 80006d8 <main+0x44>
 80006ce:	481b      	ldr	r0, [pc, #108]	; (800073c <main+0xa8>)
 80006d0:	4c1b      	ldr	r4, [pc, #108]	; (8000740 <main+0xac>)
 80006d2:	6802      	ldr	r2, [r0, #0]
 80006d4:	42a2      	cmp	r2, r4
 80006d6:	d001      	beq.n	80006dc <main+0x48>
        bootloader();
 80006d8:	f7ff fdde 	bl	8000298 <_ZL10bootloaderv>
    formatVersion(currentVersion, str, sizeof(str));
 80006dc:	4669      	mov	r1, sp
 80006de:	f7ff fdb9 	bl	8000254 <_ZL13formatVersionRK10VersionTagPcj.constprop.2>
    printf("loading %s ...\n\n\n", str);
 80006e2:	4669      	mov	r1, sp
 80006e4:	4817      	ldr	r0, [pc, #92]	; (8000744 <main+0xb0>)
 80006e6:	f000 f933 	bl	8000950 <printf>
    System::stopSysTick();
 80006ea:	f001 fa7b 	bl	8001be4 <_ZN6System11stopSysTickEv>
    SdCard::deinit();
 80006ee:	f000 ffc6 	bl	800167e <_ZN6SdCard6deinitEv>
    Lcd::deinit();
 80006f2:	f000 fa44 	bl	8000b7e <_ZN3Lcd6deinitEv>
    Encoder::deinit();
 80006f6:	f000 f971 	bl	80009dc <_ZN7Encoder6deinitEv>
    Console::deinit();
 80006fa:	f000 f8e9 	bl	80008d0 <_ZN7Console6deinitEv>
    System::deinit();
 80006fe:	f001 fa5d 	bl	8001bbc <_ZN6System6deinitEv>
	NVIC_ICER(0) = 0xFFFFFFFF;
 8000702:	4811      	ldr	r0, [pc, #68]	; (8000748 <main+0xb4>)
	SCB_VTOR = CONFIG_APPLICATION_ADDR;
 8000704:	4911      	ldr	r1, [pc, #68]	; (800074c <main+0xb8>)
	NVIC_ICER(0) = 0xFFFFFFFF;
 8000706:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800070a:	6003      	str	r3, [r0, #0]
	NVIC_ICER(1) = 0xFFFFFFFF;
 800070c:	6043      	str	r3, [r0, #4]
	NVIC_ICER(2) = 0xFFFFFFFF;
 800070e:	6083      	str	r3, [r0, #8]
	NVIC_ICPR(0) = 0xFFFFFFFF;
 8000710:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
	NVIC_ICPR(1) = 0xFFFFFFFF;
 8000714:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
	NVIC_ICPR(2) = 0xFFFFFFFF;
 8000718:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
	SCB_VTOR = CONFIG_APPLICATION_ADDR;
 800071c:	f8c0 1b88 	str.w	r1, [r0, #2952]	; 0xb88
	asm volatile("msr msp, %0" :: "g" (*reinterpret_cast<volatile uint32_t *>(CONFIG_APPLICATION_ADDR)));
 8000720:	680a      	ldr	r2, [r1, #0]
 8000722:	f382 8808 	msr	MSP, r2
    (*reinterpret_cast<void (**)()>(CONFIG_APPLICATION_ADDR + 4))();
 8000726:	4c0a      	ldr	r4, [pc, #40]	; (8000750 <main+0xbc>)
 8000728:	6823      	ldr	r3, [r4, #0]
 800072a:	4798      	blx	r3
 800072c:	e7fe      	b.n	800072c <main+0x98>
 800072e:	bf00      	nop
 8000730:	200045d8 	.word	0x200045d8
 8000734:	080050fc 	.word	0x080050fc
 8000738:	200045df 	.word	0x200045df
 800073c:	08010400 	.word	0x08010400
 8000740:	fadebabe 	.word	0xfadebabe
 8000744:	0800510f 	.word	0x0800510f
 8000748:	e000e180 	.word	0xe000e180
 800074c:	08010000 	.word	0x08010000
 8000750:	08010004 	.word	0x08010004

08000754 <_ZN6Canvas4showEv>:

uint8_t Canvas::_frameBuffer[Width * Height];
uint8_t Canvas::_color;

void Canvas::show() {
    Lcd::draw(_frameBuffer);
 8000754:	4801      	ldr	r0, [pc, #4]	; (800075c <_ZN6Canvas4showEv+0x8>)
 8000756:	f000 baf4 	b.w	8000d42 <_ZN3Lcd4drawEPh>
 800075a:	bf00      	nop
 800075c:	200005d8 	.word	0x200005d8

08000760 <_ZN6Canvas4fillEv>:
}

void Canvas::fill() {
    std::memset(_frameBuffer, _color, sizeof(_frameBuffer));
 8000760:	4b03      	ldr	r3, [pc, #12]	; (8000770 <_ZN6Canvas4fillEv+0x10>)
 8000762:	4804      	ldr	r0, [pc, #16]	; (8000774 <_ZN6Canvas4fillEv+0x14>)
 8000764:	7819      	ldrb	r1, [r3, #0]
 8000766:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800076a:	f004 bb06 	b.w	8004d7a <memset>
 800076e:	bf00      	nop
 8000770:	200045d8 	.word	0x200045d8
 8000774:	200005d8 	.word	0x200005d8

08000778 <_ZN6Canvas14drawBitmap1bitEiiiiPKh>:
            write(x, y, _color);
        }
    }
}

void Canvas::drawBitmap1bit(int x, int y, int w, int h, const uint8_t *bitmap) {
 8000778:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    int x0 = x, x1 = x + w - 1;
    int y0 = y, y1 = y + h - 1;
    if (x0 >= Width || x1 < 0 || y0 >= Height || y1 < 0) {
 800077c:	28ff      	cmp	r0, #255	; 0xff
void Canvas::drawBitmap1bit(int x, int y, int w, int h, const uint8_t *bitmap) {
 800077e:	9c07      	ldr	r4, [sp, #28]
    if (x0 >= Width || x1 < 0 || y0 >= Height || y1 < 0) {
 8000780:	dc2f      	bgt.n	80007e2 <_ZN6Canvas14drawBitmap1bitEiiiiPKh+0x6a>
    int x0 = x, x1 = x + w - 1;
 8000782:	4402      	add	r2, r0
    if (x0 >= Width || x1 < 0 || y0 >= Height || y1 < 0) {
 8000784:	3a01      	subs	r2, #1
 8000786:	d42c      	bmi.n	80007e2 <_ZN6Canvas14drawBitmap1bitEiiiiPKh+0x6a>
 8000788:	293f      	cmp	r1, #63	; 0x3f
 800078a:	dc2a      	bgt.n	80007e2 <_ZN6Canvas14drawBitmap1bitEiiiiPKh+0x6a>
    int y0 = y, y1 = y + h - 1;
 800078c:	440b      	add	r3, r1
    if (x0 >= Width || x1 < 0 || y0 >= Height || y1 < 0) {
 800078e:	3b01      	subs	r3, #1
 8000790:	d427      	bmi.n	80007e2 <_ZN6Canvas14drawBitmap1bitEiiiiPKh+0x6a>
    }

    int shift = 0;
    for (int y = y0; y <= y1; ++y) {
        for (int x = x0; x <= x1; ++x) {
            uint8_t pixel = ((*bitmap >> shift) & 1) * _color;
 8000792:	4d15      	ldr	r5, [pc, #84]	; (80007e8 <_ZN6Canvas14drawBitmap1bitEiiiiPKh+0x70>)
 8000794:	f8df e054 	ldr.w	lr, [pc, #84]	; 80007ec <_ZN6Canvas14drawBitmap1bitEiiiiPKh+0x74>
 8000798:	f895 c000 	ldrb.w	ip, [r5]
    int shift = 0;
 800079c:	f04f 0900 	mov.w	r9, #0
    for (int y = y0; y <= y1; ++y) {
 80007a0:	4299      	cmp	r1, r3
 80007a2:	dc1e      	bgt.n	80007e2 <_ZN6Canvas14drawBitmap1bitEiiiiPKh+0x6a>
 80007a4:	eb0e 2801 	add.w	r8, lr, r1, lsl #8
 80007a8:	4605      	mov	r5, r0
        for (int x = x0; x <= x1; ++x) {
 80007aa:	4295      	cmp	r5, r2
 80007ac:	dc17      	bgt.n	80007de <_ZN6Canvas14drawBitmap1bitEiiiiPKh+0x66>
            shift += 1;
 80007ae:	f109 0601 	add.w	r6, r9, #1
            if (shift >= 8) {
 80007b2:	2e07      	cmp	r6, #7
                ++bitmap;
 80007b4:	bfc6      	itte	gt
 80007b6:	1c67      	addgt	r7, r4, #1
                shift = 0;
 80007b8:	2600      	movgt	r6, #0
 80007ba:	4627      	movle	r7, r4
    static bool vinside(int y) {
        return y >= 0 && y <= Height - 1;
    }

    static bool inside(int x, int y) {
        return hinside(x) && vinside(y);
 80007bc:	2dff      	cmp	r5, #255	; 0xff
 80007be:	d80a      	bhi.n	80007d6 <_ZN6Canvas14drawBitmap1bitEiiiiPKh+0x5e>
 80007c0:	293f      	cmp	r1, #63	; 0x3f
 80007c2:	d808      	bhi.n	80007d6 <_ZN6Canvas14drawBitmap1bitEiiiiPKh+0x5e>
            uint8_t pixel = ((*bitmap >> shift) & 1) * _color;
 80007c4:	7824      	ldrb	r4, [r4, #0]
 80007c6:	fa44 f909 	asr.w	r9, r4, r9
 80007ca:	f009 0401 	and.w	r4, r9, #1
 80007ce:	fb14 f90c 	smulbb	r9, r4, ip
    }

    static void write(int x, int y, uint8_t c) {
        _frameBuffer[y * Width + x] = c;
 80007d2:	f808 9005 	strb.w	r9, [r8, r5]
        for (int x = x0; x <= x1; ++x) {
 80007d6:	3501      	adds	r5, #1
 80007d8:	46b1      	mov	r9, r6
 80007da:	463c      	mov	r4, r7
 80007dc:	e7e5      	b.n	80007aa <_ZN6Canvas14drawBitmap1bitEiiiiPKh+0x32>
    for (int y = y0; y <= y1; ++y) {
 80007de:	3101      	adds	r1, #1
 80007e0:	e7de      	b.n	80007a0 <_ZN6Canvas14drawBitmap1bitEiiiiPKh+0x28>
            if (inside(x, y)) {
                write(x, y, pixel);
            }
        }
    }
}
 80007e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80007e6:	bf00      	nop
 80007e8:	200045d8 	.word	0x200045d8
 80007ec:	200005d8 	.word	0x200005d8

080007f0 <_ZN6Canvas8drawTextEiiPKc>:

void Canvas::drawText(int x, int y, const char *str) {
 80007f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
            continue;
        }
        if (c < font.first || c > font.last) {
            continue;
        }
        const auto &g = font.glyphs[c - font.first];
 80007f4:	4f17      	ldr	r7, [pc, #92]	; (8000854 <_ZN6Canvas8drawTextEiiPKc+0x64>)
        const uint8_t *bitmap = &font.bitmap[g.offset];
 80007f6:	f8df a060 	ldr.w	sl, [pc, #96]	; 8000858 <_ZN6Canvas8drawTextEiiPKc+0x68>
void Canvas::drawText(int x, int y, const char *str) {
 80007fa:	4681      	mov	r9, r0
 80007fc:	460e      	mov	r6, r1
 80007fe:	f102 38ff 	add.w	r8, r2, #4294967295	; 0xffffffff
            x = ox;
 8000802:	4605      	mov	r5, r0
    while (*str != '\0') {
 8000804:	f818 4f01 	ldrb.w	r4, [r8, #1]!
 8000808:	b304      	cbz	r4, 800084c <_ZN6Canvas8drawTextEiiPKc+0x5c>
        if (c == '\n') {
 800080a:	2c0a      	cmp	r4, #10
 800080c:	d102      	bne.n	8000814 <_ZN6Canvas8drawTextEiiPKc+0x24>
            y += font.yAdvance;
 800080e:	360f      	adds	r6, #15
            x = ox;
 8000810:	464d      	mov	r5, r9
            continue;
 8000812:	e7f7      	b.n	8000804 <_ZN6Canvas8drawTextEiiPKc+0x14>
        if (c < font.first || c > font.last) {
 8000814:	f1a4 0c20 	sub.w	ip, r4, #32
 8000818:	fa5f f38c 	uxtb.w	r3, ip
 800081c:	2b5e      	cmp	r3, #94	; 0x5e
 800081e:	d8f1      	bhi.n	8000804 <_ZN6Canvas8drawTextEiiPKc+0x14>
        const auto &g = font.glyphs[c - font.first];
 8000820:	eb07 0bcc 	add.w	fp, r7, ip, lsl #3
        const uint8_t *bitmap = &font.bitmap[g.offset];
 8000824:	f837 403c 	ldrh.w	r4, [r7, ip, lsl #3]
        drawBitmap1bit(x + g.xOffset, y + g.yOffset, g.width, g.height, bitmap);
 8000828:	f99b 1006 	ldrsb.w	r1, [fp, #6]
 800082c:	f99b 0005 	ldrsb.w	r0, [fp, #5]
 8000830:	f89b 3003 	ldrb.w	r3, [fp, #3]
 8000834:	f89b 2002 	ldrb.w	r2, [fp, #2]
        const uint8_t *bitmap = &font.bitmap[g.offset];
 8000838:	4454      	add	r4, sl
        drawBitmap1bit(x + g.xOffset, y + g.yOffset, g.width, g.height, bitmap);
 800083a:	4428      	add	r0, r5
 800083c:	9400      	str	r4, [sp, #0]
 800083e:	4431      	add	r1, r6
 8000840:	f7ff ff9a 	bl	8000778 <_ZN6Canvas14drawBitmap1bitEiiiiPKh>
        x += g.xAdvance;
 8000844:	f89b 0004 	ldrb.w	r0, [fp, #4]
 8000848:	4405      	add	r5, r0
 800084a:	e7db      	b.n	8000804 <_ZN6Canvas8drawTextEiiPKc+0x14>
    }
}
 800084c:	b003      	add	sp, #12
 800084e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000852:	bf00      	nop
 8000854:	2000012a 	.word	0x2000012a
 8000858:	20000000 	.word	0x20000000

0800085c <_ZN7Console4initEv>:

#include <cstdarg>

#define CONSOLE_USART USART1

void Console::init() {
 800085c:	b510      	push	{r4, lr}
    // setup GPIO pins
    rcc_periph_clock_enable(RCC_GPIOA);
    gpio_mode_setup(GPIOA, GPIO_MODE_AF, GPIO_PUPD_NONE, GPIO9 | GPIO10);
 800085e:	4c1b      	ldr	r4, [pc, #108]	; (80008cc <_ZN7Console4initEv+0x70>)
    rcc_periph_clock_enable(RCC_GPIOA);
 8000860:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8000864:	f003 f894 	bl	8003990 <rcc_periph_clock_enable>
    gpio_mode_setup(GPIOA, GPIO_MODE_AF, GPIO_PUPD_NONE, GPIO9 | GPIO10);
 8000868:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800086c:	4620      	mov	r0, r4
 800086e:	2200      	movs	r2, #0
 8000870:	2102      	movs	r1, #2
 8000872:	f002 ff0f 	bl	8003694 <gpio_mode_setup>
    gpio_set_af(GPIOA, GPIO_AF7, GPIO9 | GPIO10);
 8000876:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800087a:	2107      	movs	r1, #7
 800087c:	4620      	mov	r0, r4
 800087e:	f002 ff46 	bl	800370e <gpio_set_af>

    // setup usart
    rcc_periph_clock_enable(RCC_USART1);
    usart_set_baudrate(CONSOLE_USART, 115200);
 8000882:	f5a4 4470 	sub.w	r4, r4, #61440	; 0xf000
    rcc_periph_clock_enable(RCC_USART1);
 8000886:	f640 0084 	movw	r0, #2180	; 0x884
 800088a:	f003 f881 	bl	8003990 <rcc_periph_clock_enable>
    usart_set_baudrate(CONSOLE_USART, 115200);
 800088e:	4620      	mov	r0, r4
 8000890:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000894:	f002 ffbe 	bl	8003814 <usart_set_baudrate>
    usart_set_databits(CONSOLE_USART, 8);
 8000898:	4620      	mov	r0, r4
 800089a:	2108      	movs	r1, #8
 800089c:	f002 ffd2 	bl	8003844 <usart_set_databits>
    usart_set_stopbits(CONSOLE_USART, USART_STOPBITS_1);
 80008a0:	4620      	mov	r0, r4
 80008a2:	2100      	movs	r1, #0
 80008a4:	f002 ffd7 	bl	8003856 <usart_set_stopbits>
    usart_set_mode(CONSOLE_USART, USART_MODE_TX_RX);
 80008a8:	4620      	mov	r0, r4
 80008aa:	210c      	movs	r1, #12
 80008ac:	f002 ffdf 	bl	800386e <usart_set_mode>
    usart_set_parity(CONSOLE_USART, USART_PARITY_NONE);
 80008b0:	4620      	mov	r0, r4
 80008b2:	2100      	movs	r1, #0
 80008b4:	f002 ffd5 	bl	8003862 <usart_set_parity>
    usart_set_flow_control(CONSOLE_USART, USART_FLOWCONTROL_NONE);
 80008b8:	4620      	mov	r0, r4
 80008ba:	2100      	movs	r1, #0
 80008bc:	f002 ffdd 	bl	800387a <usart_set_flow_control>
    usart_enable(CONSOLE_USART);
 80008c0:	4620      	mov	r0, r4
}
 80008c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    usart_enable(CONSOLE_USART);
 80008c6:	f002 bfde 	b.w	8003886 <usart_enable>
 80008ca:	bf00      	nop
 80008cc:	40020000 	.word	0x40020000

080008d0 <_ZN7Console6deinitEv>:

void Console::deinit() {
 80008d0:	b508      	push	{r3, lr}
    rcc_periph_clock_disable(RCC_GPIOA);
 80008d2:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 80008d6:	f003 f868 	bl	80039aa <rcc_periph_clock_disable>
    rcc_periph_clock_disable(RCC_USART1);
 80008da:	f640 0084 	movw	r0, #2180	; 0x884
 80008de:	f003 f864 	bl	80039aa <rcc_periph_clock_disable>
    rcc_periph_reset_pulse(RST_GPIOA);
 80008e2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80008e6:	f003 f86f 	bl	80039c8 <rcc_periph_reset_pulse>
    rcc_periph_reset_pulse(RST_USART1);
 80008ea:	f240 4084 	movw	r0, #1156	; 0x484
}
 80008ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    rcc_periph_reset_pulse(RST_USART1);
 80008f2:	f003 b869 	b.w	80039c8 <rcc_periph_reset_pulse>
	...

080008f8 <_ZN7Console4sendEc>:
    for (size_t i = 0; i < length; ++i) {
        write(s[i]);
    }
}

void Console::send(char c) {
 80008f8:	b538      	push	{r3, r4, r5, lr}
    usart_wait_send_ready(CONSOLE_USART);
 80008fa:	4c05      	ldr	r4, [pc, #20]	; (8000910 <_ZN7Console4sendEc+0x18>)
void Console::send(char c) {
 80008fc:	4605      	mov	r5, r0
    usart_wait_send_ready(CONSOLE_USART);
 80008fe:	4620      	mov	r0, r4
 8000900:	f002 ffca 	bl	8003898 <usart_wait_send_ready>
    usart_send(CONSOLE_USART, c);
 8000904:	4629      	mov	r1, r5
 8000906:	4620      	mov	r0, r4
}
 8000908:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    usart_send(CONSOLE_USART, c);
 800090c:	f002 bfc0 	b.w	8003890 <usart_send>
 8000910:	40011000 	.word	0x40011000

08000914 <_ZN7Console5writeEc>:
    if (c == '\n') {
 8000914:	280a      	cmp	r0, #10
void Console::write(char c) {
 8000916:	b510      	push	{r4, lr}
 8000918:	4604      	mov	r4, r0
    if (c == '\n') {
 800091a:	d102      	bne.n	8000922 <_ZN7Console5writeEc+0xe>
        send('\r');
 800091c:	200d      	movs	r0, #13
 800091e:	f7ff ffeb 	bl	80008f8 <_ZN7Console4sendEc>
    send(c);
 8000922:	4620      	mov	r0, r4
}
 8000924:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    send(c);
 8000928:	f7ff bfe6 	b.w	80008f8 <_ZN7Console4sendEc>

0800092c <_ZN7Console5writeEPKcj>:
void Console::write(const char *s, size_t length) {
 800092c:	b538      	push	{r3, r4, r5, lr}
 800092e:	4604      	mov	r4, r0
 8000930:	1845      	adds	r5, r0, r1
    for (size_t i = 0; i < length; ++i) {
 8000932:	42ac      	cmp	r4, r5
 8000934:	d004      	beq.n	8000940 <_ZN7Console5writeEPKcj+0x14>
        write(s[i]);
 8000936:	f814 0b01 	ldrb.w	r0, [r4], #1
 800093a:	f7ff ffeb 	bl	8000914 <_ZN7Console5writeEc>
    for (size_t i = 0; i < length; ++i) {
 800093e:	e7f8      	b.n	8000932 <_ZN7Console5writeEPKcj+0x6>
}
 8000940:	bd38      	pop	{r3, r4, r5, pc}

08000942 <_write>:

extern "C" {

static char *_write(char *buf, void *user, int len) {
 8000942:	b510      	push	{r4, lr}
    Console::write(buf, len);
 8000944:	4611      	mov	r1, r2
static char *_write(char *buf, void *user, int len) {
 8000946:	4604      	mov	r4, r0
    Console::write(buf, len);
 8000948:	f7ff fff0 	bl	800092c <_ZN7Console5writeEPKcj>
    return buf;
}
 800094c:	4620      	mov	r0, r4
 800094e:	bd10      	pop	{r4, pc}

08000950 <printf>:

void printf(char const *fmt, ...) {
 8000950:	b40f      	push	{r0, r1, r2, r3}
 8000952:	b500      	push	{lr}
 8000954:	b0a5      	sub	sp, #148	; 0x94
 8000956:	aa26      	add	r2, sp, #152	; 0x98
    va_list va;
    char buf[CONFIG_PRINTF_BUFFER];
    va_start(va, fmt);
    stbsp_vsprintfcb(&_write, buf, buf, fmt, va);
 8000958:	4806      	ldr	r0, [pc, #24]	; (8000974 <printf+0x24>)
void printf(char const *fmt, ...) {
 800095a:	f852 3b04 	ldr.w	r3, [r2], #4
    va_start(va, fmt);
 800095e:	9203      	str	r2, [sp, #12]
    stbsp_vsprintfcb(&_write, buf, buf, fmt, va);
 8000960:	9200      	str	r2, [sp, #0]
 8000962:	aa04      	add	r2, sp, #16
 8000964:	4611      	mov	r1, r2
 8000966:	f001 fa1b 	bl	8001da0 <stbsp_vsprintfcb>
    va_end(va);
}
 800096a:	b025      	add	sp, #148	; 0x94
 800096c:	f85d eb04 	ldr.w	lr, [sp], #4
 8000970:	b004      	add	sp, #16
 8000972:	4770      	bx	lr
 8000974:	08000943 	.word	0x08000943

08000978 <_ZZN7Encoder7processEvENKUlibE_clEib.isra.0>:
    if (lastDown && !_down) {
        _released = true;
    }

    auto updateEncoder = [&] (int pin, bool state) {
        if (state != encoderState[pin]) {
 8000978:	4b08      	ldr	r3, [pc, #32]	; (800099c <_ZZN7Encoder7processEvENKUlibE_clEib.isra.0+0x24>)
 800097a:	5c1a      	ldrb	r2, [r3, r0]
 800097c:	428a      	cmp	r2, r1
 800097e:	d00c      	beq.n	800099a <_ZZN7Encoder7processEvENKUlibE_clEib.isra.0+0x22>
            encoderState[pin] = state;
 8000980:	5419      	strb	r1, [r3, r0]
            if (!encoderState[0] && !encoderState[1]) {
 8000982:	7819      	ldrb	r1, [r3, #0]
 8000984:	b949      	cbnz	r1, 800099a <_ZZN7Encoder7processEvENKUlibE_clEib.isra.0+0x22>
 8000986:	785b      	ldrb	r3, [r3, #1]
 8000988:	b93b      	cbnz	r3, 800099a <_ZZN7Encoder7processEvENKUlibE_clEib.isra.0+0x22>
                _value += pin ? 1 : -1;
 800098a:	4a05      	ldr	r2, [pc, #20]	; (80009a0 <_ZZN7Encoder7processEvENKUlibE_clEib.isra.0+0x28>)
 800098c:	2800      	cmp	r0, #0
 800098e:	6811      	ldr	r1, [r2, #0]
 8000990:	bf08      	it	eq
 8000992:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
 8000996:	4408      	add	r0, r1
 8000998:	6010      	str	r0, [r2, #0]
            }
        }
    };
 800099a:	4770      	bx	lr
 800099c:	200045d9 	.word	0x200045d9
 80009a0:	200045e0 	.word	0x200045e0

080009a4 <_ZN7Encoder4initEv>:
void Encoder::init() {
 80009a4:	b510      	push	{r4, lr}
    gpio_mode_setup(ENC_PORT, GPIO_MODE_INPUT, GPIO_PUPD_PULLUP, ENC_GPIO);
 80009a6:	4c0b      	ldr	r4, [pc, #44]	; (80009d4 <_ZN7Encoder4initEv+0x30>)
    rcc_periph_clock_enable(RCC_GPIOC);
 80009a8:	f240 6002 	movw	r0, #1538	; 0x602
 80009ac:	f002 fff0 	bl	8003990 <rcc_periph_clock_enable>
    gpio_mode_setup(ENC_PORT, GPIO_MODE_INPUT, GPIO_PUPD_PULLUP, ENC_GPIO);
 80009b0:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80009b4:	2201      	movs	r2, #1
 80009b6:	2100      	movs	r1, #0
 80009b8:	4620      	mov	r0, r4
 80009ba:	f002 fe6b 	bl	8003694 <gpio_mode_setup>
    _down = !gpio_get(ENC_PORT, ENC_SWITCH);
 80009be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009c2:	4620      	mov	r0, r4
 80009c4:	f002 fe63 	bl	800368e <gpio_get>
 80009c8:	4b03      	ldr	r3, [pc, #12]	; (80009d8 <_ZN7Encoder4initEv+0x34>)
 80009ca:	fab0 f080 	clz	r0, r0
 80009ce:	0941      	lsrs	r1, r0, #5
 80009d0:	7019      	strb	r1, [r3, #0]
}
 80009d2:	bd10      	pop	{r4, pc}
 80009d4:	40020800 	.word	0x40020800
 80009d8:	200045df 	.word	0x200045df

080009dc <_ZN7Encoder6deinitEv>:
void Encoder::deinit() {
 80009dc:	b508      	push	{r3, lr}
    rcc_periph_clock_disable(RCC_GPIOC);
 80009de:	f240 6002 	movw	r0, #1538	; 0x602
 80009e2:	f002 ffe2 	bl	80039aa <rcc_periph_clock_disable>
    rcc_periph_reset_release(RST_GPIOC);
 80009e6:	f240 2002 	movw	r0, #514	; 0x202
}
 80009ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    rcc_periph_reset_release(RST_GPIOC);
 80009ee:	f002 bffc 	b.w	80039ea <rcc_periph_reset_release>
	...

080009f4 <_ZN7Encoder7processEv>:
void Encoder::process() {
 80009f4:	b538      	push	{r3, r4, r5, lr}
    bool lastDown = _down;
 80009f6:	4c25      	ldr	r4, [pc, #148]	; (8000a8c <_ZN7Encoder7processEv+0x98>)
    _down = !gpio_get(ENC_PORT, ENC_SWITCH);
 80009f8:	4825      	ldr	r0, [pc, #148]	; (8000a90 <_ZN7Encoder7processEv+0x9c>)
    bool lastDown = _down;
 80009fa:	7825      	ldrb	r5, [r4, #0]
    _down = !gpio_get(ENC_PORT, ENC_SWITCH);
 80009fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a00:	f002 fe45 	bl	800368e <gpio_get>
 8000a04:	4603      	mov	r3, r0
 8000a06:	fab0 f080 	clz	r0, r0
 8000a0a:	0941      	lsrs	r1, r0, #5
 8000a0c:	7021      	strb	r1, [r4, #0]
    if (!lastDown && _down) {
 8000a0e:	2d00      	cmp	r5, #0
 8000a10:	d137      	bne.n	8000a82 <_ZN7Encoder7processEv+0x8e>
 8000a12:	b913      	cbnz	r3, 8000a1a <_ZN7Encoder7processEv+0x26>
        _pressed = true;
 8000a14:	4c1f      	ldr	r4, [pc, #124]	; (8000a94 <_ZN7Encoder7processEv+0xa0>)
        _released = true;
 8000a16:	2201      	movs	r2, #1
 8000a18:	7022      	strb	r2, [r4, #0]

    updateEncoder(0, encoderDebouncer[0].debounce(!gpio_get(ENC_PORT, ENC_A)));
 8000a1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a1e:	481c      	ldr	r0, [pc, #112]	; (8000a90 <_ZN7Encoder7processEv+0x9c>)

template<uint8_t Count>
class Debouncer {
public:
    bool debounce(bool state) {
        if (state != _state) {
 8000a20:	4c1d      	ldr	r4, [pc, #116]	; (8000a98 <_ZN7Encoder7processEv+0xa4>)
 8000a22:	f002 fe34 	bl	800368e <gpio_get>
 8000a26:	f894 c000 	ldrb.w	ip, [r4]
 8000a2a:	fab0 f580 	clz	r5, r0
 8000a2e:	0968      	lsrs	r0, r5, #5
 8000a30:	4584      	cmp	ip, r0
 8000a32:	d006      	beq.n	8000a42 <_ZN7Encoder7processEv+0x4e>
            if (++_counter >= Count) {
 8000a34:	7863      	ldrb	r3, [r4, #1]
 8000a36:	3301      	adds	r3, #1
 8000a38:	b2d9      	uxtb	r1, r3
 8000a3a:	2902      	cmp	r1, #2
 8000a3c:	7061      	strb	r1, [r4, #1]
 8000a3e:	d902      	bls.n	8000a46 <_ZN7Encoder7processEv+0x52>
                _state = state;
 8000a40:	7020      	strb	r0, [r4, #0]
                _counter = 0;
            }
        } else {
            _counter = 0;
 8000a42:	2200      	movs	r2, #0
 8000a44:	7062      	strb	r2, [r4, #1]
 8000a46:	7821      	ldrb	r1, [r4, #0]
 8000a48:	2000      	movs	r0, #0
 8000a4a:	f7ff ff95 	bl	8000978 <_ZZN7Encoder7processEvENKUlibE_clEib.isra.0>
    updateEncoder(1, encoderDebouncer[1].debounce(!gpio_get(ENC_PORT, ENC_B)));
 8000a4e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a52:	480f      	ldr	r0, [pc, #60]	; (8000a90 <_ZN7Encoder7processEv+0x9c>)
 8000a54:	f002 fe1b 	bl	800368e <gpio_get>
        if (state != _state) {
 8000a58:	f894 c002 	ldrb.w	ip, [r4, #2]
 8000a5c:	fab0 f580 	clz	r5, r0
 8000a60:	0968      	lsrs	r0, r5, #5
 8000a62:	4584      	cmp	ip, r0
 8000a64:	d006      	beq.n	8000a74 <_ZN7Encoder7processEv+0x80>
            if (++_counter >= Count) {
 8000a66:	78e3      	ldrb	r3, [r4, #3]
 8000a68:	3301      	adds	r3, #1
 8000a6a:	b2d9      	uxtb	r1, r3
 8000a6c:	2902      	cmp	r1, #2
 8000a6e:	70e1      	strb	r1, [r4, #3]
 8000a70:	d902      	bls.n	8000a78 <_ZN7Encoder7processEv+0x84>
                _state = state;
 8000a72:	70a0      	strb	r0, [r4, #2]
            _counter = 0;
 8000a74:	2200      	movs	r2, #0
 8000a76:	70e2      	strb	r2, [r4, #3]
 8000a78:	78a1      	ldrb	r1, [r4, #2]
 8000a7a:	2001      	movs	r0, #1
 8000a7c:	f7ff ff7c 	bl	8000978 <_ZZN7Encoder7processEvENKUlibE_clEib.isra.0>
}
 8000a80:	bd38      	pop	{r3, r4, r5, pc}
    if (lastDown && !_down) {
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d0c9      	beq.n	8000a1a <_ZN7Encoder7processEv+0x26>
        _released = true;
 8000a86:	4c05      	ldr	r4, [pc, #20]	; (8000a9c <_ZN7Encoder7processEv+0xa8>)
 8000a88:	e7c5      	b.n	8000a16 <_ZN7Encoder7processEv+0x22>
 8000a8a:	bf00      	nop
 8000a8c:	200045df 	.word	0x200045df
 8000a90:	40020800 	.word	0x40020800
 8000a94:	200045e4 	.word	0x200045e4
 8000a98:	200045db 	.word	0x200045db
 8000a9c:	200045e5 	.word	0x200045e5

08000aa0 <_ZN7Encoder5resetEv>:
 *
 * Mask all interrupts globally
 */
static inline void cm_disable_interrupts(void)
{
	__asm__ volatile ("CPSID I\n");
 8000aa0:	b672      	cpsid	i

void Encoder::reset() {
    InterruptLock lock;
    _pressed = false;
 8000aa2:	4a04      	ldr	r2, [pc, #16]	; (8000ab4 <_ZN7Encoder5resetEv+0x14>)
    _released = false;
 8000aa4:	4804      	ldr	r0, [pc, #16]	; (8000ab8 <_ZN7Encoder5resetEv+0x18>)
    _value = false;
 8000aa6:	4905      	ldr	r1, [pc, #20]	; (8000abc <_ZN7Encoder5resetEv+0x1c>)
    _pressed = false;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	7013      	strb	r3, [r2, #0]
    _released = false;
 8000aac:	7003      	strb	r3, [r0, #0]
    _value = false;
 8000aae:	600b      	str	r3, [r1, #0]
	__asm__ volatile ("CPSIE I\n");
 8000ab0:	b662      	cpsie	i
}
 8000ab2:	4770      	bx	lr
 8000ab4:	200045e4 	.word	0x200045e4
 8000ab8:	200045e5 	.word	0x200045e5
 8000abc:	200045e0 	.word	0x200045e0

08000ac0 <_ZN7Encoder7pressedEv>:
	__asm__ volatile ("CPSID I\n");
 8000ac0:	b672      	cpsid	i

bool Encoder::pressed() {
    InterruptLock lock;
    bool result = _pressed;
 8000ac2:	4b03      	ldr	r3, [pc, #12]	; (8000ad0 <_ZN7Encoder7pressedEv+0x10>)
    _pressed = false;
 8000ac4:	2200      	movs	r2, #0
    bool result = _pressed;
 8000ac6:	7818      	ldrb	r0, [r3, #0]
    _pressed = false;
 8000ac8:	701a      	strb	r2, [r3, #0]
	__asm__ volatile ("CPSIE I\n");
 8000aca:	b662      	cpsie	i
    return result;
}
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	200045e4 	.word	0x200045e4

08000ad4 <_ZN7Encoder5valueEv>:
	__asm__ volatile ("CPSID I\n");
 8000ad4:	b672      	cpsid	i
    return result;
}

int Encoder::value() {
    InterruptLock lock;
    int result = _value;
 8000ad6:	4b03      	ldr	r3, [pc, #12]	; (8000ae4 <_ZN7Encoder5valueEv+0x10>)
    _value = 0;
 8000ad8:	2200      	movs	r2, #0
    int result = _value;
 8000ada:	6818      	ldr	r0, [r3, #0]
    _value = 0;
 8000adc:	601a      	str	r2, [r3, #0]
	__asm__ volatile ("CPSIE I\n");
 8000ade:	b662      	cpsie	i
    return result;
}
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	200045e0 	.word	0x200045e0

08000ae8 <disk_initialize>:
#include "lib/ff/diskio.h"

extern "C" {

DSTATUS disk_initialize(BYTE pdrv) {
    DBG("disk_initialize(pdrv=%d)", pdrv);
 8000ae8:	4601      	mov	r1, r0
DSTATUS disk_initialize(BYTE pdrv) {
 8000aea:	b508      	push	{r3, lr}
    DBG("disk_initialize(pdrv=%d)", pdrv);
 8000aec:	4804      	ldr	r0, [pc, #16]	; (8000b00 <disk_initialize+0x18>)
 8000aee:	f7ff ff2f 	bl	8000950 <printf>
    return SdCard::available() ? 0 : STA_NOINIT;
 8000af2:	f000 ff89 	bl	8001a08 <_ZN6SdCard9availableEv>
 8000af6:	f080 0001 	eor.w	r0, r0, #1
}
 8000afa:	b2c0      	uxtb	r0, r0
 8000afc:	bd08      	pop	{r3, pc}
 8000afe:	bf00      	nop
 8000b00:	08005121 	.word	0x08005121

08000b04 <disk_status>:

DSTATUS disk_status(BYTE pdrv) {
 8000b04:	b508      	push	{r3, lr}
    // ASSERT(pdrv == 0, "only one physical drive available");
    // DBG("disk_status(pdrv=%d)", pdrv);
    if (!SdCard::available()) {
 8000b06:	f000 ff7f 	bl	8001a08 <_ZN6SdCard9availableEv>
 8000b0a:	2800      	cmp	r0, #0
        return STA_NODISK;
    }
    return 0;
}
 8000b0c:	bf0c      	ite	eq
 8000b0e:	2002      	moveq	r0, #2
 8000b10:	2000      	movne	r0, #0
 8000b12:	bd08      	pop	{r3, pc}

08000b14 <disk_read>:

DRESULT disk_read(BYTE pdrv, BYTE *buf, DWORD sector, UINT count) {
 8000b14:	b508      	push	{r3, lr}
 8000b16:	4608      	mov	r0, r1
 8000b18:	4611      	mov	r1, r2
    // ASSERT(pdrv == 0, "only one physical drive available");
    // DBG("disk_read(pdrv=%d,sector=%d,count=%d)", pdrv, sector, count);
    return SdCard::read(buf, sector, count) ? RES_OK : RES_ERROR;
 8000b1a:	b2da      	uxtb	r2, r3
 8000b1c:	f001 f836 	bl	8001b8c <_ZN6SdCard4readEPhmh>
 8000b20:	f080 0001 	eor.w	r0, r0, #1
}
 8000b24:	b2c0      	uxtb	r0, r0
 8000b26:	bd08      	pop	{r3, pc}

08000b28 <_ZL10waitTxDonev>:
    { 0x00 }
};


static inline void waitTxDone() {
    while (!(SPI_SR(LCD_SPI) & SPI_SR_TXE));
 8000b28:	4b04      	ldr	r3, [pc, #16]	; (8000b3c <_ZL10waitTxDonev+0x14>)
 8000b2a:	461a      	mov	r2, r3
 8000b2c:	6819      	ldr	r1, [r3, #0]
 8000b2e:	0789      	lsls	r1, r1, #30
 8000b30:	d5fc      	bpl.n	8000b2c <_ZL10waitTxDonev+0x4>
    while ((SPI_SR(LCD_SPI) & SPI_SR_BSY));
 8000b32:	6810      	ldr	r0, [r2, #0]
 8000b34:	0603      	lsls	r3, r0, #24
 8000b36:	d4fc      	bmi.n	8000b32 <_ZL10waitTxDonev+0xa>
}
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	40003808 	.word	0x40003808

08000b40 <_ZN5DelayL8delay_usEm>:
static void delay_ns() {
    nop<ns_to_cycles(ns)>();
}

// microsecond delay
static void delay_us(uint32_t us) {
 8000b40:	b082      	sub	sp, #8
    for (volatile uint32_t i = 0; i < us * 10; ++i) {
 8000b42:	2300      	movs	r3, #0
 8000b44:	210a      	movs	r1, #10
 8000b46:	9301      	str	r3, [sp, #4]
 8000b48:	4348      	muls	r0, r1
 8000b4a:	9a01      	ldr	r2, [sp, #4]
 8000b4c:	4290      	cmp	r0, r2
 8000b4e:	d914      	bls.n	8000b7a <_ZN5DelayL8delay_usEm+0x3a>
    asm volatile ("nop");
 8000b50:	bf00      	nop
 8000b52:	bf00      	nop
 8000b54:	bf00      	nop
 8000b56:	bf00      	nop
 8000b58:	bf00      	nop
 8000b5a:	bf00      	nop
 8000b5c:	bf00      	nop
 8000b5e:	bf00      	nop
 8000b60:	bf00      	nop
 8000b62:	bf00      	nop
 8000b64:	bf00      	nop
 8000b66:	bf00      	nop
 8000b68:	bf00      	nop
 8000b6a:	bf00      	nop
 8000b6c:	bf00      	nop
 8000b6e:	bf00      	nop
 8000b70:	bf00      	nop
    for (volatile uint32_t i = 0; i < us * 10; ++i) {
 8000b72:	9b01      	ldr	r3, [sp, #4]
 8000b74:	3301      	adds	r3, #1
 8000b76:	9301      	str	r3, [sp, #4]
 8000b78:	e7e7      	b.n	8000b4a <_ZN5DelayL8delay_usEm+0xa>
        delay_ns<100>();
    }
}
 8000b7a:	b002      	add	sp, #8
 8000b7c:	4770      	bx	lr

08000b7e <_ZN3Lcd6deinitEv>:

    // write commands for initialization
    initialize();
}

void Lcd::deinit() {
 8000b7e:	b508      	push	{r3, lr}
    rcc_periph_clock_disable(RCC_GPIOB);
 8000b80:	f240 6001 	movw	r0, #1537	; 0x601
 8000b84:	f002 ff11 	bl	80039aa <rcc_periph_clock_disable>
    rcc_periph_clock_disable(RCC_SPI2);
 8000b88:	f640 000e 	movw	r0, #2062	; 0x80e
 8000b8c:	f002 ff0d 	bl	80039aa <rcc_periph_clock_disable>
    rcc_periph_reset_pulse(RST_GPIOB);
 8000b90:	f240 2001 	movw	r0, #513	; 0x201
 8000b94:	f002 ff18 	bl	80039c8 <rcc_periph_reset_pulse>
    rcc_periph_reset_pulse(RST_SPI2);
 8000b98:	f240 400e 	movw	r0, #1038	; 0x40e
}
 8000b9c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    rcc_periph_reset_pulse(RST_SPI2);
 8000ba0:	f002 bf12 	b.w	80039c8 <rcc_periph_reset_pulse>

08000ba4 <_ZN3Lcd7sendCmdEh>:
            sendData(c);
        }
    }
}

void Lcd::sendCmd(uint8_t cmd) {
 8000ba4:	b510      	push	{r4, lr}
 8000ba6:	4604      	mov	r4, r0
    waitTxDone();
 8000ba8:	f7ff ffbe 	bl	8000b28 <_ZL10waitTxDonev>
    gpio_clear(LCD_PORT, LCD_DC);
 8000bac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bb0:	4804      	ldr	r0, [pc, #16]	; (8000bc4 <_ZN3Lcd7sendCmdEh+0x20>)
 8000bb2:	f002 fd69 	bl	8003688 <gpio_clear>
    spi_send(LCD_SPI, cmd);
 8000bb6:	4621      	mov	r1, r4
 8000bb8:	4803      	ldr	r0, [pc, #12]	; (8000bc8 <_ZN3Lcd7sendCmdEh+0x24>)
}
 8000bba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    spi_send(LCD_SPI, cmd);
 8000bbe:	f002 be10 	b.w	80037e2 <spi_send>
 8000bc2:	bf00      	nop
 8000bc4:	40020400 	.word	0x40020400
 8000bc8:	40003800 	.word	0x40003800

08000bcc <_ZN3Lcd8sendDataEh>:

void Lcd::sendData(uint8_t data) {
 8000bcc:	b510      	push	{r4, lr}
 8000bce:	4604      	mov	r4, r0
    waitTxDone();
 8000bd0:	f7ff ffaa 	bl	8000b28 <_ZL10waitTxDonev>
    gpio_set(LCD_PORT, LCD_DC);
 8000bd4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bd8:	4804      	ldr	r0, [pc, #16]	; (8000bec <_ZN3Lcd8sendDataEh+0x20>)
 8000bda:	f002 fd53 	bl	8003684 <gpio_set>
    spi_send(LCD_SPI, data);
 8000bde:	4621      	mov	r1, r4
 8000be0:	4803      	ldr	r0, [pc, #12]	; (8000bf0 <_ZN3Lcd8sendDataEh+0x24>)
}
 8000be2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    spi_send(LCD_SPI, data);
 8000be6:	f002 bdfc 	b.w	80037e2 <spi_send>
 8000bea:	bf00      	nop
 8000bec:	40020400 	.word	0x40020400
 8000bf0:	40003800 	.word	0x40003800

08000bf4 <_ZN3Lcd10initializeEv>:

void Lcd::initialize() {
 8000bf4:	b510      	push	{r4, lr}
 8000bf6:	4c0c      	ldr	r4, [pc, #48]	; (8000c28 <_ZN3Lcd10initializeEv+0x34>)
    InitCommand *cmd = initCommands;
    while (cmd->cmd) {
 8000bf8:	f814 0c04 	ldrb.w	r0, [r4, #-4]
 8000bfc:	b190      	cbz	r0, 8000c24 <_ZN3Lcd10initializeEv+0x30>
        sendCmd(cmd->cmd);
 8000bfe:	f7ff ffd1 	bl	8000ba4 <_ZN3Lcd7sendCmdEh>
        if (cmd->len > 0) {
 8000c02:	f814 3c03 	ldrb.w	r3, [r4, #-3]
 8000c06:	b11b      	cbz	r3, 8000c10 <_ZN3Lcd10initializeEv+0x1c>
            sendData(cmd->data0);
 8000c08:	f814 0c02 	ldrb.w	r0, [r4, #-2]
 8000c0c:	f7ff ffde 	bl	8000bcc <_ZN3Lcd8sendDataEh>
        }
        if (cmd->len > 1) {
 8000c10:	f814 0c03 	ldrb.w	r0, [r4, #-3]
 8000c14:	2801      	cmp	r0, #1
 8000c16:	d903      	bls.n	8000c20 <_ZN3Lcd10initializeEv+0x2c>
            sendData(cmd->data1);
 8000c18:	f814 0c01 	ldrb.w	r0, [r4, #-1]
 8000c1c:	f7ff ffd6 	bl	8000bcc <_ZN3Lcd8sendDataEh>
 8000c20:	3404      	adds	r4, #4
    while (cmd->cmd) {
 8000c22:	e7e9      	b.n	8000bf8 <_ZN3Lcd10initializeEv+0x4>
        }
        ++cmd;
    }
}
 8000c24:	bd10      	pop	{r4, pc}
 8000c26:	bf00      	nop
 8000c28:	20000426 	.word	0x20000426

08000c2c <_ZN3Lcd4initEv>:
void Lcd::init() {
 8000c2c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    gpio_mode_setup(GPIOB, GPIO_MODE_AF, GPIO_PUPD_NONE, GPIO13);   // SCK
 8000c2e:	4c32      	ldr	r4, [pc, #200]	; (8000cf8 <_ZN3Lcd4initEv+0xcc>)
    gpio_mode_setup(GPIOC, GPIO_MODE_AF, GPIO_PUPD_NONE, GPIO3);    // MOSI
 8000c30:	4d32      	ldr	r5, [pc, #200]	; (8000cfc <_ZN3Lcd4initEv+0xd0>)
    spi_reset(LCD_SPI);
 8000c32:	4e33      	ldr	r6, [pc, #204]	; (8000d00 <_ZN3Lcd4initEv+0xd4>)
    rcc_periph_clock_enable(RCC_GPIOB);
 8000c34:	f240 6001 	movw	r0, #1537	; 0x601
 8000c38:	f002 feaa 	bl	8003990 <rcc_periph_clock_enable>
    rcc_periph_clock_enable(RCC_GPIOC);
 8000c3c:	f240 6002 	movw	r0, #1538	; 0x602
 8000c40:	f002 fea6 	bl	8003990 <rcc_periph_clock_enable>
    gpio_mode_setup(GPIOB, GPIO_MODE_AF, GPIO_PUPD_NONE, GPIO13);   // SCK
 8000c44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c48:	4620      	mov	r0, r4
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2102      	movs	r1, #2
 8000c4e:	f002 fd21 	bl	8003694 <gpio_mode_setup>
    gpio_set_af(GPIOB, GPIO_AF5, GPIO13);
 8000c52:	4620      	mov	r0, r4
 8000c54:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c58:	2105      	movs	r1, #5
 8000c5a:	f002 fd58 	bl	800370e <gpio_set_af>
    gpio_mode_setup(GPIOC, GPIO_MODE_AF, GPIO_PUPD_NONE, GPIO3);    // MOSI
 8000c5e:	2308      	movs	r3, #8
 8000c60:	4628      	mov	r0, r5
 8000c62:	2200      	movs	r2, #0
 8000c64:	2102      	movs	r1, #2
 8000c66:	f002 fd15 	bl	8003694 <gpio_mode_setup>
    gpio_set_af(GPIOC, GPIO_AF5, GPIO3);
 8000c6a:	2208      	movs	r2, #8
 8000c6c:	2105      	movs	r1, #5
 8000c6e:	4628      	mov	r0, r5
 8000c70:	f002 fd4d 	bl	800370e <gpio_set_af>
    rcc_periph_clock_enable(RCC_SPI2);
 8000c74:	f640 000e 	movw	r0, #2062	; 0x80e
 8000c78:	f002 fe8a 	bl	8003990 <rcc_periph_clock_enable>
    spi_init_master(LCD_SPI,
 8000c7c:	2500      	movs	r5, #0
    spi_reset(LCD_SPI);
 8000c7e:	4630      	mov	r0, r6
 8000c80:	f002 fd7a 	bl	8003778 <spi_reset>
    spi_init_master(LCD_SPI,
 8000c84:	2301      	movs	r3, #1
 8000c86:	2202      	movs	r2, #2
 8000c88:	2108      	movs	r1, #8
 8000c8a:	e9cd 5500 	strd	r5, r5, [sp]
 8000c8e:	4630      	mov	r0, r6
 8000c90:	f002 fdac 	bl	80037ec <spi_init_master>
    spi_enable(LCD_SPI);
 8000c94:	4630      	mov	r0, r6
 8000c96:	f002 fd9f 	bl	80037d8 <spi_enable>
    gpio_mode_setup(LCD_PORT, GPIO_MODE_OUTPUT, GPIO_PUPD_NONE, LCD_GPIO);
 8000c9a:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8000c9e:	462a      	mov	r2, r5
 8000ca0:	4620      	mov	r0, r4
 8000ca2:	2101      	movs	r1, #1
 8000ca4:	f002 fcf6 	bl	8003694 <gpio_mode_setup>
    gpio_clear(LCD_PORT, LCD_GPIO);
 8000ca8:	4620      	mov	r0, r4
 8000caa:	f44f 4150 	mov.w	r1, #53248	; 0xd000
 8000cae:	f002 fceb 	bl	8003688 <gpio_clear>
    gpio_clear(LCD_PORT, LCD_CS);
 8000cb2:	4620      	mov	r0, r4
 8000cb4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cb8:	f002 fce6 	bl	8003688 <gpio_clear>
    gpio_set(LCD_PORT, LCD_RES);
 8000cbc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cc0:	4620      	mov	r0, r4
 8000cc2:	f002 fcdf 	bl	8003684 <gpio_set>
    Delay::delay_us(1000);
 8000cc6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cca:	f7ff ff39 	bl	8000b40 <_ZN5DelayL8delay_usEm>
    gpio_clear(LCD_PORT, LCD_RES);
 8000cce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cd2:	4620      	mov	r0, r4
 8000cd4:	f002 fcd8 	bl	8003688 <gpio_clear>
    Delay::delay_us(100);
 8000cd8:	2064      	movs	r0, #100	; 0x64
 8000cda:	f7ff ff31 	bl	8000b40 <_ZN5DelayL8delay_usEm>
    gpio_set(LCD_PORT, LCD_RES);
 8000cde:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ce2:	4620      	mov	r0, r4
 8000ce4:	f002 fcce 	bl	8003684 <gpio_set>
    Delay::delay_us(100);
 8000ce8:	2064      	movs	r0, #100	; 0x64
 8000cea:	f7ff ff29 	bl	8000b40 <_ZN5DelayL8delay_usEm>
}
 8000cee:	b002      	add	sp, #8
 8000cf0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    initialize();
 8000cf4:	f7ff bf7e 	b.w	8000bf4 <_ZN3Lcd10initializeEv>
 8000cf8:	40020400 	.word	0x40020400
 8000cfc:	40020800 	.word	0x40020800
 8000d00:	40003800 	.word	0x40003800

08000d04 <_ZN3Lcd10setColAddrEhh>:

void Lcd::setColAddr(uint8_t a, uint8_t b) {
 8000d04:	b538      	push	{r3, r4, r5, lr}
 8000d06:	4605      	mov	r5, r0
    sendCmd(0x15);
 8000d08:	2015      	movs	r0, #21
void Lcd::setColAddr(uint8_t a, uint8_t b) {
 8000d0a:	460c      	mov	r4, r1
    sendCmd(0x15);
 8000d0c:	f7ff ff4a 	bl	8000ba4 <_ZN3Lcd7sendCmdEh>
    sendData(a);
 8000d10:	4628      	mov	r0, r5
 8000d12:	f7ff ff5b 	bl	8000bcc <_ZN3Lcd8sendDataEh>
    sendData(b);
 8000d16:	4620      	mov	r0, r4
}
 8000d18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    sendData(b);
 8000d1c:	f7ff bf56 	b.w	8000bcc <_ZN3Lcd8sendDataEh>

08000d20 <_ZN3Lcd10setRowAddrEhh>:

void Lcd::setRowAddr(uint8_t a, uint8_t b) {
 8000d20:	b538      	push	{r3, r4, r5, lr}
 8000d22:	4605      	mov	r5, r0
    sendCmd(0x75);
 8000d24:	2075      	movs	r0, #117	; 0x75
void Lcd::setRowAddr(uint8_t a, uint8_t b) {
 8000d26:	460c      	mov	r4, r1
    sendCmd(0x75);
 8000d28:	f7ff ff3c 	bl	8000ba4 <_ZN3Lcd7sendCmdEh>
    sendData(a);
 8000d2c:	4628      	mov	r0, r5
 8000d2e:	f7ff ff4d 	bl	8000bcc <_ZN3Lcd8sendDataEh>
    sendData(b);
 8000d32:	4620      	mov	r0, r4
}
 8000d34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    sendData(b);
 8000d38:	f7ff bf48 	b.w	8000bcc <_ZN3Lcd8sendDataEh>

08000d3c <_ZN3Lcd8setWriteEv>:

void Lcd::setWrite() {
    sendCmd(0x5C);
 8000d3c:	205c      	movs	r0, #92	; 0x5c
 8000d3e:	f7ff bf31 	b.w	8000ba4 <_ZN3Lcd7sendCmdEh>

08000d42 <_ZN3Lcd4drawEPh>:
void Lcd::draw(uint8_t *frameBuffer) {
 8000d42:	b570      	push	{r4, r5, r6, lr}
    setColAddr(0x1c,0x5b);
 8000d44:	215b      	movs	r1, #91	; 0x5b
void Lcd::draw(uint8_t *frameBuffer) {
 8000d46:	4604      	mov	r4, r0
    setColAddr(0x1c,0x5b);
 8000d48:	201c      	movs	r0, #28
 8000d4a:	f7ff ffdb 	bl	8000d04 <_ZN3Lcd10setColAddrEhh>
    setRowAddr(0x00,0x3f);
 8000d4e:	213f      	movs	r1, #63	; 0x3f
 8000d50:	2000      	movs	r0, #0
 8000d52:	f7ff ffe5 	bl	8000d20 <_ZN3Lcd10setRowAddrEhh>
    setWrite();
 8000d56:	f7ff fff1 	bl	8000d3c <_ZN3Lcd8setWriteEv>
 8000d5a:	1ca5      	adds	r5, r4, #2
 8000d5c:	f504 4480 	add.w	r4, r4, #16384	; 0x4000
 8000d60:	3402      	adds	r4, #2
 8000d62:	f505 7680 	add.w	r6, r5, #256	; 0x100
            uint8_t c = std::min(b, uint8_t(15)) | (std::min(a, uint8_t(15)) << 4);
 8000d66:	f815 3c02 	ldrb.w	r3, [r5, #-2]
 8000d6a:	f815 0c01 	ldrb.w	r0, [r5, #-1]
 8000d6e:	2b0f      	cmp	r3, #15
 8000d70:	4619      	mov	r1, r3
 8000d72:	bf28      	it	cs
 8000d74:	210f      	movcs	r1, #15
 8000d76:	280f      	cmp	r0, #15
 8000d78:	bf28      	it	cs
 8000d7a:	200f      	movcs	r0, #15
 8000d7c:	ea40 1201 	orr.w	r2, r0, r1, lsl #4
            sendData(c);
 8000d80:	b2d0      	uxtb	r0, r2
 8000d82:	3502      	adds	r5, #2
 8000d84:	f7ff ff22 	bl	8000bcc <_ZN3Lcd8sendDataEh>
        for (int x = 0; x < Width/2; x++) {
 8000d88:	42ae      	cmp	r6, r5
 8000d8a:	d1ec      	bne.n	8000d66 <_ZN3Lcd4drawEPh+0x24>
    for (int y = 0; y < Height; y++) {
 8000d8c:	42b4      	cmp	r4, r6
 8000d8e:	d1e8      	bne.n	8000d62 <_ZN3Lcd4drawEPh+0x20>
}
 8000d90:	bd70      	pop	{r4, r5, r6, pc}
	...

08000d94 <_ZL4bodyP7MD5_CTXPKvm>:
/*
 * This processes one or more 64-byte data blocks, but does NOT update the bit
 * counters.  There are no alignment requirements.
 */
static const void *body(MD5_CTX *ctx, const void *data, unsigned long size)
{
 8000d94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d98:	4603      	mov	r3, r0
 8000d9a:	b093      	sub	sp, #76	; 0x4c
 8000d9c:	e9cd 1210 	strd	r1, r2, [sp, #64]	; 0x40

	ptr = (const unsigned char *)data;

	a = ctx->a;
	b = ctx->b;
	c = ctx->c;
 8000da0:	691c      	ldr	r4, [r3, #16]
	a = ctx->a;
 8000da2:	6882      	ldr	r2, [r0, #8]
	d = ctx->d;
 8000da4:	695d      	ldr	r5, [r3, #20]
	b = ctx->b;
 8000da6:	68c0      	ldr	r0, [r0, #12]
 8000da8:	9001      	str	r0, [sp, #4]
	a = ctx->a;
 8000daa:	920f      	str	r2, [sp, #60]	; 0x3c
	c = ctx->c;
 8000dac:	9402      	str	r4, [sp, #8]
	d = ctx->d;
 8000dae:	9503      	str	r5, [sp, #12]
	ptr = (const unsigned char *)data;
 8000db0:	4608      	mov	r0, r1
		saved_b = b;
		saved_c = c;
		saved_d = d;

/* Round 1 */
		STEP(F, a, b, c, d, SET(0), 0xd76aa478, 7)
 8000db2:	6801      	ldr	r1, [r0, #0]
 8000db4:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8000db6:	6599      	str	r1, [r3, #88]	; 0x58
 8000db8:	9104      	str	r1, [sp, #16]
 8000dba:	e9dd 5102 	ldrd	r5, r1, [sp, #8]
 8000dbe:	f106 4757 	add.w	r7, r6, #3607101440	; 0xd7000000
 8000dc2:	f507 08d5 	add.w	r8, r7, #6979584	; 0x6a8000
 8000dc6:	9e01      	ldr	r6, [sp, #4]
 8000dc8:	9c04      	ldr	r4, [sp, #16]
 8000dca:	9f03      	ldr	r7, [sp, #12]
 8000dcc:	f8df e3e0 	ldr.w	lr, [pc, #992]	; 80011b0 <_ZL4bodyP7MD5_CTXPKvm+0x41c>
 8000dd0:	f508 5211 	add.w	r2, r8, #9280	; 0x2440
 8000dd4:	404d      	eors	r5, r1
 8000dd6:	4035      	ands	r5, r6
 8000dd8:	3238      	adds	r2, #56	; 0x38
 8000dda:	4422      	add	r2, r4
 8000ddc:	407d      	eors	r5, r7
 8000dde:	4415      	add	r5, r2
 8000de0:	9a01      	ldr	r2, [sp, #4]
		STEP(F, d, a, b, c, SET(1), 0xe8c7b756, 12)
 8000de2:	6844      	ldr	r4, [r0, #4]
 8000de4:	65dc      	str	r4, [r3, #92]	; 0x5c
		STEP(F, a, b, c, d, SET(0), 0xd76aa478, 7)
 8000de6:	eb02 6175 	add.w	r1, r2, r5, ror #25
		STEP(F, d, a, b, c, SET(1), 0xe8c7b756, 12)
 8000dea:	9405      	str	r4, [sp, #20]
 8000dec:	e9dd 4201 	ldrd	r4, r2, [sp, #4]
 8000df0:	9d03      	ldr	r5, [sp, #12]
 8000df2:	4ee4      	ldr	r6, [pc, #912]	; (8001184 <_ZL4bodyP7MD5_CTXPKvm+0x3f0>)
 8000df4:	9f05      	ldr	r7, [sp, #20]
 8000df6:	442e      	add	r6, r5
 8000df8:	4062      	eors	r2, r4
 8000dfa:	9d02      	ldr	r5, [sp, #8]
 8000dfc:	400a      	ands	r2, r1
 8000dfe:	443e      	add	r6, r7
 8000e00:	406a      	eors	r2, r5
 8000e02:	f105 5910 	add.w	r9, r5, #603979776	; 0x24000000
 8000e06:	4432      	add	r2, r6
		STEP(F, c, d, a, b, SET(2), 0x242070db, 17)
 8000e08:	9d01      	ldr	r5, [sp, #4]
 8000e0a:	6886      	ldr	r6, [r0, #8]
 8000e0c:	9606      	str	r6, [sp, #24]
 8000e0e:	f509 1a01 	add.w	sl, r9, #2113536	; 0x204000
		STEP(F, d, a, b, c, SET(1), 0xe8c7b756, 12)
 8000e12:	eb01 5232 	add.w	r2, r1, r2, ror #20
		STEP(F, c, d, a, b, SET(2), 0x242070db, 17)
 8000e16:	661e      	str	r6, [r3, #96]	; 0x60
 8000e18:	9c06      	ldr	r4, [sp, #24]
 8000e1a:	9e01      	ldr	r6, [sp, #4]
 8000e1c:	f50a 5743 	add.w	r7, sl, #12480	; 0x30c0
 8000e20:	404d      	eors	r5, r1
 8000e22:	4015      	ands	r5, r2
 8000e24:	371b      	adds	r7, #27
 8000e26:	4427      	add	r7, r4
 8000e28:	4075      	eors	r5, r6
 8000e2a:	9c01      	ldr	r4, [sp, #4]
 8000e2c:	4ed6      	ldr	r6, [pc, #856]	; (8001188 <_ZL4bodyP7MD5_CTXPKvm+0x3f4>)
 8000e2e:	443d      	add	r5, r7
		STEP(F, b, c, d, a, SET(3), 0xc1bdceee, 22)
 8000e30:	68c7      	ldr	r7, [r0, #12]
 8000e32:	9707      	str	r7, [sp, #28]
		STEP(F, c, d, a, b, SET(2), 0x242070db, 17)
 8000e34:	eb02 35f5 	add.w	r5, r2, r5, ror #15
		STEP(F, b, c, d, a, SET(3), 0xc1bdceee, 22)
 8000e38:	665f      	str	r7, [r3, #100]	; 0x64
 8000e3a:	4426      	add	r6, r4
 8000e3c:	9f07      	ldr	r7, [sp, #28]
 8000e3e:	ea81 0402 	eor.w	r4, r1, r2
 8000e42:	402c      	ands	r4, r5
 8000e44:	443e      	add	r6, r7
 8000e46:	404c      	eors	r4, r1
 8000e48:	4434      	add	r4, r6
		STEP(F, a, b, c, d, SET(4), 0xf57c0faf, 7)
 8000e4a:	6906      	ldr	r6, [r0, #16]
 8000e4c:	9608      	str	r6, [sp, #32]
 8000e4e:	669e      	str	r6, [r3, #104]	; 0x68
 8000e50:	9f08      	ldr	r7, [sp, #32]
 8000e52:	4ece      	ldr	r6, [pc, #824]	; (800118c <_ZL4bodyP7MD5_CTXPKvm+0x3f8>)
 8000e54:	443e      	add	r6, r7
		STEP(F, b, c, d, a, SET(3), 0xc1bdceee, 22)
 8000e56:	eb05 24b4 	add.w	r4, r5, r4, ror #10
 8000e5a:	440e      	add	r6, r1
		STEP(F, a, b, c, d, SET(4), 0xf57c0faf, 7)
 8000e5c:	ea82 0105 	eor.w	r1, r2, r5
 8000e60:	4021      	ands	r1, r4
 8000e62:	4051      	eors	r1, r2
 8000e64:	4431      	add	r1, r6
		STEP(F, d, a, b, c, SET(5), 0x4787c62a, 12)
 8000e66:	6946      	ldr	r6, [r0, #20]
 8000e68:	9609      	str	r6, [sp, #36]	; 0x24
 8000e6a:	66de      	str	r6, [r3, #108]	; 0x6c
 8000e6c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8000e6e:	4ec8      	ldr	r6, [pc, #800]	; (8001190 <_ZL4bodyP7MD5_CTXPKvm+0x3fc>)
 8000e70:	443e      	add	r6, r7
		STEP(F, a, b, c, d, SET(4), 0xf57c0faf, 7)
 8000e72:	eb04 6171 	add.w	r1, r4, r1, ror #25
 8000e76:	4416      	add	r6, r2
		STEP(F, d, a, b, c, SET(5), 0x4787c62a, 12)
 8000e78:	ea85 0204 	eor.w	r2, r5, r4
 8000e7c:	400a      	ands	r2, r1
 8000e7e:	406a      	eors	r2, r5
 8000e80:	4432      	add	r2, r6
		STEP(F, c, d, a, b, SET(6), 0xa8304613, 17)
 8000e82:	6986      	ldr	r6, [r0, #24]
 8000e84:	960a      	str	r6, [sp, #40]	; 0x28
 8000e86:	671e      	str	r6, [r3, #112]	; 0x70
 8000e88:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8000e8a:	4ec2      	ldr	r6, [pc, #776]	; (8001194 <_ZL4bodyP7MD5_CTXPKvm+0x400>)
		STEP(F, b, c, d, a, SET(7), 0xfd469501, 22)
 8000e8c:	f8d0 901c 	ldr.w	r9, [r0, #28]
 8000e90:	f8c3 9074 	str.w	r9, [r3, #116]	; 0x74
 8000e94:	443e      	add	r6, r7
		STEP(F, d, a, b, c, SET(5), 0x4787c62a, 12)
 8000e96:	eb01 5232 	add.w	r2, r1, r2, ror #20
 8000e9a:	442e      	add	r6, r5
		STEP(F, c, d, a, b, SET(6), 0xa8304613, 17)
 8000e9c:	ea84 0501 	eor.w	r5, r4, r1
 8000ea0:	4015      	ands	r5, r2
 8000ea2:	4065      	eors	r5, r4
 8000ea4:	4435      	add	r5, r6
 8000ea6:	4ebc      	ldr	r6, [pc, #752]	; (8001198 <_ZL4bodyP7MD5_CTXPKvm+0x404>)
		STEP(F, a, b, c, d, SET(8), 0x698098d8, 7)
 8000ea8:	6a07      	ldr	r7, [r0, #32]
 8000eaa:	970b      	str	r7, [sp, #44]	; 0x2c
 8000eac:	444e      	add	r6, r9
		STEP(F, c, d, a, b, SET(6), 0xa8304613, 17)
 8000eae:	eb02 35f5 	add.w	r5, r2, r5, ror #15
 8000eb2:	4426      	add	r6, r4
		STEP(F, b, c, d, a, SET(7), 0xfd469501, 22)
 8000eb4:	ea81 0402 	eor.w	r4, r1, r2
 8000eb8:	402c      	ands	r4, r5
 8000eba:	404c      	eors	r4, r1
		STEP(F, a, b, c, d, SET(8), 0x698098d8, 7)
 8000ebc:	679f      	str	r7, [r3, #120]	; 0x78
		STEP(F, b, c, d, a, SET(7), 0xfd469501, 22)
 8000ebe:	4434      	add	r4, r6
 8000ec0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8000ec2:	4eb6      	ldr	r6, [pc, #728]	; (800119c <_ZL4bodyP7MD5_CTXPKvm+0x408>)
 8000ec4:	443e      	add	r6, r7
 8000ec6:	eb05 24b4 	add.w	r4, r5, r4, ror #10
 8000eca:	440e      	add	r6, r1
		STEP(F, a, b, c, d, SET(8), 0x698098d8, 7)
 8000ecc:	ea82 0105 	eor.w	r1, r2, r5
 8000ed0:	4021      	ands	r1, r4
 8000ed2:	4051      	eors	r1, r2
 8000ed4:	4431      	add	r1, r6
		STEP(F, d, a, b, c, SET(9), 0x8b44f7af, 12)
 8000ed6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8000ed8:	960c      	str	r6, [sp, #48]	; 0x30
 8000eda:	67de      	str	r6, [r3, #124]	; 0x7c
 8000edc:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8000ede:	4eb0      	ldr	r6, [pc, #704]	; (80011a0 <_ZL4bodyP7MD5_CTXPKvm+0x40c>)
 8000ee0:	443e      	add	r6, r7
		STEP(F, a, b, c, d, SET(8), 0x698098d8, 7)
 8000ee2:	eb04 6171 	add.w	r1, r4, r1, ror #25
 8000ee6:	4416      	add	r6, r2
		STEP(F, d, a, b, c, SET(9), 0x8b44f7af, 12)
 8000ee8:	ea85 0204 	eor.w	r2, r5, r4
 8000eec:	400a      	ands	r2, r1
 8000eee:	406a      	eors	r2, r5
 8000ef0:	4432      	add	r2, r6
		STEP(F, c, d, a, b, SET(10), 0xffff5bb1, 17)
 8000ef2:	6a86      	ldr	r6, [r0, #40]	; 0x28
 8000ef4:	f8c3 6080 	str.w	r6, [r3, #128]	; 0x80
 8000ef8:	f5a6 4c24 	sub.w	ip, r6, #41984	; 0xa400
 8000efc:	f1ac 0b4f 	sub.w	fp, ip, #79	; 0x4f
		STEP(F, d, a, b, c, SET(9), 0x8b44f7af, 12)
 8000f00:	eb01 5232 	add.w	r2, r1, r2, ror #20
 8000f04:	44ab      	add	fp, r5
		STEP(F, c, d, a, b, SET(10), 0xffff5bb1, 17)
 8000f06:	ea84 0501 	eor.w	r5, r4, r1
 8000f0a:	4015      	ands	r5, r2
		STEP(F, b, c, d, a, SET(11), 0x895cd7be, 22)
 8000f0c:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8000f0e:	f8c3 7084 	str.w	r7, [r3, #132]	; 0x84
		STEP(F, c, d, a, b, SET(10), 0xffff5bb1, 17)
 8000f12:	4065      	eors	r5, r4
 8000f14:	445d      	add	r5, fp
 8000f16:	eb02 35f5 	add.w	r5, r2, r5, ror #15
 8000f1a:	eb07 080e 	add.w	r8, r7, lr
		STEP(F, b, c, d, a, SET(11), 0x895cd7be, 22)
 8000f1e:	970d      	str	r7, [sp, #52]	; 0x34
 8000f20:	ea81 0702 	eor.w	r7, r1, r2
 8000f24:	402f      	ands	r7, r5
 8000f26:	ea87 0a01 	eor.w	sl, r7, r1
 8000f2a:	4444      	add	r4, r8
 8000f2c:	4454      	add	r4, sl
		STEP(F, a, b, c, d, SET(12), 0x6b901122, 7)
 8000f2e:	f8d0 e030 	ldr.w	lr, [r0, #48]	; 0x30
 8000f32:	f8df c280 	ldr.w	ip, [pc, #640]	; 80011b4 <_ZL4bodyP7MD5_CTXPKvm+0x420>
 8000f36:	f8c3 e088 	str.w	lr, [r3, #136]	; 0x88
		STEP(F, b, c, d, a, SET(11), 0x895cd7be, 22)
 8000f3a:	eb05 24b4 	add.w	r4, r5, r4, ror #10
		STEP(F, a, b, c, d, SET(12), 0x6b901122, 7)
 8000f3e:	ea82 0705 	eor.w	r7, r2, r5
 8000f42:	4027      	ands	r7, r4
 8000f44:	eb0e 0b0c 	add.w	fp, lr, ip
 8000f48:	ea87 0802 	eor.w	r8, r7, r2
 8000f4c:	f8df a268 	ldr.w	sl, [pc, #616]	; 80011b8 <_ZL4bodyP7MD5_CTXPKvm+0x424>
		STEP(F, d, a, b, c, SET(13), 0xfd987193, 12)
 8000f50:	6b47      	ldr	r7, [r0, #52]	; 0x34
 8000f52:	f8c3 708c 	str.w	r7, [r3, #140]	; 0x8c
 8000f56:	4459      	add	r1, fp
		STEP(F, a, b, c, d, SET(12), 0x6b901122, 7)
 8000f58:	4441      	add	r1, r8
 8000f5a:	44ba      	add	sl, r7
 8000f5c:	eb04 6171 	add.w	r1, r4, r1, ror #25
 8000f60:	4492      	add	sl, r2
		STEP(F, d, a, b, c, SET(13), 0xfd987193, 12)
 8000f62:	ea85 0204 	eor.w	r2, r5, r4
		STEP(F, c, d, a, b, SET(14), 0xa679438e, 17)
 8000f66:	f8d0 8038 	ldr.w	r8, [r0, #56]	; 0x38
 8000f6a:	f8df c250 	ldr.w	ip, [pc, #592]	; 80011bc <_ZL4bodyP7MD5_CTXPKvm+0x428>
 8000f6e:	f8c3 8090 	str.w	r8, [r3, #144]	; 0x90
		STEP(F, d, a, b, c, SET(13), 0xfd987193, 12)
 8000f72:	400a      	ands	r2, r1
 8000f74:	406a      	eors	r2, r5
 8000f76:	4452      	add	r2, sl
 8000f78:	44c4      	add	ip, r8
 8000f7a:	eb01 5232 	add.w	r2, r1, r2, ror #20
 8000f7e:	44ac      	add	ip, r5
		STEP(F, c, d, a, b, SET(14), 0xa679438e, 17)
 8000f80:	ea84 0501 	eor.w	r5, r4, r1
 8000f84:	4015      	ands	r5, r2
 8000f86:	4065      	eors	r5, r4
 8000f88:	4465      	add	r5, ip
 8000f8a:	f8df b234 	ldr.w	fp, [pc, #564]	; 80011c0 <_ZL4bodyP7MD5_CTXPKvm+0x42c>
		STEP(F, b, c, d, a, SET(15), 0x49b40821, 22)
 8000f8e:	f8d0 c03c 	ldr.w	ip, [r0, #60]	; 0x3c
		STEP(F, d, a, b, c, SET(13), 0xfd987193, 12)
 8000f92:	970e      	str	r7, [sp, #56]	; 0x38
 8000f94:	44e3      	add	fp, ip
		STEP(F, c, d, a, b, SET(14), 0xa679438e, 17)
 8000f96:	eb02 35f5 	add.w	r5, r2, r5, ror #15
 8000f9a:	44a3      	add	fp, r4
		STEP(F, b, c, d, a, SET(15), 0x49b40821, 22)
 8000f9c:	ea81 0402 	eor.w	r4, r1, r2
 8000fa0:	402c      	ands	r4, r5
 8000fa2:	f8c3 c094 	str.w	ip, [r3, #148]	; 0x94
 8000fa6:	404c      	eors	r4, r1
 8000fa8:	9f05      	ldr	r7, [sp, #20]
 8000faa:	f8df a218 	ldr.w	sl, [pc, #536]	; 80011c4 <_ZL4bodyP7MD5_CTXPKvm+0x430>
 8000fae:	445c      	add	r4, fp
 8000fb0:	eb05 24b4 	add.w	r4, r5, r4, ror #10
 8000fb4:	44ba      	add	sl, r7
 8000fb6:	448a      	add	sl, r1

/* Round 2 */
		STEP(G, a, b, c, d, GET(1), 0xf61e2562, 5)
 8000fb8:	ea85 0104 	eor.w	r1, r5, r4
 8000fbc:	4011      	ands	r1, r2
 8000fbe:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8000fc0:	f8df b204 	ldr.w	fp, [pc, #516]	; 80011c8 <_ZL4bodyP7MD5_CTXPKvm+0x434>
 8000fc4:	4069      	eors	r1, r5
 8000fc6:	4451      	add	r1, sl
 8000fc8:	eb04 61f1 	add.w	r1, r4, r1, ror #27
 8000fcc:	44bb      	add	fp, r7
 8000fce:	4493      	add	fp, r2
		STEP(G, d, a, b, c, GET(6), 0xc040b340, 9)
 8000fd0:	ea84 0201 	eor.w	r2, r4, r1
 8000fd4:	402a      	ands	r2, r5
 8000fd6:	4062      	eors	r2, r4
 8000fd8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8000fda:	f8df a1f0 	ldr.w	sl, [pc, #496]	; 80011cc <_ZL4bodyP7MD5_CTXPKvm+0x438>
 8000fde:	445a      	add	r2, fp
 8000fe0:	eb01 52f2 	add.w	r2, r1, r2, ror #23
 8000fe4:	eb07 0b0a 	add.w	fp, r7, sl
		STEP(G, c, d, a, b, GET(11), 0x265e5a51, 14)
 8000fe8:	ea81 0702 	eor.w	r7, r1, r2
 8000fec:	4027      	ands	r7, r4
 8000fee:	ea87 0a01 	eor.w	sl, r7, r1
 8000ff2:	445d      	add	r5, fp
 8000ff4:	9f04      	ldr	r7, [sp, #16]
 8000ff6:	f8df b1d8 	ldr.w	fp, [pc, #472]	; 80011d0 <_ZL4bodyP7MD5_CTXPKvm+0x43c>
 8000ffa:	4455      	add	r5, sl
 8000ffc:	eb02 45b5 	add.w	r5, r2, r5, ror #18
 8001000:	44bb      	add	fp, r7
 8001002:	44a3      	add	fp, r4
		STEP(G, b, c, d, a, GET(0), 0xe9b6c7aa, 20)
 8001004:	ea82 0405 	eor.w	r4, r2, r5
 8001008:	400c      	ands	r4, r1
 800100a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800100c:	f8df a1c4 	ldr.w	sl, [pc, #452]	; 80011d4 <_ZL4bodyP7MD5_CTXPKvm+0x440>
 8001010:	4054      	eors	r4, r2
 8001012:	445c      	add	r4, fp
 8001014:	eb05 3434 	add.w	r4, r5, r4, ror #12
 8001018:	44ba      	add	sl, r7
 800101a:	448a      	add	sl, r1
		STEP(G, a, b, c, d, GET(5), 0xd62f105d, 5)
 800101c:	ea85 0104 	eor.w	r1, r5, r4
 8001020:	4011      	ands	r1, r2
 8001022:	4069      	eors	r1, r5
 8001024:	f8df b1b0 	ldr.w	fp, [pc, #432]	; 80011d8 <_ZL4bodyP7MD5_CTXPKvm+0x444>
 8001028:	4451      	add	r1, sl
 800102a:	eb04 61f1 	add.w	r1, r4, r1, ror #27
 800102e:	44b3      	add	fp, r6
 8001030:	4493      	add	fp, r2
		STEP(G, d, a, b, c, GET(10), 0x02441453, 9)
 8001032:	ea84 0201 	eor.w	r2, r4, r1
 8001036:	402a      	ands	r2, r5
 8001038:	4062      	eors	r2, r4
 800103a:	f8df a1a0 	ldr.w	sl, [pc, #416]	; 80011dc <_ZL4bodyP7MD5_CTXPKvm+0x448>
 800103e:	445a      	add	r2, fp
 8001040:	eb01 52f2 	add.w	r2, r1, r2, ror #23
 8001044:	eb0c 070a 	add.w	r7, ip, sl
 8001048:	443d      	add	r5, r7
		STEP(G, c, d, a, b, GET(15), 0xd8a1e681, 14)
 800104a:	ea81 0702 	eor.w	r7, r1, r2
 800104e:	4027      	ands	r7, r4
 8001050:	ea87 0b01 	eor.w	fp, r7, r1
 8001054:	f8df a188 	ldr.w	sl, [pc, #392]	; 80011e0 <_ZL4bodyP7MD5_CTXPKvm+0x44c>
 8001058:	9f08      	ldr	r7, [sp, #32]
 800105a:	445d      	add	r5, fp
 800105c:	eb02 45b5 	add.w	r5, r2, r5, ror #18
 8001060:	44ba      	add	sl, r7
 8001062:	44a2      	add	sl, r4
		STEP(G, b, c, d, a, GET(4), 0xe7d3fbc8, 20)
 8001064:	ea82 0405 	eor.w	r4, r2, r5
 8001068:	400c      	ands	r4, r1
 800106a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800106c:	f8df b174 	ldr.w	fp, [pc, #372]	; 80011e4 <_ZL4bodyP7MD5_CTXPKvm+0x450>
 8001070:	4054      	eors	r4, r2
 8001072:	4454      	add	r4, sl
 8001074:	eb05 3434 	add.w	r4, r5, r4, ror #12
 8001078:	44bb      	add	fp, r7
 800107a:	448b      	add	fp, r1
		STEP(G, a, b, c, d, GET(9), 0x21e1cde6, 5)
 800107c:	ea85 0104 	eor.w	r1, r5, r4
 8001080:	4011      	ands	r1, r2
 8001082:	4069      	eors	r1, r5
 8001084:	f8df a160 	ldr.w	sl, [pc, #352]	; 80011e8 <_ZL4bodyP7MD5_CTXPKvm+0x454>
 8001088:	9f07      	ldr	r7, [sp, #28]
 800108a:	4459      	add	r1, fp
 800108c:	eb04 61f1 	add.w	r1, r4, r1, ror #27
 8001090:	44c2      	add	sl, r8
 8001092:	4492      	add	sl, r2
		STEP(G, d, a, b, c, GET(14), 0xc33707d6, 9)
 8001094:	ea84 0201 	eor.w	r2, r4, r1
 8001098:	402a      	ands	r2, r5
 800109a:	4062      	eors	r2, r4
 800109c:	4452      	add	r2, sl
 800109e:	f8df a14c 	ldr.w	sl, [pc, #332]	; 80011ec <_ZL4bodyP7MD5_CTXPKvm+0x458>
 80010a2:	eb01 5bf2 	add.w	fp, r1, r2, ror #23
 80010a6:	44ba      	add	sl, r7
 80010a8:	44aa      	add	sl, r5
		STEP(G, c, d, a, b, GET(3), 0xf4d50d87, 14)
 80010aa:	ea81 050b 	eor.w	r5, r1, fp
 80010ae:	4025      	ands	r5, r4
 80010b0:	404d      	eors	r5, r1
 80010b2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80010b4:	4455      	add	r5, sl
 80010b6:	f8df a138 	ldr.w	sl, [pc, #312]	; 80011f0 <_ZL4bodyP7MD5_CTXPKvm+0x45c>
 80010ba:	eb0b 45b5 	add.w	r5, fp, r5, ror #18
 80010be:	eb02 070a 	add.w	r7, r2, sl
		STEP(G, b, c, d, a, GET(8), 0x455a14ed, 20)
 80010c2:	ea8b 0205 	eor.w	r2, fp, r5
 80010c6:	443c      	add	r4, r7
 80010c8:	ea02 0701 	and.w	r7, r2, r1
 80010cc:	ea87 0a0b 	eor.w	sl, r7, fp
 80010d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80010d2:	4454      	add	r4, sl
 80010d4:	f8df a11c 	ldr.w	sl, [pc, #284]	; 80011f4 <_ZL4bodyP7MD5_CTXPKvm+0x460>
 80010d8:	eb05 3434 	add.w	r4, r5, r4, ror #12
 80010dc:	eb02 070a 	add.w	r7, r2, sl
		STEP(G, a, b, c, d, GET(13), 0xa9e3e905, 5)
 80010e0:	ea85 0204 	eor.w	r2, r5, r4
 80010e4:	4439      	add	r1, r7
 80010e6:	ea02 070b 	and.w	r7, r2, fp
 80010ea:	ea87 0a05 	eor.w	sl, r7, r5
 80010ee:	4451      	add	r1, sl
 80010f0:	eb04 61f1 	add.w	r1, r4, r1, ror #27
 80010f4:	9a06      	ldr	r2, [sp, #24]
 80010f6:	f8df a100 	ldr.w	sl, [pc, #256]	; 80011f8 <_ZL4bodyP7MD5_CTXPKvm+0x464>
		STEP(G, d, a, b, c, GET(2), 0xfcefa3f8, 9)
 80010fa:	ea84 0701 	eor.w	r7, r4, r1
 80010fe:	4492      	add	sl, r2
 8001100:	ea07 0205 	and.w	r2, r7, r5
 8001104:	44d3      	add	fp, sl
 8001106:	ea82 0a04 	eor.w	sl, r2, r4
 800110a:	44d3      	add	fp, sl
 800110c:	eb01 52fb 	add.w	r2, r1, fp, ror #23
 8001110:	f8df b0e8 	ldr.w	fp, [pc, #232]	; 80011fc <_ZL4bodyP7MD5_CTXPKvm+0x468>
		STEP(G, c, d, a, b, GET(7), 0x676f02d9, 14)
 8001114:	ea81 0702 	eor.w	r7, r1, r2
 8001118:	44cb      	add	fp, r9
 800111a:	4027      	ands	r7, r4
 800111c:	ea87 0a01 	eor.w	sl, r7, r1
 8001120:	445d      	add	r5, fp
 8001122:	4455      	add	r5, sl
 8001124:	eb02 45b5 	add.w	r5, r2, r5, ror #18
 8001128:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 8001200 <_ZL4bodyP7MD5_CTXPKvm+0x46c>
		STEP(G, b, c, d, a, GET(12), 0x8d2a4c8a, 20)
 800112c:	ea82 0705 	eor.w	r7, r2, r5
 8001130:	44f3      	add	fp, lr
 8001132:	400f      	ands	r7, r1
 8001134:	ea87 0a02 	eor.w	sl, r7, r2
 8001138:	445c      	add	r4, fp
 800113a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800113c:	4454      	add	r4, sl
 800113e:	eb05 3434 	add.w	r4, r5, r4, ror #12
 8001142:	f5a7 2bb8 	sub.w	fp, r7, #376832	; 0x5c000

/* Round 3 */
		STEP(H, a, b, c, d, GET(5), 0xfffa3942, 4)
 8001146:	ea85 0a04 	eor.w	sl, r5, r4
 800114a:	f2ab 67be 	subw	r7, fp, #1726	; 0x6be
 800114e:	4439      	add	r1, r7
 8001150:	ea8a 0b02 	eor.w	fp, sl, r2
 8001154:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8001156:	448b      	add	fp, r1
 8001158:	4912      	ldr	r1, [pc, #72]	; (80011a4 <_ZL4bodyP7MD5_CTXPKvm+0x410>)
 800115a:	eb04 7b3b 	add.w	fp, r4, fp, ror #28
 800115e:	4439      	add	r1, r7
 8001160:	440a      	add	r2, r1
		STEP(H2, d, a, b, c, GET(8), 0x8771f681, 11)
 8001162:	ea8a 0a0b 	eor.w	sl, sl, fp
 8001166:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8001168:	490f      	ldr	r1, [pc, #60]	; (80011a8 <_ZL4bodyP7MD5_CTXPKvm+0x414>)
 800116a:	4492      	add	sl, r2
 800116c:	eb0b 5a7a 	add.w	sl, fp, sl, ror #21
		STEP(H, c, d, a, b, GET(11), 0x6d9d6122, 16)
 8001170:	ea8b 020a 	eor.w	r2, fp, sl
 8001174:	4439      	add	r1, r7
 8001176:	440d      	add	r5, r1
 8001178:	4f0c      	ldr	r7, [pc, #48]	; (80011ac <_ZL4bodyP7MD5_CTXPKvm+0x418>)
 800117a:	ea82 0104 	eor.w	r1, r2, r4
 800117e:	440d      	add	r5, r1
 8001180:	e040      	b.n	8001204 <_ZL4bodyP7MD5_CTXPKvm+0x470>
 8001182:	bf00      	nop
 8001184:	e8c7b756 	.word	0xe8c7b756
 8001188:	c1bdceee 	.word	0xc1bdceee
 800118c:	f57c0faf 	.word	0xf57c0faf
 8001190:	4787c62a 	.word	0x4787c62a
 8001194:	a8304613 	.word	0xa8304613
 8001198:	fd469501 	.word	0xfd469501
 800119c:	698098d8 	.word	0x698098d8
 80011a0:	8b44f7af 	.word	0x8b44f7af
 80011a4:	8771f681 	.word	0x8771f681
 80011a8:	6d9d6122 	.word	0x6d9d6122
 80011ac:	fde5380c 	.word	0xfde5380c
 80011b0:	895cd7be 	.word	0x895cd7be
 80011b4:	6b901122 	.word	0x6b901122
 80011b8:	fd987193 	.word	0xfd987193
 80011bc:	a679438e 	.word	0xa679438e
 80011c0:	49b40821 	.word	0x49b40821
 80011c4:	f61e2562 	.word	0xf61e2562
 80011c8:	c040b340 	.word	0xc040b340
 80011cc:	265e5a51 	.word	0x265e5a51
 80011d0:	e9b6c7aa 	.word	0xe9b6c7aa
 80011d4:	d62f105d 	.word	0xd62f105d
 80011d8:	02441453 	.word	0x02441453
 80011dc:	d8a1e681 	.word	0xd8a1e681
 80011e0:	e7d3fbc8 	.word	0xe7d3fbc8
 80011e4:	21e1cde6 	.word	0x21e1cde6
 80011e8:	c33707d6 	.word	0xc33707d6
 80011ec:	f4d50d87 	.word	0xf4d50d87
 80011f0:	455a14ed 	.word	0x455a14ed
 80011f4:	a9e3e905 	.word	0xa9e3e905
 80011f8:	fcefa3f8 	.word	0xfcefa3f8
 80011fc:	676f02d9 	.word	0x676f02d9
 8001200:	8d2a4c8a 	.word	0x8d2a4c8a
 8001204:	9905      	ldr	r1, [sp, #20]
 8001206:	eb0a 4535 	add.w	r5, sl, r5, ror #16
 800120a:	4447      	add	r7, r8
		STEP(H2, b, c, d, a, GET(14), 0xfde5380c, 23)
 800120c:	406a      	eors	r2, r5
 800120e:	443c      	add	r4, r7
 8001210:	f101 4724 	add.w	r7, r1, #2751463424	; 0xa4000000
 8001214:	4414      	add	r4, r2
 8001216:	f507 013e 	add.w	r1, r7, #12451840	; 0xbe0000
 800121a:	eb05 2474 	add.w	r4, r5, r4, ror #9
 800121e:	f501 476a 	add.w	r7, r1, #59904	; 0xea00
		STEP(H, a, b, c, d, GET(1), 0xa4beea44, 4)
 8001222:	ea85 0204 	eor.w	r2, r5, r4
 8001226:	3744      	adds	r7, #68	; 0x44
 8001228:	445f      	add	r7, fp
 800122a:	ea82 0b0a 	eor.w	fp, r2, sl
 800122e:	44bb      	add	fp, r7
 8001230:	4998      	ldr	r1, [pc, #608]	; (8001494 <_ZL4bodyP7MD5_CTXPKvm+0x700>)
 8001232:	9f08      	ldr	r7, [sp, #32]
 8001234:	eb04 7b3b 	add.w	fp, r4, fp, ror #28
 8001238:	4439      	add	r1, r7
		STEP(H2, d, a, b, c, GET(4), 0x4bdecfa9, 11)
 800123a:	ea82 020b 	eor.w	r2, r2, fp
 800123e:	448a      	add	sl, r1
 8001240:	4492      	add	sl, r2
 8001242:	4a95      	ldr	r2, [pc, #596]	; (8001498 <_ZL4bodyP7MD5_CTXPKvm+0x704>)
 8001244:	eb0b 517a 	add.w	r1, fp, sl, ror #21
		STEP(H, c, d, a, b, GET(7), 0xf6bb4b60, 16)
 8001248:	ea8b 0701 	eor.w	r7, fp, r1
 800124c:	444a      	add	r2, r9
 800124e:	ea87 0a04 	eor.w	sl, r7, r4
 8001252:	4415      	add	r5, r2
 8001254:	4a91      	ldr	r2, [pc, #580]	; (800149c <_ZL4bodyP7MD5_CTXPKvm+0x708>)
 8001256:	4455      	add	r5, sl
 8001258:	eb01 4535 	add.w	r5, r1, r5, ror #16
 800125c:	4432      	add	r2, r6
		STEP(H2, b, c, d, a, GET(10), 0xbebfbc70, 23)
 800125e:	406f      	eors	r7, r5
 8001260:	4414      	add	r4, r2
 8001262:	193c      	adds	r4, r7, r4
 8001264:	f8df a27c 	ldr.w	sl, [pc, #636]	; 80014e4 <_ZL4bodyP7MD5_CTXPKvm+0x750>
 8001268:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800126a:	eb05 2274 	add.w	r2, r5, r4, ror #9
		STEP(H, a, b, c, d, GET(13), 0x289b7ec6, 4)
 800126e:	ea85 0402 	eor.w	r4, r5, r2
 8001272:	44ba      	add	sl, r7
 8001274:	44d3      	add	fp, sl
 8001276:	ea84 0a01 	eor.w	sl, r4, r1
 800127a:	9f04      	ldr	r7, [sp, #16]
 800127c:	44da      	add	sl, fp
 800127e:	f8df b268 	ldr.w	fp, [pc, #616]	; 80014e8 <_ZL4bodyP7MD5_CTXPKvm+0x754>
 8001282:	eb02 7a3a 	add.w	sl, r2, sl, ror #28
 8001286:	44bb      	add	fp, r7
		STEP(H2, d, a, b, c, GET(0), 0xeaa127fa, 11)
 8001288:	ea84 040a 	eor.w	r4, r4, sl
 800128c:	4459      	add	r1, fp
 800128e:	9f07      	ldr	r7, [sp, #28]
 8001290:	4421      	add	r1, r4
 8001292:	4c83      	ldr	r4, [pc, #524]	; (80014a0 <_ZL4bodyP7MD5_CTXPKvm+0x70c>)
 8001294:	eb0a 5171 	add.w	r1, sl, r1, ror #21
		STEP(H, c, d, a, b, GET(3), 0xd4ef3085, 16)
 8001298:	ea8a 0b01 	eor.w	fp, sl, r1
 800129c:	443c      	add	r4, r7
 800129e:	4425      	add	r5, r4
 80012a0:	ea8b 0402 	eor.w	r4, fp, r2
 80012a4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80012a6:	4425      	add	r5, r4
 80012a8:	4c7e      	ldr	r4, [pc, #504]	; (80014a4 <_ZL4bodyP7MD5_CTXPKvm+0x710>)
 80012aa:	eb01 4535 	add.w	r5, r1, r5, ror #16
 80012ae:	443c      	add	r4, r7
		STEP(H2, b, c, d, a, GET(6), 0x04881d05, 23)
 80012b0:	ea8b 0b05 	eor.w	fp, fp, r5
 80012b4:	4422      	add	r2, r4
 80012b6:	445a      	add	r2, fp
 80012b8:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80012ba:	f8df b230 	ldr.w	fp, [pc, #560]	; 80014ec <_ZL4bodyP7MD5_CTXPKvm+0x758>
 80012be:	eb05 2472 	add.w	r4, r5, r2, ror #9
		STEP(H, a, b, c, d, GET(9), 0xd9d4d039, 4)
 80012c2:	ea85 0204 	eor.w	r2, r5, r4
 80012c6:	44bb      	add	fp, r7
 80012c8:	44da      	add	sl, fp
 80012ca:	ea82 0b01 	eor.w	fp, r2, r1
 80012ce:	44da      	add	sl, fp
 80012d0:	f8df b21c 	ldr.w	fp, [pc, #540]	; 80014f0 <_ZL4bodyP7MD5_CTXPKvm+0x75c>
 80012d4:	9f06      	ldr	r7, [sp, #24]
 80012d6:	eb04 7a3a 	add.w	sl, r4, sl, ror #28
 80012da:	44f3      	add	fp, lr
		STEP(H2, d, a, b, c, GET(12), 0xe6db99e5, 11)
 80012dc:	ea82 020a 	eor.w	r2, r2, sl
 80012e0:	4459      	add	r1, fp
 80012e2:	4411      	add	r1, r2
 80012e4:	f8df b20c 	ldr.w	fp, [pc, #524]	; 80014f4 <_ZL4bodyP7MD5_CTXPKvm+0x760>
 80012e8:	eb0a 5171 	add.w	r1, sl, r1, ror #21
		STEP(H, c, d, a, b, GET(15), 0x1fa27cf8, 16)
 80012ec:	ea8a 0201 	eor.w	r2, sl, r1
 80012f0:	44e3      	add	fp, ip
 80012f2:	44ab      	add	fp, r5
 80012f4:	ea82 0504 	eor.w	r5, r2, r4
 80012f8:	445d      	add	r5, fp
 80012fa:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 80014f8 <_ZL4bodyP7MD5_CTXPKvm+0x764>
 80012fe:	eb01 4535 	add.w	r5, r1, r5, ror #16
 8001302:	44bb      	add	fp, r7
		STEP(H2, b, c, d, a, GET(2), 0xc4ac5665, 23)
 8001304:	406a      	eors	r2, r5
 8001306:	445c      	add	r4, fp
 8001308:	9f04      	ldr	r7, [sp, #16]
 800130a:	4414      	add	r4, r2
 800130c:	4a66      	ldr	r2, [pc, #408]	; (80014a8 <_ZL4bodyP7MD5_CTXPKvm+0x714>)
 800130e:	eb05 2474 	add.w	r4, r5, r4, ror #9
 8001312:	443a      	add	r2, r7
 8001314:	4492      	add	sl, r2

/* Round 4 */
		STEP(I, a, b, c, d, GET(0), 0xf4292244, 6)
 8001316:	ea64 0201 	orn	r2, r4, r1
 800131a:	406a      	eors	r2, r5
 800131c:	4492      	add	sl, r2
 800131e:	4f63      	ldr	r7, [pc, #396]	; (80014ac <_ZL4bodyP7MD5_CTXPKvm+0x718>)
 8001320:	eb04 6aba 	add.w	sl, r4, sl, ror #26
		STEP(I, d, a, b, c, GET(7), 0x432aff97, 10)
 8001324:	ea6a 0205 	orn	r2, sl, r5
 8001328:	444f      	add	r7, r9
 800132a:	4439      	add	r1, r7
 800132c:	ea82 0904 	eor.w	r9, r2, r4
 8001330:	4449      	add	r1, r9
 8001332:	4f5f      	ldr	r7, [pc, #380]	; (80014b0 <_ZL4bodyP7MD5_CTXPKvm+0x71c>)
 8001334:	eb0a 51b1 	add.w	r1, sl, r1, ror #22
		STEP(I, c, d, a, b, GET(14), 0xab9423a7, 15)
 8001338:	ea61 0204 	orn	r2, r1, r4
 800133c:	4447      	add	r7, r8
 800133e:	443d      	add	r5, r7
 8001340:	ea82 080a 	eor.w	r8, r2, sl
 8001344:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8001346:	4a5b      	ldr	r2, [pc, #364]	; (80014b4 <_ZL4bodyP7MD5_CTXPKvm+0x720>)
 8001348:	4445      	add	r5, r8
 800134a:	eb01 4575 	add.w	r5, r1, r5, ror #17
 800134e:	443a      	add	r2, r7
 8001350:	4414      	add	r4, r2
		STEP(I, b, c, d, a, GET(5), 0xfc93a039, 21)
 8001352:	ea65 020a 	orn	r2, r5, sl
 8001356:	ea82 0b01 	eor.w	fp, r2, r1
 800135a:	445c      	add	r4, fp
 800135c:	4f56      	ldr	r7, [pc, #344]	; (80014b8 <_ZL4bodyP7MD5_CTXPKvm+0x724>)
 800135e:	eb05 24f4 	add.w	r4, r5, r4, ror #11
		STEP(I, a, b, c, d, GET(12), 0x655b59c3, 6)
 8001362:	ea64 0201 	orn	r2, r4, r1
 8001366:	4477      	add	r7, lr
 8001368:	44ba      	add	sl, r7
 800136a:	ea82 0e05 	eor.w	lr, r2, r5
 800136e:	9f07      	ldr	r7, [sp, #28]
 8001370:	4a52      	ldr	r2, [pc, #328]	; (80014bc <_ZL4bodyP7MD5_CTXPKvm+0x728>)
 8001372:	44f2      	add	sl, lr
 8001374:	eb04 6aba 	add.w	sl, r4, sl, ror #26
 8001378:	443a      	add	r2, r7
 800137a:	4411      	add	r1, r2
		STEP(I, d, a, b, c, GET(3), 0x8f0ccc92, 10)
 800137c:	ea6a 0205 	orn	r2, sl, r5
 8001380:	ea82 0e04 	eor.w	lr, r2, r4
 8001384:	4471      	add	r1, lr
 8001386:	eb0a 51b1 	add.w	r1, sl, r1, ror #22
 800138a:	f5a6 1680 	sub.w	r6, r6, #1048576	; 0x100000
		STEP(I, c, d, a, b, GET(10), 0xffeff47d, 15)
 800138e:	ea61 0804 	orn	r8, r1, r4
 8001392:	f6a6 3983 	subw	r9, r6, #2947	; 0xb83
 8001396:	44a9      	add	r9, r5
 8001398:	9e05      	ldr	r6, [sp, #20]
 800139a:	4a49      	ldr	r2, [pc, #292]	; (80014c0 <_ZL4bodyP7MD5_CTXPKvm+0x72c>)
 800139c:	ea88 050a 	eor.w	r5, r8, sl
 80013a0:	444d      	add	r5, r9
 80013a2:	eb01 4775 	add.w	r7, r1, r5, ror #17
 80013a6:	4432      	add	r2, r6
 80013a8:	4422      	add	r2, r4
		STEP(I, b, c, d, a, GET(1), 0x85845dd1, 21)
 80013aa:	ea67 040a 	orn	r4, r7, sl
 80013ae:	404c      	eors	r4, r1
 80013b0:	4414      	add	r4, r2
 80013b2:	4d44      	ldr	r5, [pc, #272]	; (80014c4 <_ZL4bodyP7MD5_CTXPKvm+0x730>)
 80013b4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80013b6:	eb07 24f4 	add.w	r4, r7, r4, ror #11
 80013ba:	4415      	add	r5, r2
		STEP(I, a, b, c, d, GET(8), 0x6fa87e4f, 6)
 80013bc:	ea64 0601 	orn	r6, r4, r1
 80013c0:	407e      	eors	r6, r7
 80013c2:	44aa      	add	sl, r5
 80013c4:	44b2      	add	sl, r6
 80013c6:	4d40      	ldr	r5, [pc, #256]	; (80014c8 <_ZL4bodyP7MD5_CTXPKvm+0x734>)
 80013c8:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80013ca:	eb04 6bba 	add.w	fp, r4, sl, ror #26
 80013ce:	4465      	add	r5, ip
		STEP(I, d, a, b, c, GET(15), 0xfe2ce6e0, 10)
 80013d0:	ea6b 0207 	orn	r2, fp, r7
 80013d4:	4062      	eors	r2, r4
 80013d6:	4429      	add	r1, r5
 80013d8:	4411      	add	r1, r2
 80013da:	4d3c      	ldr	r5, [pc, #240]	; (80014cc <_ZL4bodyP7MD5_CTXPKvm+0x738>)
 80013dc:	eb0b 51b1 	add.w	r1, fp, r1, ror #22
		STEP(I, c, d, a, b, GET(6), 0xa3014314, 15)
 80013e0:	ea61 0204 	orn	r2, r1, r4
 80013e4:	4435      	add	r5, r6
 80013e6:	ea82 0c0b 	eor.w	ip, r2, fp
 80013ea:	442f      	add	r7, r5
 80013ec:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80013ee:	4d38      	ldr	r5, [pc, #224]	; (80014d0 <_ZL4bodyP7MD5_CTXPKvm+0x73c>)
 80013f0:	4467      	add	r7, ip
 80013f2:	eb01 4777 	add.w	r7, r1, r7, ror #17
 80013f6:	4435      	add	r5, r6
		STEP(I, b, c, d, a, GET(13), 0x4e0811a1, 21)
 80013f8:	ea67 020b 	orn	r2, r7, fp
 80013fc:	404a      	eors	r2, r1
 80013fe:	442c      	add	r4, r5
 8001400:	9e08      	ldr	r6, [sp, #32]
 8001402:	4d34      	ldr	r5, [pc, #208]	; (80014d4 <_ZL4bodyP7MD5_CTXPKvm+0x740>)
 8001404:	4414      	add	r4, r2
 8001406:	eb07 24f4 	add.w	r4, r7, r4, ror #11
 800140a:	4435      	add	r5, r6
		STEP(I, a, b, c, d, GET(4), 0xf7537e82, 6)
 800140c:	ea64 0201 	orn	r2, r4, r1
 8001410:	407a      	eors	r2, r7
 8001412:	44ab      	add	fp, r5
 8001414:	4493      	add	fp, r2
 8001416:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8001418:	4d2f      	ldr	r5, [pc, #188]	; (80014d8 <_ZL4bodyP7MD5_CTXPKvm+0x744>)
 800141a:	eb04 6abb 	add.w	sl, r4, fp, ror #26
 800141e:	4435      	add	r5, r6
		STEP(I, d, a, b, c, GET(11), 0xbd3af235, 10)
 8001420:	ea6a 0207 	orn	r2, sl, r7
 8001424:	4062      	eors	r2, r4
 8001426:	4429      	add	r1, r5
 8001428:	9e06      	ldr	r6, [sp, #24]
 800142a:	4d2c      	ldr	r5, [pc, #176]	; (80014dc <_ZL4bodyP7MD5_CTXPKvm+0x748>)
 800142c:	4411      	add	r1, r2
 800142e:	eb0a 51b1 	add.w	r1, sl, r1, ror #22
 8001432:	4435      	add	r5, r6
		STEP(I, c, d, a, b, GET(2), 0x2ad7d2bb, 15)
 8001434:	ea61 0204 	orn	r2, r1, r4
 8001438:	ea82 090a 	eor.w	r9, r2, sl
 800143c:	442f      	add	r7, r5
 800143e:	444f      	add	r7, r9
 8001440:	9d0c      	ldr	r5, [sp, #48]	; 0x30
		STEP(I, b, c, d, a, GET(9), 0xeb86d391, 21)

		a += saved_a;
		b += saved_b;
 8001442:	9a01      	ldr	r2, [sp, #4]
		STEP(I, c, d, a, b, GET(2), 0x2ad7d2bb, 15)
 8001444:	eb01 4877 	add.w	r8, r1, r7, ror #17
 8001448:	4f25      	ldr	r7, [pc, #148]	; (80014e0 <_ZL4bodyP7MD5_CTXPKvm+0x74c>)
		STEP(I, b, c, d, a, GET(9), 0xeb86d391, 21)
 800144a:	ea68 060a 	orn	r6, r8, sl
 800144e:	442f      	add	r7, r5
 8001450:	443c      	add	r4, r7
 8001452:	404e      	eors	r6, r1
 8001454:	4434      	add	r4, r6
 8001456:	eb08 2bf4 	add.w	fp, r8, r4, ror #11
		a += saved_a;
 800145a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
		c += saved_c;
 800145c:	9f02      	ldr	r7, [sp, #8]
		d += saved_d;
 800145e:	9d03      	ldr	r5, [sp, #12]
		a += saved_a;
 8001460:	4454      	add	r4, sl

		ptr += 64;
	} while (size -= 64);
 8001462:	e9dd ca10 	ldrd	ip, sl, [sp, #64]	; 0x40
		ptr += 64;
 8001466:	3040      	adds	r0, #64	; 0x40
	} while (size -= 64);
 8001468:	44d4      	add	ip, sl
		b += saved_b;
 800146a:	445a      	add	r2, fp
		c += saved_c;
 800146c:	4447      	add	r7, r8
		d += saved_d;
 800146e:	440d      	add	r5, r1
	} while (size -= 64);
 8001470:	4560      	cmp	r0, ip
		a += saved_a;
 8001472:	940f      	str	r4, [sp, #60]	; 0x3c
		b += saved_b;
 8001474:	9201      	str	r2, [sp, #4]
		c += saved_c;
 8001476:	9702      	str	r7, [sp, #8]
		d += saved_d;
 8001478:	9503      	str	r5, [sp, #12]
	} while (size -= 64);
 800147a:	f47f ac9a 	bne.w	8000db2 <_ZL4bodyP7MD5_CTXPKvm+0x1e>

	ctx->a = a;
 800147e:	990f      	ldr	r1, [sp, #60]	; 0x3c
	ctx->b = b;
 8001480:	9e01      	ldr	r6, [sp, #4]
	ctx->c = c;
 8001482:	9c02      	ldr	r4, [sp, #8]
	ctx->d = d;
 8001484:	9a03      	ldr	r2, [sp, #12]
	ctx->a = a;
 8001486:	6099      	str	r1, [r3, #8]
	ctx->b = b;
 8001488:	60de      	str	r6, [r3, #12]
	ctx->c = c;
 800148a:	611c      	str	r4, [r3, #16]
	ctx->d = d;
 800148c:	615a      	str	r2, [r3, #20]

	return ptr;
}
 800148e:	b013      	add	sp, #76	; 0x4c
 8001490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001494:	4bdecfa9 	.word	0x4bdecfa9
 8001498:	f6bb4b60 	.word	0xf6bb4b60
 800149c:	bebfbc70 	.word	0xbebfbc70
 80014a0:	d4ef3085 	.word	0xd4ef3085
 80014a4:	04881d05 	.word	0x04881d05
 80014a8:	f4292244 	.word	0xf4292244
 80014ac:	432aff97 	.word	0x432aff97
 80014b0:	ab9423a7 	.word	0xab9423a7
 80014b4:	fc93a039 	.word	0xfc93a039
 80014b8:	655b59c3 	.word	0x655b59c3
 80014bc:	8f0ccc92 	.word	0x8f0ccc92
 80014c0:	85845dd1 	.word	0x85845dd1
 80014c4:	6fa87e4f 	.word	0x6fa87e4f
 80014c8:	fe2ce6e0 	.word	0xfe2ce6e0
 80014cc:	a3014314 	.word	0xa3014314
 80014d0:	4e0811a1 	.word	0x4e0811a1
 80014d4:	f7537e82 	.word	0xf7537e82
 80014d8:	bd3af235 	.word	0xbd3af235
 80014dc:	2ad7d2bb 	.word	0x2ad7d2bb
 80014e0:	eb86d391 	.word	0xeb86d391
 80014e4:	289b7ec6 	.word	0x289b7ec6
 80014e8:	eaa127fa 	.word	0xeaa127fa
 80014ec:	d9d4d039 	.word	0xd9d4d039
 80014f0:	e6db99e5 	.word	0xe6db99e5
 80014f4:	1fa27cf8 	.word	0x1fa27cf8
 80014f8:	c4ac5665 	.word	0xc4ac5665

080014fc <_Z8MD5_InitP7MD5_CTX>:

void MD5_Init(MD5_CTX *ctx)
{
	ctx->a = 0x67452301;
 80014fc:	4b09      	ldr	r3, [pc, #36]	; (8001524 <_Z8MD5_InitP7MD5_CTX+0x28>)
 80014fe:	6083      	str	r3, [r0, #8]
	ctx->b = 0xefcdab89;
 8001500:	f103 3188 	add.w	r1, r3, #2290649224	; 0x88888888
	ctx->c = 0x98badcfe;
 8001504:	f101 4229 	add.w	r2, r1, #2835349504	; 0xa9000000
 8001508:	f5a2 1c96 	sub.w	ip, r2, #1228800	; 0x12c000
 800150c:	f6ac 638b 	subw	r3, ip, #3723	; 0xe8b
	ctx->b = 0xefcdab89;
 8001510:	60c1      	str	r1, [r0, #12]
	ctx->d = 0x10325476;

	ctx->lo = 0;
 8001512:	2200      	movs	r2, #0
	ctx->d = 0x10325476;
 8001514:	f1a3 3188 	sub.w	r1, r3, #2290649224	; 0x88888888
	ctx->c = 0x98badcfe;
 8001518:	6103      	str	r3, [r0, #16]
	ctx->d = 0x10325476;
 800151a:	6141      	str	r1, [r0, #20]
	ctx->hi = 0;
 800151c:	e9c0 2200 	strd	r2, r2, [r0]
}
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	67452301 	.word	0x67452301

08001528 <_Z10MD5_UpdateP7MD5_CTXPKvm>:

void MD5_Update(MD5_CTX *ctx, const void *data, unsigned long size)
{
 8001528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800152a:	4604      	mov	r4, r0
	MD5_u32plus saved_lo;
	unsigned long used, available;

	saved_lo = ctx->lo;
 800152c:	6800      	ldr	r0, [r0, #0]
	if ((ctx->lo = (saved_lo + size) & 0x1fffffff) < saved_lo)
 800152e:	1883      	adds	r3, r0, r2
{
 8001530:	460e      	mov	r6, r1
	if ((ctx->lo = (saved_lo + size) & 0x1fffffff) < saved_lo)
 8001532:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8001536:	4281      	cmp	r1, r0
 8001538:	6021      	str	r1, [r4, #0]
		ctx->hi++;
 800153a:	bf3e      	ittt	cc
 800153c:	6861      	ldrcc	r1, [r4, #4]
 800153e:	3101      	addcc	r1, #1
 8001540:	6061      	strcc	r1, [r4, #4]
{
 8001542:	4615      	mov	r5, r2
	ctx->hi += size >> 29;
 8001544:	6862      	ldr	r2, [r4, #4]

	used = saved_lo & 0x3f;

	if (used) {
 8001546:	f010 003f 	ands.w	r0, r0, #63	; 0x3f
	ctx->hi += size >> 29;
 800154a:	eb02 7755 	add.w	r7, r2, r5, lsr #29
 800154e:	6067      	str	r7, [r4, #4]
	if (used) {
 8001550:	d018      	beq.n	8001584 <_Z10MD5_UpdateP7MD5_CTXPKvm+0x5c>
		available = 64 - used;
 8001552:	f1c0 0740 	rsb	r7, r0, #64	; 0x40

		if (size < available) {
 8001556:	42bd      	cmp	r5, r7
 8001558:	f100 0018 	add.w	r0, r0, #24
 800155c:	4420      	add	r0, r4
 800155e:	d205      	bcs.n	800156c <_Z10MD5_UpdateP7MD5_CTXPKvm+0x44>
			memcpy(&ctx->buffer[used], data, size);
 8001560:	462a      	mov	r2, r5
 8001562:	4631      	mov	r1, r6
		data = body(ctx, data, size & ~(unsigned long)0x3f);
		size &= 0x3f;
	}

	memcpy(ctx->buffer, data, size);
}
 8001564:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	memcpy(ctx->buffer, data, size);
 8001568:	f003 bbfc 	b.w	8004d64 <memcpy>
		memcpy(&ctx->buffer[used], data, available);
 800156c:	4631      	mov	r1, r6
 800156e:	463a      	mov	r2, r7
 8001570:	f003 fbf8 	bl	8004d64 <memcpy>
		body(ctx, ctx->buffer, 64);
 8001574:	2240      	movs	r2, #64	; 0x40
 8001576:	f104 0118 	add.w	r1, r4, #24
 800157a:	4620      	mov	r0, r4
		data = (const unsigned char *)data + available;
 800157c:	443e      	add	r6, r7
		size -= available;
 800157e:	1bed      	subs	r5, r5, r7
		body(ctx, ctx->buffer, 64);
 8001580:	f7ff fc08 	bl	8000d94 <_ZL4bodyP7MD5_CTXPKvm>
	if (size >= 64) {
 8001584:	2d3f      	cmp	r5, #63	; 0x3f
 8001586:	d908      	bls.n	800159a <_Z10MD5_UpdateP7MD5_CTXPKvm+0x72>
		data = body(ctx, data, size & ~(unsigned long)0x3f);
 8001588:	f025 023f 	bic.w	r2, r5, #63	; 0x3f
 800158c:	4631      	mov	r1, r6
 800158e:	4620      	mov	r0, r4
 8001590:	f7ff fc00 	bl	8000d94 <_ZL4bodyP7MD5_CTXPKvm>
		size &= 0x3f;
 8001594:	f005 053f 	and.w	r5, r5, #63	; 0x3f
		data = body(ctx, data, size & ~(unsigned long)0x3f);
 8001598:	4606      	mov	r6, r0
	memcpy(ctx->buffer, data, size);
 800159a:	462a      	mov	r2, r5
 800159c:	4631      	mov	r1, r6
 800159e:	f104 0018 	add.w	r0, r4, #24
 80015a2:	e7df      	b.n	8001564 <_Z10MD5_UpdateP7MD5_CTXPKvm+0x3c>

080015a4 <_Z9MD5_FinalPhP7MD5_CTX>:
	(dst)[1] = (unsigned char)((src) >> 8); \
	(dst)[2] = (unsigned char)((src) >> 16); \
	(dst)[3] = (unsigned char)((src) >> 24);

void MD5_Final(unsigned char *result, MD5_CTX *ctx)
{
 80015a4:	b570      	push	{r4, r5, r6, lr}
 80015a6:	4605      	mov	r5, r0
	unsigned long used, available;

	used = ctx->lo & 0x3f;
 80015a8:	6808      	ldr	r0, [r1, #0]
 80015aa:	f000 003f 	and.w	r0, r0, #63	; 0x3f

	ctx->buffer[used++] = 0x80;
 80015ae:	180a      	adds	r2, r1, r0
{
 80015b0:	460c      	mov	r4, r1
	ctx->buffer[used++] = 0x80;
 80015b2:	1c43      	adds	r3, r0, #1
 80015b4:	2180      	movs	r1, #128	; 0x80
 80015b6:	7611      	strb	r1, [r2, #24]

	available = 64 - used;
 80015b8:	f1c3 0240 	rsb	r2, r3, #64	; 0x40

	if (available < 8) {
 80015bc:	2a07      	cmp	r2, #7
 80015be:	f104 0618 	add.w	r6, r4, #24
 80015c2:	d80b      	bhi.n	80015dc <_Z9MD5_FinalPhP7MD5_CTX+0x38>
		memset(&ctx->buffer[used], 0, available);
 80015c4:	3019      	adds	r0, #25
 80015c6:	2100      	movs	r1, #0
 80015c8:	4420      	add	r0, r4
 80015ca:	f003 fbd6 	bl	8004d7a <memset>
		body(ctx, ctx->buffer, 64);
 80015ce:	2240      	movs	r2, #64	; 0x40
 80015d0:	4631      	mov	r1, r6
 80015d2:	4620      	mov	r0, r4
 80015d4:	f7ff fbde 	bl	8000d94 <_ZL4bodyP7MD5_CTXPKvm>
		used = 0;
		available = 64;
 80015d8:	2240      	movs	r2, #64	; 0x40
		used = 0;
 80015da:	2300      	movs	r3, #0
	}

	memset(&ctx->buffer[used], 0, available - 8);
 80015dc:	f103 0018 	add.w	r0, r3, #24
 80015e0:	3a08      	subs	r2, #8
 80015e2:	2100      	movs	r1, #0
 80015e4:	4420      	add	r0, r4
 80015e6:	f003 fbc8 	bl	8004d7a <memset>

	ctx->lo <<= 3;
 80015ea:	6820      	ldr	r0, [r4, #0]
 80015ec:	00c1      	lsls	r1, r0, #3
 80015ee:	6021      	str	r1, [r4, #0]
	OUT(&ctx->buffer[56], ctx->lo)
 80015f0:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
 80015f4:	0a0a      	lsrs	r2, r1, #8
 80015f6:	0c0b      	lsrs	r3, r1, #16
 80015f8:	0e08      	lsrs	r0, r1, #24
	OUT(&ctx->buffer[60], ctx->hi)
 80015fa:	6861      	ldr	r1, [r4, #4]
	OUT(&ctx->buffer[56], ctx->lo)
 80015fc:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
 8001600:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
 8001604:	f884 0053 	strb.w	r0, [r4, #83]	; 0x53
	OUT(&ctx->buffer[60], ctx->hi)
 8001608:	0c0b      	lsrs	r3, r1, #16
 800160a:	0a0a      	lsrs	r2, r1, #8
 800160c:	0e08      	lsrs	r0, r1, #24
 800160e:	f884 1054 	strb.w	r1, [r4, #84]	; 0x54
 8001612:	f884 2055 	strb.w	r2, [r4, #85]	; 0x55
 8001616:	f884 3056 	strb.w	r3, [r4, #86]	; 0x56
 800161a:	f884 0057 	strb.w	r0, [r4, #87]	; 0x57

	body(ctx, ctx->buffer, 64);
 800161e:	4631      	mov	r1, r6
 8001620:	2240      	movs	r2, #64	; 0x40
 8001622:	4620      	mov	r0, r4
 8001624:	f7ff fbb6 	bl	8000d94 <_ZL4bodyP7MD5_CTXPKvm>

	OUT(&result[0], ctx->a)
 8001628:	68a6      	ldr	r6, [r4, #8]
 800162a:	702e      	strb	r6, [r5, #0]
 800162c:	68a1      	ldr	r1, [r4, #8]
 800162e:	0a0a      	lsrs	r2, r1, #8
 8001630:	706a      	strb	r2, [r5, #1]
 8001632:	8963      	ldrh	r3, [r4, #10]
 8001634:	70ab      	strb	r3, [r5, #2]
 8001636:	7ae0      	ldrb	r0, [r4, #11]
 8001638:	70e8      	strb	r0, [r5, #3]
	OUT(&result[4], ctx->b)
 800163a:	68e6      	ldr	r6, [r4, #12]
 800163c:	712e      	strb	r6, [r5, #4]
 800163e:	68e1      	ldr	r1, [r4, #12]
 8001640:	0a0a      	lsrs	r2, r1, #8
 8001642:	716a      	strb	r2, [r5, #5]
 8001644:	89e3      	ldrh	r3, [r4, #14]
 8001646:	71ab      	strb	r3, [r5, #6]
 8001648:	7be0      	ldrb	r0, [r4, #15]
 800164a:	71e8      	strb	r0, [r5, #7]
	OUT(&result[8], ctx->c)
 800164c:	6926      	ldr	r6, [r4, #16]
 800164e:	722e      	strb	r6, [r5, #8]
 8001650:	6921      	ldr	r1, [r4, #16]
 8001652:	0a0a      	lsrs	r2, r1, #8
 8001654:	726a      	strb	r2, [r5, #9]
 8001656:	8a63      	ldrh	r3, [r4, #18]
 8001658:	72ab      	strb	r3, [r5, #10]
 800165a:	7ce0      	ldrb	r0, [r4, #19]
 800165c:	72e8      	strb	r0, [r5, #11]
	OUT(&result[12], ctx->d)
 800165e:	6966      	ldr	r6, [r4, #20]
 8001660:	732e      	strb	r6, [r5, #12]
 8001662:	6961      	ldr	r1, [r4, #20]
 8001664:	0a0a      	lsrs	r2, r1, #8
 8001666:	736a      	strb	r2, [r5, #13]
 8001668:	8ae3      	ldrh	r3, [r4, #22]
 800166a:	73ab      	strb	r3, [r5, #14]
 800166c:	7de0      	ldrb	r0, [r4, #23]
 800166e:	73e8      	strb	r0, [r5, #15]

	memset(ctx, 0, sizeof(*ctx));
 8001670:	2298      	movs	r2, #152	; 0x98
 8001672:	4620      	mov	r0, r4
 8001674:	2100      	movs	r1, #0
}
 8001676:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(ctx, 0, sizeof(*ctx));
 800167a:	f003 bb7e 	b.w	8004d7a <memset>

0800167e <_ZN6SdCard6deinitEv>:

    // card detect pin
    gpio_mode_setup(GPIOC, GPIO_MODE_INPUT, GPIO_PUPD_NONE, GPIO11);
}

void SdCard::deinit() {
 800167e:	b508      	push	{r3, lr}
    rcc_periph_clock_disable(RCC_SDIO);
 8001680:	f640 008b 	movw	r0, #2187	; 0x88b
 8001684:	f002 f991 	bl	80039aa <rcc_periph_clock_disable>
    rcc_periph_clock_disable(RCC_DMA2);
 8001688:	f240 6016 	movw	r0, #1558	; 0x616
 800168c:	f002 f98d 	bl	80039aa <rcc_periph_clock_disable>
    rcc_periph_clock_disable(RCC_GPIOC);
 8001690:	f240 6002 	movw	r0, #1538	; 0x602
 8001694:	f002 f989 	bl	80039aa <rcc_periph_clock_disable>
    rcc_periph_clock_disable(RCC_GPIOD);
 8001698:	f240 6003 	movw	r0, #1539	; 0x603
 800169c:	f002 f985 	bl	80039aa <rcc_periph_clock_disable>
    rcc_periph_reset_pulse(RST_SDIO);
 80016a0:	f240 408b 	movw	r0, #1163	; 0x48b
 80016a4:	f002 f990 	bl	80039c8 <rcc_periph_reset_pulse>
    rcc_periph_reset_pulse(RST_DMA2);
 80016a8:	f240 2016 	movw	r0, #534	; 0x216
 80016ac:	f002 f98c 	bl	80039c8 <rcc_periph_reset_pulse>
    rcc_periph_reset_pulse(RST_GPIOC);
 80016b0:	f240 2002 	movw	r0, #514	; 0x202
 80016b4:	f002 f988 	bl	80039c8 <rcc_periph_reset_pulse>
    rcc_periph_reset_pulse(RST_GPIOD);
 80016b8:	f240 2003 	movw	r0, #515	; 0x203
}
 80016bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    rcc_periph_reset_pulse(RST_GPIOD);
 80016c0:	f002 b982 	b.w	80039c8 <rcc_periph_reset_pulse>

080016c4 <_ZN6SdCard7powerOnEv>:
bool SdCard::cardDetect() {
    return gpio_get(GPIOC, GPIO11);
}

void SdCard::powerOn() {
    SDIO_POWER = SDIO_POWER_PWRCTRL_PWRON;
 80016c4:	4b05      	ldr	r3, [pc, #20]	; (80016dc <_ZN6SdCard7powerOnEv+0x18>)
 80016c6:	2203      	movs	r2, #3
 80016c8:	601a      	str	r2, [r3, #0]
    while (SDIO_POWER != SDIO_POWER_PWRCTRL_PWRON);
 80016ca:	6818      	ldr	r0, [r3, #0]
 80016cc:	2803      	cmp	r0, #3
 80016ce:	d1fc      	bne.n	80016ca <_ZN6SdCard7powerOnEv+0x6>
    SDIO_CLKCR = SDIO_CLKCR_CLKEN | SDIO_CLKCR_WIDBUS_1 | 118;
 80016d0:	4903      	ldr	r1, [pc, #12]	; (80016e0 <_ZN6SdCard7powerOnEv+0x1c>)
 80016d2:	f44f 73bb 	mov.w	r3, #374	; 0x176
 80016d6:	600b      	str	r3, [r1, #0]
}
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	40012c00 	.word	0x40012c00
 80016e0:	40012c04 	.word	0x40012c04

080016e4 <_ZN6SdCard8powerOffEv>:

void SdCard::powerOff() {
    SDIO_POWER = SDIO_POWER_PWRCTRL_PWROFF;
 80016e4:	4b03      	ldr	r3, [pc, #12]	; (80016f4 <_ZN6SdCard8powerOffEv+0x10>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	601a      	str	r2, [r3, #0]
    rcc_periph_reset_pulse(RST_SDIO);
 80016ea:	f240 408b 	movw	r0, #1163	; 0x48b
 80016ee:	f002 b96b 	b.w	80039c8 <rcc_periph_reset_pulse>
 80016f2:	bf00      	nop
 80016f4:	40012c00 	.word	0x40012c00

080016f8 <_ZN6SdCard4initEv>:
void SdCard::init() {
 80016f8:	b570      	push	{r4, r5, r6, lr}
    rcc_periph_clock_enable(RCC_SDIO);
 80016fa:	f640 008b 	movw	r0, #2187	; 0x88b
 80016fe:	f002 f947 	bl	8003990 <rcc_periph_clock_enable>
    rcc_periph_clock_enable(RCC_DMA2);
 8001702:	f240 6016 	movw	r0, #1558	; 0x616
 8001706:	f002 f943 	bl	8003990 <rcc_periph_clock_enable>
    gpio_mode_setup(GPIOC, GPIO_MODE_AF, GPIO_PUPD_NONE, GPIO8 | GPIO12);
 800170a:	4c1d      	ldr	r4, [pc, #116]	; (8001780 <_ZN6SdCard4initEv+0x88>)
    gpio_mode_setup(GPIOD, GPIO_MODE_AF, GPIO_PUPD_NONE, GPIO2);
 800170c:	4d1d      	ldr	r5, [pc, #116]	; (8001784 <_ZN6SdCard4initEv+0x8c>)
    powerOff();
 800170e:	f7ff ffe9 	bl	80016e4 <_ZN6SdCard8powerOffEv>
    rcc_periph_clock_enable(RCC_GPIOC);
 8001712:	f240 6002 	movw	r0, #1538	; 0x602
 8001716:	f002 f93b 	bl	8003990 <rcc_periph_clock_enable>
    rcc_periph_clock_enable(RCC_GPIOD);
 800171a:	f240 6003 	movw	r0, #1539	; 0x603
 800171e:	f002 f937 	bl	8003990 <rcc_periph_clock_enable>
    gpio_mode_setup(GPIOC, GPIO_MODE_AF, GPIO_PUPD_NONE, GPIO8 | GPIO12);
 8001722:	4620      	mov	r0, r4
 8001724:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8001728:	2200      	movs	r2, #0
 800172a:	2102      	movs	r1, #2
 800172c:	f001 ffb2 	bl	8003694 <gpio_mode_setup>
    gpio_mode_setup(GPIOD, GPIO_MODE_AF, GPIO_PUPD_NONE, GPIO2);
 8001730:	4628      	mov	r0, r5
 8001732:	2304      	movs	r3, #4
 8001734:	2200      	movs	r2, #0
 8001736:	2102      	movs	r1, #2
 8001738:	f001 ffac 	bl	8003694 <gpio_mode_setup>
    gpio_set_output_options(GPIOC, GPIO_OTYPE_PP, GPIO_OSPEED_50MHZ, GPIO8 | GPIO12);
 800173c:	4620      	mov	r0, r4
 800173e:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8001742:	2202      	movs	r2, #2
 8001744:	2100      	movs	r1, #0
 8001746:	f001 ffc7 	bl	80036d8 <gpio_set_output_options>
    gpio_set_output_options(GPIOD, GPIO_OTYPE_PP, GPIO_OSPEED_50MHZ, GPIO2);
 800174a:	2304      	movs	r3, #4
 800174c:	4628      	mov	r0, r5
 800174e:	2202      	movs	r2, #2
 8001750:	2100      	movs	r1, #0
 8001752:	f001 ffc1 	bl	80036d8 <gpio_set_output_options>
    gpio_set_af(GPIOC, GPIO_AF12, GPIO8 | GPIO12);
 8001756:	4620      	mov	r0, r4
 8001758:	f44f 5288 	mov.w	r2, #4352	; 0x1100
 800175c:	210c      	movs	r1, #12
 800175e:	f001 ffd6 	bl	800370e <gpio_set_af>
    gpio_set_af(GPIOD, GPIO_AF12, GPIO2);
 8001762:	4628      	mov	r0, r5
 8001764:	2204      	movs	r2, #4
 8001766:	210c      	movs	r1, #12
 8001768:	f001 ffd1 	bl	800370e <gpio_set_af>
    gpio_mode_setup(GPIOC, GPIO_MODE_INPUT, GPIO_PUPD_NONE, GPIO11);
 800176c:	2200      	movs	r2, #0
 800176e:	4620      	mov	r0, r4
 8001770:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001774:	4611      	mov	r1, r2
}
 8001776:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    gpio_mode_setup(GPIOC, GPIO_MODE_INPUT, GPIO_PUPD_NONE, GPIO11);
 800177a:	f001 bf8b 	b.w	8003694 <gpio_mode_setup>
 800177e:	bf00      	nop
 8001780:	40020800 	.word	0x40020800
 8001784:	40020c00 	.word	0x40020c00

08001788 <_ZN6SdCard11sendCommandEmm>:
}

void SdCard::sendCommand(uint32_t cmd, uint32_t arg) {
    cmd &= SDIO_CMD_CMDINDEX_MSK;
    uint32_t waitresp = SDIO_CMD_WAITRESP_SHORT;
    if (cmd == 0) {
 8001788:	f010 003f 	ands.w	r0, r0, #63	; 0x3f
void SdCard::sendCommand(uint32_t cmd, uint32_t arg) {
 800178c:	b510      	push	{r4, lr}
    if (cmd == 0) {
 800178e:	d013      	beq.n	80017b8 <_ZN6SdCard11sendCommandEmm+0x30>
        waitresp = SDIO_CMD_WAITRESP_NO_0;
    } else if (cmd == 2 || cmd == 9 || cmd == 10) {
 8001790:	2802      	cmp	r0, #2
 8001792:	d013      	beq.n	80017bc <_ZN6SdCard11sendCommandEmm+0x34>
 8001794:	f1a0 0309 	sub.w	r3, r0, #9
 8001798:	2b01      	cmp	r3, #1
        waitresp = SDIO_CMD_WAITRESP_LONG;
 800179a:	bf8c      	ite	hi
 800179c:	2340      	movhi	r3, #64	; 0x40
 800179e:	23c0      	movls	r3, #192	; 0xc0
        // XXX: This should be an error, we don't have multithread
        tmp_val |= SDIO_CMD_WAITPEND;
    }
#endif

    SDIO_ICR = 0x7ff; // Reset all signals we use (and some we don't).
 80017a0:	4a07      	ldr	r2, [pc, #28]	; (80017c0 <_ZN6SdCard11sendCommandEmm+0x38>)
 80017a2:	f240 74ff 	movw	r4, #2047	; 0x7ff
 80017a6:	6014      	str	r4, [r2, #0]
    SDIO_ARG = arg; // The arg must be set before the command.
 80017a8:	f842 1c30 	str.w	r1, [r2, #-48]
    // Set the command and associated bits.
    SDIO_CMD = (cmd | SDIO_CMD_CPSMEN | waitresp);
 80017ac:	f440 6180 	orr.w	r1, r0, #1024	; 0x400
 80017b0:	4804      	ldr	r0, [pc, #16]	; (80017c4 <_ZN6SdCard11sendCommandEmm+0x3c>)
 80017b2:	4319      	orrs	r1, r3
 80017b4:	6001      	str	r1, [r0, #0]
}
 80017b6:	bd10      	pop	{r4, pc}
        waitresp = SDIO_CMD_WAITRESP_NO_0;
 80017b8:	4603      	mov	r3, r0
 80017ba:	e7f1      	b.n	80017a0 <_ZN6SdCard11sendCommandEmm+0x18>
        waitresp = SDIO_CMD_WAITRESP_LONG;
 80017bc:	23c0      	movs	r3, #192	; 0xc0
 80017be:	e7ef      	b.n	80017a0 <_ZN6SdCard11sendCommandEmm+0x18>
 80017c0:	40012c38 	.word	0x40012c38
 80017c4:	40012c0c 	.word	0x40012c0c

080017c8 <_ZN6SdCard13commandResultEv>:

SdCard::Error SdCard::commandResult() {
    uint32_t status = SDIO_STA & 0xfff;
 80017c8:	4b12      	ldr	r3, [pc, #72]	; (8001814 <_ZN6SdCard13commandResultEv+0x4c>)
 80017ca:	681b      	ldr	r3, [r3, #0]

    if (status & SDIO_STA_CMDACT) {
 80017cc:	f413 6200 	ands.w	r2, r3, #2048	; 0x800
 80017d0:	d11b      	bne.n	800180a <_ZN6SdCard13commandResultEv+0x42>
        return InProgress;
    }

    if (status & SDIO_STA_CMDREND) {
 80017d2:	f013 0040 	ands.w	r0, r3, #64	; 0x40
 80017d6:	d004      	beq.n	80017e2 <_ZN6SdCard13commandResultEv+0x1a>
        SDIO_ICR = SDIO_STA_CMDREND;
 80017d8:	480f      	ldr	r0, [pc, #60]	; (8001818 <_ZN6SdCard13commandResultEv+0x50>)
 80017da:	2140      	movs	r1, #64	; 0x40
 80017dc:	6001      	str	r1, [r0, #0]
        return Success;
 80017de:	4610      	mov	r0, r2
 80017e0:	4770      	bx	lr
    }

    if (status & SDIO_STA_CMDSENT) {
 80017e2:	0619      	lsls	r1, r3, #24
 80017e4:	d503      	bpl.n	80017ee <_ZN6SdCard13commandResultEv+0x26>
        SDIO_ICR = SDIO_STA_CMDSENT;
 80017e6:	490c      	ldr	r1, [pc, #48]	; (8001818 <_ZN6SdCard13commandResultEv+0x50>)
 80017e8:	2380      	movs	r3, #128	; 0x80
 80017ea:	600b      	str	r3, [r1, #0]
        return Success;
 80017ec:	4770      	bx	lr
    }

    if (status & SDIO_STA_CTIMEOUT) {
 80017ee:	075a      	lsls	r2, r3, #29
 80017f0:	d504      	bpl.n	80017fc <_ZN6SdCard13commandResultEv+0x34>
        SDIO_ICR = SDIO_STA_CTIMEOUT;
 80017f2:	4b09      	ldr	r3, [pc, #36]	; (8001818 <_ZN6SdCard13commandResultEv+0x50>)
 80017f4:	2204      	movs	r2, #4
 80017f6:	601a      	str	r2, [r3, #0]
        return Timeout;
 80017f8:	2002      	movs	r0, #2
 80017fa:	4770      	bx	lr
    }

    if (status & SDIO_STA_CCRCFAIL) {
 80017fc:	07db      	lsls	r3, r3, #31
 80017fe:	d506      	bpl.n	800180e <_ZN6SdCard13commandResultEv+0x46>
        SDIO_ICR = SDIO_STA_CCRCFAIL;
 8001800:	4805      	ldr	r0, [pc, #20]	; (8001818 <_ZN6SdCard13commandResultEv+0x50>)
 8001802:	2101      	movs	r1, #1
 8001804:	6001      	str	r1, [r0, #0]
        return CRCFail;
 8001806:	2003      	movs	r0, #3
 8001808:	4770      	bx	lr
        return InProgress;
 800180a:	2001      	movs	r0, #1
 800180c:	4770      	bx	lr
    }

    return Unknown;
 800180e:	2004      	movs	r0, #4
}
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	40012c34 	.word	0x40012c34
 8001818:	40012c38 	.word	0x40012c38

0800181c <_ZN6SdCard15sendCommandWaitEmm>:

SdCard::Error SdCard::sendCommandWait(uint32_t cmd, uint32_t arg) {
 800181c:	b508      	push	{r3, lr}
    Error result;
    sendCommand(cmd, arg);
 800181e:	f7ff ffb3 	bl	8001788 <_ZN6SdCard11sendCommandEmm>
    while ((result = commandResult()) == InProgress) {
 8001822:	f7ff ffd1 	bl	80017c8 <_ZN6SdCard13commandResultEv>
 8001826:	2801      	cmp	r0, #1
 8001828:	d0fb      	beq.n	8001822 <_ZN6SdCard15sendCommandWaitEmm+0x6>
        // TODO should only yield if this busy loop takes up too much time
        // os::this_task::yield();
    }
    return result;
}
 800182a:	bd08      	pop	{r3, pc}

0800182c <_ZN6SdCard16sendCommandRetryEmmi>:

SdCard::Error SdCard::sendCommandRetry(uint32_t cmd, uint32_t arg, int maxRetries) {
 800182c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800182e:	4605      	mov	r5, r0
 8001830:	460e      	mov	r6, r1
 8001832:	4617      	mov	r7, r2
    Error result = Unknown;
    for (int i = 0; i < maxRetries; ++i) {
 8001834:	2400      	movs	r4, #0
    Error result = Unknown;
 8001836:	2004      	movs	r0, #4
    for (int i = 0; i < maxRetries; ++i) {
 8001838:	42bc      	cmp	r4, r7
 800183a:	da06      	bge.n	800184a <_ZN6SdCard16sendCommandRetryEmmi+0x1e>
        result = sendCommandWait(cmd, arg);
 800183c:	4631      	mov	r1, r6
 800183e:	4628      	mov	r0, r5
 8001840:	f7ff ffec 	bl	800181c <_ZN6SdCard15sendCommandWaitEmm>
        if (result == Success) {
 8001844:	b108      	cbz	r0, 800184a <_ZN6SdCard16sendCommandRetryEmmi+0x1e>
    for (int i = 0; i < maxRetries; ++i) {
 8001846:	3401      	adds	r4, #1
 8001848:	e7f6      	b.n	8001838 <_ZN6SdCard16sendCommandRetryEmmi+0xc>
            break;
        }
    }
    return result;
}
 800184a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800184c <_ZN6SdCard14sendAppCommandEmmi>:

// SdCard::Error SdCard::select() {
//     return sendCommandRetry(7, sd_card_info.rca << 16);
// }

SdCard::Error SdCard::sendAppCommand(uint32_t cmd, uint32_t arg, int maxRetries) {
 800184c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    Error result = Unknown;
    Error expected = (cmd == 41) ? CRCFail : Success;
 8001850:	2829      	cmp	r0, #41	; 0x29
    for (int i = 0; i < maxRetries; ++i) {
        result = sendCommandWait(55, _cardInfo.rca << 16);
 8001852:	f8df 9038 	ldr.w	r9, [pc, #56]	; 800188c <_ZN6SdCard14sendAppCommandEmmi+0x40>
SdCard::Error SdCard::sendAppCommand(uint32_t cmd, uint32_t arg, int maxRetries) {
 8001856:	4605      	mov	r5, r0
 8001858:	460f      	mov	r7, r1
 800185a:	4690      	mov	r8, r2
    Error expected = (cmd == 41) ? CRCFail : Success;
 800185c:	bf0c      	ite	eq
 800185e:	2603      	moveq	r6, #3
 8001860:	2600      	movne	r6, #0
    for (int i = 0; i < maxRetries; ++i) {
 8001862:	2400      	movs	r4, #0
    Error result = Unknown;
 8001864:	2004      	movs	r0, #4
    for (int i = 0; i < maxRetries; ++i) {
 8001866:	4544      	cmp	r4, r8
 8001868:	da0e      	bge.n	8001888 <_ZN6SdCard14sendAppCommandEmmi+0x3c>
        result = sendCommandWait(55, _cardInfo.rca << 16);
 800186a:	f8b9 1000 	ldrh.w	r1, [r9]
 800186e:	2037      	movs	r0, #55	; 0x37
 8001870:	0409      	lsls	r1, r1, #16
 8001872:	f7ff ffd3 	bl	800181c <_ZN6SdCard15sendCommandWaitEmm>
        if (result != Success) {
 8001876:	b928      	cbnz	r0, 8001884 <_ZN6SdCard14sendAppCommandEmmi+0x38>
            continue;
        }
        result = sendCommandWait(cmd, arg);
 8001878:	4639      	mov	r1, r7
 800187a:	4628      	mov	r0, r5
 800187c:	f7ff ffce 	bl	800181c <_ZN6SdCard15sendCommandWaitEmm>
        if (result == expected) {
 8001880:	4286      	cmp	r6, r0
 8001882:	d001      	beq.n	8001888 <_ZN6SdCard14sendAppCommandEmmi+0x3c>
    for (int i = 0; i < maxRetries; ++i) {
 8001884:	3401      	adds	r4, #1
 8001886:	e7ee      	b.n	8001866 <_ZN6SdCard14sendAppCommandEmmi+0x1a>
            break;
        }
    }
    return result;
}
 8001888:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800188c:	200045e8 	.word	0x200045e8

08001890 <_ZN6SdCard8initCardEv>:

bool SdCard::initCard() {
 8001890:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    // TODO check card detect pin
    // if (!cardDetect()) {
    //     return false;
    // }

    _cardInfo = CardInfo();
 8001894:	2500      	movs	r5, #0
 8001896:	4c46      	ldr	r4, [pc, #280]	; (80019b0 <_ZN6SdCard8initCardEv+0x120>)
    powerOn();
 8001898:	f7ff ff14 	bl	80016c4 <_ZN6SdCard7powerOnEv>

    if (sendCommandRetry(0, 0) != Success) {
 800189c:	2205      	movs	r2, #5
 800189e:	4629      	mov	r1, r5
 80018a0:	4628      	mov	r0, r5
    _cardInfo = CardInfo();
 80018a2:	8025      	strh	r5, [r4, #0]
 80018a4:	70a5      	strb	r5, [r4, #2]
 80018a6:	6065      	str	r5, [r4, #4]
    if (sendCommandRetry(0, 0) != Success) {
 80018a8:	f7ff ffc0 	bl	800182c <_ZN6SdCard16sendCommandRetryEmmi>
 80018ac:	4606      	mov	r6, r0
 80018ae:	2800      	cmp	r0, #0
 80018b0:	d17c      	bne.n	80019ac <_ZN6SdCard8initCardEv+0x11c>
    }

    Error result;

    bool hcs = false;
    result = sendCommandRetry(8, 0x1f1);
 80018b2:	2205      	movs	r2, #5
 80018b4:	f240 11f1 	movw	r1, #497	; 0x1f1
 80018b8:	2008      	movs	r0, #8
 80018ba:	f7ff ffb7 	bl	800182c <_ZN6SdCard16sendCommandRetryEmmi>
    if (result == Success && SDIO_RESP1 == 0x1f1) {
 80018be:	2800      	cmp	r0, #0
 80018c0:	d15f      	bne.n	8001982 <_ZN6SdCard8initCardEv+0xf2>
 80018c2:	4b3c      	ldr	r3, [pc, #240]	; (80019b4 <_ZN6SdCard8initCardEv+0x124>)
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	f240 10f1 	movw	r0, #497	; 0x1f1
 80018ca:	4282      	cmp	r2, r0
 80018cc:	d15b      	bne.n	8001986 <_ZN6SdCard8initCardEv+0xf6>
        hcs = true;
 80018ce:	2601      	movs	r6, #1
    static uint32_t ticks() { return _ticks; }
 80018d0:	4d39      	ldr	r5, [pc, #228]	; (80019b8 <_ZN6SdCard8initCardEv+0x128>)
 80018d2:	493a      	ldr	r1, [pc, #232]	; (80019bc <_ZN6SdCard8initCardEv+0x12c>)
    const uint32_t OCR_BUSY = 0x80000000;
    const uint32_t OCR_HCS = 0x40000000;
    const uint32_t OCR_CCS = 0x40000000;

    bool acmd41_success = false;
    uint32_t timeout = System::ticks() + 2000;
 80018d4:	682f      	ldr	r7, [r5, #0]
 80018d6:	2e00      	cmp	r6, #0
    while (System::ticks() < timeout) {
        result = sendAppCommand(41, 0x100000 | (hcs ? OCR_HCS : 0));
        uint32_t response = SDIO_RESP1;
 80018d8:	4e36      	ldr	r6, [pc, #216]	; (80019b4 <_ZN6SdCard8initCardEv+0x124>)
    uint32_t timeout = System::ticks() + 2000;
 80018da:	f507 67fa 	add.w	r7, r7, #2000	; 0x7d0
 80018de:	bf14      	ite	ne
 80018e0:	4688      	movne	r8, r1
 80018e2:	f44f 1880 	moveq.w	r8, #1048576	; 0x100000
    while (System::ticks() < timeout) {
 80018e6:	682b      	ldr	r3, [r5, #0]
 80018e8:	429f      	cmp	r7, r3
 80018ea:	d94c      	bls.n	8001986 <_ZN6SdCard8initCardEv+0xf6>
        result = sendAppCommand(41, 0x100000 | (hcs ? OCR_HCS : 0));
 80018ec:	2205      	movs	r2, #5
 80018ee:	4641      	mov	r1, r8
 80018f0:	2029      	movs	r0, #41	; 0x29
 80018f2:	f7ff ffab 	bl	800184c <_ZN6SdCard14sendAppCommandEmmi>
        if (result == CRCFail && (response & OCR_BUSY) != 0) {
 80018f6:	2803      	cmp	r0, #3
        result = sendAppCommand(41, 0x100000 | (hcs ? OCR_HCS : 0));
 80018f8:	4681      	mov	r9, r0
        uint32_t response = SDIO_RESP1;
 80018fa:	6832      	ldr	r2, [r6, #0]
        if (result == CRCFail && (response & OCR_BUSY) != 0) {
 80018fc:	d1f3      	bne.n	80018e6 <_ZN6SdCard8initCardEv+0x56>
 80018fe:	2a00      	cmp	r2, #0
 8001900:	daf1      	bge.n	80018e6 <_ZN6SdCard8initCardEv+0x56>
            _cardInfo.ccs = (response & OCR_CCS) != 0;
 8001902:	f3c2 7080 	ubfx	r0, r2, #30, #1
 8001906:	70a0      	strb	r0, [r4, #2]
    if (!acmd41_success) {
        powerOff();
        return false;
    }

    if (sendCommandRetry(2, 0) != Success) {
 8001908:	2100      	movs	r1, #0
 800190a:	2205      	movs	r2, #5
 800190c:	2002      	movs	r0, #2
 800190e:	f7ff ff8d 	bl	800182c <_ZN6SdCard16sendCommandRetryEmmi>
 8001912:	4601      	mov	r1, r0
 8001914:	2800      	cmp	r0, #0
 8001916:	d136      	bne.n	8001986 <_ZN6SdCard8initCardEv+0xf6>
        return false;
    }

    bool cmd3_success = false;
    // for (int i = 0; i < max_retries; ++i) {
        if (sendCommandRetry(3, 0) == Success) {
 8001918:	2205      	movs	r2, #5
 800191a:	4648      	mov	r0, r9
 800191c:	f7ff ff86 	bl	800182c <_ZN6SdCard16sendCommandRetryEmmi>
 8001920:	bb88      	cbnz	r0, 8001986 <_ZN6SdCard8initCardEv+0xf6>
            uint32_t response = SDIO_RESP1;
 8001922:	6835      	ldr	r5, [r6, #0]
            _cardInfo.rca = response >> 16;
 8001924:	0c2f      	lsrs	r7, r5, #16
 8001926:	8027      	strh	r7, [r4, #0]
            if (_cardInfo.rca != 0) {
 8001928:	b36f      	cbz	r7, 8001986 <_ZN6SdCard8initCardEv+0xf6>
    if (!cmd3_success) {
        powerOff();
        return false;
    }

    if (sendCommandRetry(9, _cardInfo.rca << 16) != Success) {
 800192a:	2205      	movs	r2, #5
 800192c:	0439      	lsls	r1, r7, #16
 800192e:	2009      	movs	r0, #9
 8001930:	f7ff ff7c 	bl	800182c <_ZN6SdCard16sendCommandRetryEmmi>
 8001934:	bb38      	cbnz	r0, 8001986 <_ZN6SdCard8initCardEv+0xf6>

    // Get the size of the card from the CSD. There are two versions.
    // For V1: byte_size = BLOCK_LEN * MULT * (C_SIZE + 1) bytes.
    // For V2: byte_size = (C_SIZE + 1) * 512K bytes.
    // We address the card in 512 byte blocks so we set size = byte_size / 512.
    uint32_t csd_version = SDIO_RESP1 >> 30;
 8001936:	6831      	ldr	r1, [r6, #0]
    if (csd_version == 0) {
 8001938:	0f8e      	lsrs	r6, r1, #30
 800193a:	d129      	bne.n	8001990 <_ZN6SdCard8initCardEv+0x100>
        // Until I find an old card, this is untested.
        uint32_t read_bl_len = (SDIO_RESP2 >> 16) & 0xF;
 800193c:	4820      	ldr	r0, [pc, #128]	; (80019c0 <_ZN6SdCard8initCardEv+0x130>)
        uint32_t c_size = ((SDIO_RESP2 & 0x3FF) << 2) | (SDIO_RESP3 >> 30);
 800193e:	4a21      	ldr	r2, [pc, #132]	; (80019c4 <_ZN6SdCard8initCardEv+0x134>)
        uint32_t read_bl_len = (SDIO_RESP2 >> 16) & 0xF;
 8001940:	6807      	ldr	r7, [r0, #0]
        uint32_t c_size = ((SDIO_RESP2 & 0x3FF) << 2) | (SDIO_RESP3 >> 30);
 8001942:	6805      	ldr	r5, [r0, #0]
 8001944:	6811      	ldr	r1, [r2, #0]
        uint32_t c_size_mult = (SDIO_RESP3 >> 15) & 0x7;
 8001946:	6816      	ldr	r6, [r2, #0]
        uint32_t c_size = ((SDIO_RESP2 & 0x3FF) << 2) | (SDIO_RESP3 >> 30);
 8001948:	f640 78fc 	movw	r8, #4092	; 0xffc
 800194c:	ea08 0c85 	and.w	ip, r8, r5, lsl #2
 8001950:	ea4c 7391 	orr.w	r3, ip, r1, lsr #30
        uint32_t c_size_mult = (SDIO_RESP3 >> 15) & 0x7;
 8001954:	f3c6 30c2 	ubfx	r0, r6, #15, #3
        uint32_t mult = 1 << (c_size_mult + 2);
        uint32_t blocknr = (c_size + 1) * mult;
 8001958:	3301      	adds	r3, #1
        uint32_t mult = 1 << (c_size_mult + 2);
 800195a:	3002      	adds	r0, #2
        uint32_t blocknr = (c_size + 1) * mult;
 800195c:	4083      	lsls	r3, r0
        uint32_t read_bl_len = (SDIO_RESP2 >> 16) & 0xF;
 800195e:	f3c7 4703 	ubfx	r7, r7, #16, #4
        uint32_t block_len = 1 << read_bl_len;
        _cardInfo.size = (block_len * blocknr) >> 9;
 8001962:	40bb      	lsls	r3, r7
 8001964:	0a5b      	lsrs	r3, r3, #9
    } else {
        powerOff();
        return false;
    }

    if (sendCommandRetry(7, _cardInfo.rca << 16) != Success) {
 8001966:	8825      	ldrh	r5, [r4, #0]
        _cardInfo.size = (c_size + 1) << 10;
 8001968:	6063      	str	r3, [r4, #4]
    if (sendCommandRetry(7, _cardInfo.rca << 16) != Success) {
 800196a:	2205      	movs	r2, #5
 800196c:	0429      	lsls	r1, r5, #16
 800196e:	2007      	movs	r0, #7
 8001970:	f7ff ff5c 	bl	800182c <_ZN6SdCard16sendCommandRetryEmmi>
 8001974:	b938      	cbnz	r0, 8001986 <_ZN6SdCard8initCardEv+0xf6>
        powerOff();
        return false;
    }

    DBG("card size = %lu", _cardInfo.size);
 8001976:	4814      	ldr	r0, [pc, #80]	; (80019c8 <_ZN6SdCard8initCardEv+0x138>)
 8001978:	6861      	ldr	r1, [r4, #4]
 800197a:	f7fe ffe9 	bl	8000950 <printf>

    return true;
 800197e:	2001      	movs	r0, #1
 8001980:	e004      	b.n	800198c <_ZN6SdCard8initCardEv+0xfc>
    } else if (result == Timeout) {
 8001982:	2802      	cmp	r0, #2
 8001984:	d0a4      	beq.n	80018d0 <_ZN6SdCard8initCardEv+0x40>
        powerOff();
 8001986:	f7ff fead 	bl	80016e4 <_ZN6SdCard8powerOffEv>
        return false;
 800198a:	2000      	movs	r0, #0
}
 800198c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    } else if (csd_version == 1) {
 8001990:	2e01      	cmp	r6, #1
 8001992:	d1f8      	bne.n	8001986 <_ZN6SdCard8initCardEv+0xf6>
        uint32_t c_size = ((SDIO_RESP2 & 0x3F) << 16) | (SDIO_RESP3 >> 16);
 8001994:	4b0a      	ldr	r3, [pc, #40]	; (80019c0 <_ZN6SdCard8initCardEv+0x130>)
 8001996:	4a0b      	ldr	r2, [pc, #44]	; (80019c4 <_ZN6SdCard8initCardEv+0x134>)
 8001998:	6818      	ldr	r0, [r3, #0]
 800199a:	6815      	ldr	r5, [r2, #0]
 800199c:	0407      	lsls	r7, r0, #16
 800199e:	f407 117c 	and.w	r1, r7, #4128768	; 0x3f0000
 80019a2:	ea41 4615 	orr.w	r6, r1, r5, lsr #16
        _cardInfo.size = (c_size + 1) << 10;
 80019a6:	3601      	adds	r6, #1
 80019a8:	02b3      	lsls	r3, r6, #10
 80019aa:	e7dc      	b.n	8001966 <_ZN6SdCard8initCardEv+0xd6>
        return false;
 80019ac:	4628      	mov	r0, r5
 80019ae:	e7ed      	b.n	800198c <_ZN6SdCard8initCardEv+0xfc>
 80019b0:	200045e8 	.word	0x200045e8
 80019b4:	40012c14 	.word	0x40012c14
 80019b8:	200045f0 	.word	0x200045f0
 80019bc:	40100000 	.word	0x40100000
 80019c0:	40012c18 	.word	0x40012c18
 80019c4:	40012c1c 	.word	0x40012c1c
 80019c8:	0800513b 	.word	0x0800513b

080019cc <_ZN6SdCard13waitDataReadyEv>:


bool SdCard::waitDataReady() {
 80019cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019ce:	4c0b      	ldr	r4, [pc, #44]	; (80019fc <_ZN6SdCard13waitDataReadyEv+0x30>)
    uint32_t timeout = System::ticks() + 1000;
    while (System::ticks() < timeout) {
        if (sendCommandWait(13, _cardInfo.rca << 16) == Success && (SDIO_RESP1 & 0x100) != 0) {
 80019d0:	4f0b      	ldr	r7, [pc, #44]	; (8001a00 <_ZN6SdCard13waitDataReadyEv+0x34>)
    uint32_t timeout = System::ticks() + 1000;
 80019d2:	6822      	ldr	r2, [r4, #0]
        if (sendCommandWait(13, _cardInfo.rca << 16) == Success && (SDIO_RESP1 & 0x100) != 0) {
 80019d4:	4e0b      	ldr	r6, [pc, #44]	; (8001a04 <_ZN6SdCard13waitDataReadyEv+0x38>)
    uint32_t timeout = System::ticks() + 1000;
 80019d6:	f502 757a 	add.w	r5, r2, #1000	; 0x3e8
    while (System::ticks() < timeout) {
 80019da:	6823      	ldr	r3, [r4, #0]
 80019dc:	42ab      	cmp	r3, r5
 80019de:	d20b      	bcs.n	80019f8 <_ZN6SdCard13waitDataReadyEv+0x2c>
        if (sendCommandWait(13, _cardInfo.rca << 16) == Success && (SDIO_RESP1 & 0x100) != 0) {
 80019e0:	8839      	ldrh	r1, [r7, #0]
 80019e2:	200d      	movs	r0, #13
 80019e4:	0409      	lsls	r1, r1, #16
 80019e6:	f7ff ff19 	bl	800181c <_ZN6SdCard15sendCommandWaitEmm>
 80019ea:	2800      	cmp	r0, #0
 80019ec:	d1f5      	bne.n	80019da <_ZN6SdCard13waitDataReadyEv+0xe>
 80019ee:	6830      	ldr	r0, [r6, #0]
 80019f0:	05c3      	lsls	r3, r0, #23
 80019f2:	d5f2      	bpl.n	80019da <_ZN6SdCard13waitDataReadyEv+0xe>
            return true;
 80019f4:	2001      	movs	r0, #1
        }
    }
    return false;
}
 80019f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return false;
 80019f8:	2000      	movs	r0, #0
 80019fa:	e7fc      	b.n	80019f6 <_ZN6SdCard13waitDataReadyEv+0x2a>
 80019fc:	200045f0 	.word	0x200045f0
 8001a00:	200045e8 	.word	0x200045e8
 8001a04:	40012c14 	.word	0x40012c14

08001a08 <_ZN6SdCard9availableEv>:
bool SdCard::available() {
 8001a08:	b510      	push	{r4, lr}
    if (_initialized) {
 8001a0a:	4c06      	ldr	r4, [pc, #24]	; (8001a24 <_ZN6SdCard9availableEv+0x1c>)
 8001a0c:	7823      	ldrb	r3, [r4, #0]
 8001a0e:	b113      	cbz	r3, 8001a16 <_ZN6SdCard9availableEv+0xe>
        _initialized = waitDataReady();
 8001a10:	f7ff ffdc 	bl	80019cc <_ZN6SdCard13waitDataReadyEv>
 8001a14:	7020      	strb	r0, [r4, #0]
    if (!_initialized) {
 8001a16:	7820      	ldrb	r0, [r4, #0]
 8001a18:	b910      	cbnz	r0, 8001a20 <_ZN6SdCard9availableEv+0x18>
        _initialized = initCard();
 8001a1a:	f7ff ff39 	bl	8001890 <_ZN6SdCard8initCardEv>
 8001a1e:	7020      	strb	r0, [r4, #0]
}
 8001a20:	7820      	ldrb	r0, [r4, #0]
 8001a22:	bd10      	pop	{r4, pc}
 8001a24:	200045e6 	.word	0x200045e6

08001a28 <_ZN6SdCard9readBlockEmPv>:

bool SdCard::readBlock(uint32_t address, void *buffer) {
    ASSERT(buffer >= (void *)0x20000000, "buffer not in SRAM");
 8001a28:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
bool SdCard::readBlock(uint32_t address, void *buffer) {
 8001a2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001a2e:	4604      	mov	r4, r0
 8001a30:	460f      	mov	r7, r1
    ASSERT(buffer >= (void *)0x20000000, "buffer not in SRAM");
 8001a32:	d203      	bcs.n	8001a3c <_ZN6SdCard9readBlockEmPv+0x14>
 8001a34:	484d      	ldr	r0, [pc, #308]	; (8001b6c <_ZN6SdCard9readBlockEmPv+0x144>)
 8001a36:	f7fe ff8b 	bl	8000950 <printf>
 8001a3a:	e7fe      	b.n	8001a3a <_ZN6SdCard9readBlockEmPv+0x12>
    // DBG("readBlock(address=%lu, buffer=%p)", address, buffer);
    if (!waitDataReady()) {
 8001a3c:	f7ff ffc6 	bl	80019cc <_ZN6SdCard13waitDataReadyEv>
 8001a40:	b910      	cbnz	r0, 8001a48 <_ZN6SdCard9readBlockEmPv+0x20>
        return false;
 8001a42:	2000      	movs	r0, #0
        // TODO maybe we'd better use interrupts
        // os::this_task::yield();
    }

    return true;
}
 8001a44:	b003      	add	sp, #12
 8001a46:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (!_cardInfo.ccs) {
 8001a48:	4b49      	ldr	r3, [pc, #292]	; (8001b70 <_ZN6SdCard9readBlockEmPv+0x148>)
 8001a4a:	7898      	ldrb	r0, [r3, #2]
 8001a4c:	b940      	cbnz	r0, 8001a60 <_ZN6SdCard9readBlockEmPv+0x38>
        if (sendCommandRetry(16, 512) != Success) {
 8001a4e:	2205      	movs	r2, #5
 8001a50:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a54:	2010      	movs	r0, #16
        address *= 512;
 8001a56:	0264      	lsls	r4, r4, #9
        if (sendCommandRetry(16, 512) != Success) {
 8001a58:	f7ff fee8 	bl	800182c <_ZN6SdCard16sendCommandRetryEmmi>
 8001a5c:	2800      	cmp	r0, #0
 8001a5e:	d1f0      	bne.n	8001a42 <_ZN6SdCard9readBlockEmPv+0x1a>
    SDIO_DCTRL = 0;
 8001a60:	4e44      	ldr	r6, [pc, #272]	; (8001b74 <_ZN6SdCard9readBlockEmPv+0x14c>)
    dma_stream_reset(DMA2, DMA_STREAM3);
 8001a62:	4845      	ldr	r0, [pc, #276]	; (8001b78 <_ZN6SdCard9readBlockEmPv+0x150>)
    SDIO_DCTRL = 0;
 8001a64:	2500      	movs	r5, #0
    dma_stream_reset(DMA2, DMA_STREAM3);
 8001a66:	2103      	movs	r1, #3
    SDIO_DCTRL = 0;
 8001a68:	6035      	str	r5, [r6, #0]
    dma_stream_reset(DMA2, DMA_STREAM3);
 8001a6a:	f001 fd25 	bl	80034b8 <dma_stream_reset>
    dma_channel_select(DMA2, DMA_STREAM3, DMA_SxCR_CHSEL_4);
 8001a6e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a72:	2103      	movs	r1, #3
 8001a74:	4840      	ldr	r0, [pc, #256]	; (8001b78 <_ZN6SdCard9readBlockEmPv+0x150>)
 8001a76:	f001 fda0 	bl	80035ba <dma_channel_select>
    dma_set_memory_size(DMA2, DMA_STREAM3, DMA_SxCR_MSIZE_32BIT);
 8001a7a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a7e:	2103      	movs	r1, #3
 8001a80:	483d      	ldr	r0, [pc, #244]	; (8001b78 <_ZN6SdCard9readBlockEmPv+0x150>)
 8001a82:	f001 fd70 	bl	8003566 <dma_set_memory_size>
    dma_set_peripheral_size(DMA2, DMA_STREAM3, DMA_SxCR_PSIZE_32BIT);
 8001a86:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a8a:	2103      	movs	r1, #3
 8001a8c:	483a      	ldr	r0, [pc, #232]	; (8001b78 <_ZN6SdCard9readBlockEmPv+0x150>)
 8001a8e:	f001 fd76 	bl	800357e <dma_set_peripheral_size>
    dma_enable_memory_increment_mode(DMA2, DMA_STREAM3);
 8001a92:	2103      	movs	r1, #3
 8001a94:	4838      	ldr	r0, [pc, #224]	; (8001b78 <_ZN6SdCard9readBlockEmPv+0x150>)
 8001a96:	f001 fd7e 	bl	8003596 <dma_enable_memory_increment_mode>
    dma_disable_peripheral_increment_mode(DMA2, DMA_STREAM3);
 8001a9a:	2103      	movs	r1, #3
 8001a9c:	4836      	ldr	r0, [pc, #216]	; (8001b78 <_ZN6SdCard9readBlockEmPv+0x150>)
 8001a9e:	f001 fd83 	bl	80035a8 <dma_disable_peripheral_increment_mode>
    dma_set_transfer_mode(DMA2, DMA_STREAM3, DMA_SxCR_DIR_PERIPHERAL_TO_MEM);
 8001aa2:	462a      	mov	r2, r5
 8001aa4:	2103      	movs	r1, #3
 8001aa6:	4834      	ldr	r0, [pc, #208]	; (8001b78 <_ZN6SdCard9readBlockEmPv+0x150>)
 8001aa8:	f001 fd40 	bl	800352c <dma_set_transfer_mode>
    dma_set_peripheral_address(DMA2, DMA_STREAM3, (uint32_t)&SDIO_FIFO);
 8001aac:	4a33      	ldr	r2, [pc, #204]	; (8001b7c <_ZN6SdCard9readBlockEmPv+0x154>)
 8001aae:	4832      	ldr	r0, [pc, #200]	; (8001b78 <_ZN6SdCard9readBlockEmPv+0x150>)
 8001ab0:	2103      	movs	r1, #3
 8001ab2:	f001 fdcc 	bl	800364e <dma_set_peripheral_address>
    dma_set_memory_address(DMA2, DMA_STREAM3, (uint32_t)buffer);
 8001ab6:	463a      	mov	r2, r7
 8001ab8:	2103      	movs	r1, #3
 8001aba:	482f      	ldr	r0, [pc, #188]	; (8001b78 <_ZN6SdCard9readBlockEmPv+0x150>)
 8001abc:	f001 fdcf 	bl	800365e <dma_set_memory_address>
    dma_set_number_of_data(DMA2, DMA_STREAM3, 0);
 8001ac0:	462a      	mov	r2, r5
 8001ac2:	2103      	movs	r1, #3
 8001ac4:	482c      	ldr	r0, [pc, #176]	; (8001b78 <_ZN6SdCard9readBlockEmPv+0x150>)
 8001ac6:	f001 fdd7 	bl	8003678 <dma_set_number_of_data>
    dma_set_priority(DMA2, DMA_STREAM3, DMA_SxCR_PL_VERY_HIGH);
 8001aca:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001ace:	2103      	movs	r1, #3
 8001ad0:	4829      	ldr	r0, [pc, #164]	; (8001b78 <_ZN6SdCard9readBlockEmPv+0x150>)
 8001ad2:	f001 fd3c 	bl	800354e <dma_set_priority>
    dma_set_memory_burst(DMA2, DMA_STREAM3, DMA_SxCR_MBURST_INCR4);
 8001ad6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001ada:	2103      	movs	r1, #3
 8001adc:	4826      	ldr	r0, [pc, #152]	; (8001b78 <_ZN6SdCard9readBlockEmPv+0x150>)
 8001ade:	f001 fd74 	bl	80035ca <dma_set_memory_burst>
    dma_set_peripheral_burst(DMA2, DMA_STREAM3, DMA_SxCR_PBURST_INCR4);
 8001ae2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001ae6:	2103      	movs	r1, #3
 8001ae8:	4823      	ldr	r0, [pc, #140]	; (8001b78 <_ZN6SdCard9readBlockEmPv+0x150>)
 8001aea:	f001 fd78 	bl	80035de <dma_set_peripheral_burst>
    dma_disable_double_buffer_mode(DMA2, DMA_STREAM3);
 8001aee:	2103      	movs	r1, #3
 8001af0:	4821      	ldr	r0, [pc, #132]	; (8001b78 <_ZN6SdCard9readBlockEmPv+0x150>)
 8001af2:	f001 fd7e 	bl	80035f2 <dma_disable_double_buffer_mode>
    dma_enable_fifo_mode(DMA2, DMA_STREAM3);
 8001af6:	2103      	movs	r1, #3
 8001af8:	481f      	ldr	r0, [pc, #124]	; (8001b78 <_ZN6SdCard9readBlockEmPv+0x150>)
 8001afa:	f001 fd8c 	bl	8003616 <dma_enable_fifo_mode>
    dma_set_fifo_threshold(DMA2, DMA_STREAM3, DMA_SxFCR_FTH_4_4_FULL);
 8001afe:	2203      	movs	r2, #3
 8001b00:	4611      	mov	r1, r2
 8001b02:	481d      	ldr	r0, [pc, #116]	; (8001b78 <_ZN6SdCard9readBlockEmPv+0x150>)
 8001b04:	f001 fd90 	bl	8003628 <dma_set_fifo_threshold>
    dma_set_peripheral_flow_control(DMA2, DMA_STREAM3);
 8001b08:	2103      	movs	r1, #3
 8001b0a:	481b      	ldr	r0, [pc, #108]	; (8001b78 <_ZN6SdCard9readBlockEmPv+0x150>)
 8001b0c:	f001 fd7a 	bl	8003604 <dma_set_peripheral_flow_control>
    dma_enable_stream(DMA2, DMA_STREAM3);
 8001b10:	2103      	movs	r1, #3
 8001b12:	4819      	ldr	r0, [pc, #100]	; (8001b78 <_ZN6SdCard9readBlockEmPv+0x150>)
 8001b14:	f001 fd92 	bl	800363c <dma_enable_stream>
    SDIO_DTIMER = 2400000;
 8001b18:	4919      	ldr	r1, [pc, #100]	; (8001b80 <_ZN6SdCard9readBlockEmPv+0x158>)
 8001b1a:	4a1a      	ldr	r2, [pc, #104]	; (8001b84 <_ZN6SdCard9readBlockEmPv+0x15c>)
 8001b1c:	600a      	str	r2, [r1, #0]
    SDIO_DLEN = 512;
 8001b1e:	f44f 7700 	mov.w	r7, #512	; 0x200
    SDIO_DCTRL = SDIO_DCTRL_DBLOCKSIZE_9 | SDIO_DCTRL_DMAEN |
 8001b22:	239b      	movs	r3, #155	; 0x9b
    SDIO_DLEN = 512;
 8001b24:	604f      	str	r7, [r1, #4]
    if (sendCommandWait(17, address) != Success) {
 8001b26:	2011      	movs	r0, #17
    SDIO_DCTRL = SDIO_DCTRL_DBLOCKSIZE_9 | SDIO_DCTRL_DMAEN |
 8001b28:	6033      	str	r3, [r6, #0]
    if (sendCommandWait(17, address) != Success) {
 8001b2a:	4621      	mov	r1, r4
 8001b2c:	f7ff fe76 	bl	800181c <_ZN6SdCard15sendCommandWaitEmm>
 8001b30:	2800      	cmp	r0, #0
 8001b32:	d186      	bne.n	8001a42 <_ZN6SdCard9readBlockEmPv+0x1a>
    while (!dma_get_interrupt_flag(DMA2, DMA_STREAM3, DMA_TCIF)) {
 8001b34:	4c10      	ldr	r4, [pc, #64]	; (8001b78 <_ZN6SdCard9readBlockEmPv+0x150>)
 8001b36:	2220      	movs	r2, #32
 8001b38:	2103      	movs	r1, #3
 8001b3a:	4620      	mov	r0, r4
 8001b3c:	f001 fce2 	bl	8003504 <dma_get_interrupt_flag>
 8001b40:	2800      	cmp	r0, #0
 8001b42:	d0f8      	beq.n	8001b36 <_ZN6SdCard9readBlockEmPv+0x10e>
        volatile uint32_t result = SDIO_STA;
 8001b44:	4e10      	ldr	r6, [pc, #64]	; (8001b88 <_ZN6SdCard9readBlockEmPv+0x160>)
        if (result & (DATA_RX_SUCCESS_FLAGS | DATA_RX_ERROR_FLAGS)) {
 8001b46:	f240 752a 	movw	r5, #1834	; 0x72a
            if (result & DATA_RX_ERROR_FLAGS) {
 8001b4a:	f240 212a 	movw	r1, #554	; 0x22a
        volatile uint32_t result = SDIO_STA;
 8001b4e:	6832      	ldr	r2, [r6, #0]
 8001b50:	9201      	str	r2, [sp, #4]
        if (result & (DATA_RX_SUCCESS_FLAGS | DATA_RX_ERROR_FLAGS)) {
 8001b52:	9f01      	ldr	r7, [sp, #4]
 8001b54:	422f      	tst	r7, r5
 8001b56:	d0fa      	beq.n	8001b4e <_ZN6SdCard9readBlockEmPv+0x126>
            if (result & DATA_RX_ERROR_FLAGS) {
 8001b58:	9b01      	ldr	r3, [sp, #4]
 8001b5a:	420b      	tst	r3, r1
 8001b5c:	f47f af71 	bne.w	8001a42 <_ZN6SdCard9readBlockEmPv+0x1a>
            } else if (result & DATA_RX_SUCCESS_FLAGS) {
 8001b60:	9c01      	ldr	r4, [sp, #4]
 8001b62:	f414 6fa0 	tst.w	r4, #1280	; 0x500
 8001b66:	d0f2      	beq.n	8001b4e <_ZN6SdCard9readBlockEmPv+0x126>
 8001b68:	e76c      	b.n	8001a44 <_ZN6SdCard9readBlockEmPv+0x1c>
 8001b6a:	bf00      	nop
 8001b6c:	0800514c 	.word	0x0800514c
 8001b70:	200045e8 	.word	0x200045e8
 8001b74:	40012c2c 	.word	0x40012c2c
 8001b78:	40026400 	.word	0x40026400
 8001b7c:	40012c80 	.word	0x40012c80
 8001b80:	40012c24 	.word	0x40012c24
 8001b84:	00249f00 	.word	0x00249f00
 8001b88:	40012c34 	.word	0x40012c34

08001b8c <_ZN6SdCard4readEPhmh>:
bool SdCard::read(uint8_t *buf, uint32_t sector, uint8_t count) {
 8001b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b8e:	4605      	mov	r5, r0
 8001b90:	460e      	mov	r6, r1
 8001b92:	4617      	mov	r7, r2
    for (uint32_t i = 0; i < count; ++i) {
 8001b94:	2400      	movs	r4, #0
 8001b96:	42a7      	cmp	r7, r4
 8001b98:	eb05 2144 	add.w	r1, r5, r4, lsl #9
 8001b9c:	d905      	bls.n	8001baa <_ZN6SdCard4readEPhmh+0x1e>
        if (!readBlock(sector + i, data)) {
 8001b9e:	19a0      	adds	r0, r4, r6
 8001ba0:	f7ff ff42 	bl	8001a28 <_ZN6SdCard9readBlockEmPv>
 8001ba4:	b110      	cbz	r0, 8001bac <_ZN6SdCard4readEPhmh+0x20>
    for (uint32_t i = 0; i < count; ++i) {
 8001ba6:	3401      	adds	r4, #1
 8001ba8:	e7f5      	b.n	8001b96 <_ZN6SdCard4readEPhmh+0xa>
    return true;
 8001baa:	2001      	movs	r0, #1
}
 8001bac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001bb0 <_ZN6System4initEv>:

uint32_t System::_ticks;

void System::init() {
    // Base board frequency is 168MHz
    rcc_clock_setup_hse_3v3(&rcc_hse_8mhz_3v3[RCC_CLOCK_3V3_168MHZ]);
 8001bb0:	4801      	ldr	r0, [pc, #4]	; (8001bb8 <_ZN6System4initEv+0x8>)
 8001bb2:	f001 bc2b 	b.w	800340c <rcc_clock_setup_hse_3v3>
 8001bb6:	bf00      	nop
 8001bb8:	0800535c 	.word	0x0800535c

08001bbc <_ZN6System6deinitEv>:
    // apb1_frequency = 42000000
    // apb2_frequency = 84000000
}

void System::deinit() {
}
 8001bbc:	4770      	bx	lr

08001bbe <_ZN6System5resetEv>:

void System::reset() {
    iwdg_start();
 8001bbe:	f001 bdd3 	b.w	8003768 <iwdg_start>
	...

08001bc4 <_ZN6System12startSysTickEv>:
}

void System::startSysTick() {
 8001bc4:	b508      	push	{r3, lr}
    // 1ms clock rate
    systick_set_reload(CONFIG_CPU_FREQUENCY / CONFIG_TICK_FREQUENCY);
 8001bc6:	4806      	ldr	r0, [pc, #24]	; (8001be0 <_ZN6System12startSysTickEv+0x1c>)
 8001bc8:	f001 ff6c 	bl	8003aa4 <systick_set_reload>
    systick_set_clocksource(STK_CSR_CLKSOURCE_AHB);
 8001bcc:	2004      	movs	r0, #4
 8001bce:	f001 ff71 	bl	8003ab4 <systick_set_clocksource>
    systick_interrupt_enable();
 8001bd2:	f001 ff7b 	bl	8003acc <systick_interrupt_enable>
    systick_counter_enable();
}
 8001bd6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    systick_counter_enable();
 8001bda:	f001 bf87 	b.w	8003aec <systick_counter_enable>
 8001bde:	bf00      	nop
 8001be0:	00029040 	.word	0x00029040

08001be4 <_ZN6System11stopSysTickEv>:

void System::stopSysTick() {
 8001be4:	b508      	push	{r3, lr}
    systick_interrupt_disable();
 8001be6:	f001 ff79 	bl	8003adc <systick_interrupt_disable>
    systick_counter_disable();
}
 8001bea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    systick_counter_disable();
 8001bee:	f001 bf85 	b.w	8003afc <systick_counter_disable>
	...

08001bf4 <_ZN10UpdateFile6rewindEPcj>:
    }

    return rewind(errorStr, errorLen);
}

bool UpdateFile::rewind(char *errorStr, size_t errorLen) {
 8001bf4:	b538      	push	{r3, r4, r5, lr}
 8001bf6:	4604      	mov	r4, r0
 8001bf8:	460d      	mov	r5, r1
    FRESULT result = f_lseek(&fil, 0);
 8001bfa:	4807      	ldr	r0, [pc, #28]	; (8001c18 <_ZN10UpdateFile6rewindEPcj+0x24>)
 8001bfc:	2100      	movs	r1, #0
 8001bfe:	f001 faa4 	bl	800314a <f_lseek>
    if (result != FR_OK) {
 8001c02:	4603      	mov	r3, r0
 8001c04:	b130      	cbz	r0, 8001c14 <_ZN10UpdateFile6rewindEPcj+0x20>
        snprintf(errorStr, errorLen, "failed to seek start (result: %d)", result);
 8001c06:	4a05      	ldr	r2, [pc, #20]	; (8001c1c <_ZN10UpdateFile6rewindEPcj+0x28>)
 8001c08:	4629      	mov	r1, r5
 8001c0a:	4620      	mov	r0, r4
 8001c0c:	f000 fe26 	bl	800285c <stbsp_snprintf>
        return false;
 8001c10:	2000      	movs	r0, #0
    }

    return true;
}
 8001c12:	bd38      	pop	{r3, r4, r5, pc}
    return true;
 8001c14:	2001      	movs	r0, #1
 8001c16:	e7fc      	b.n	8001c12 <_ZN10UpdateFile6rewindEPcj+0x1e>
 8001c18:	2000481c 	.word	0x2000481c
 8001c1c:	080052bf 	.word	0x080052bf

08001c20 <_ZN10UpdateFile4openER10VersionTagRjPhPcj>:
bool UpdateFile::open(VersionTag &version, size_t &size, uint8_t md5[16], char *errorStr, size_t errorLen) {
 8001c20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001c24:	4680      	mov	r8, r0
 8001c26:	b089      	sub	sp, #36	; 0x24
 8001c28:	460e      	mov	r6, r1
 8001c2a:	4617      	mov	r7, r2
    result = f_mount(&fs, "", 1);
 8001c2c:	492b      	ldr	r1, [pc, #172]	; (8001cdc <_ZN10UpdateFile4openER10VersionTagRjPhPcj+0xbc>)
 8001c2e:	482c      	ldr	r0, [pc, #176]	; (8001ce0 <_ZN10UpdateFile4openER10VersionTagRjPhPcj+0xc0>)
 8001c30:	2201      	movs	r2, #1
bool UpdateFile::open(VersionTag &version, size_t &size, uint8_t md5[16], char *errorStr, size_t errorLen) {
 8001c32:	461d      	mov	r5, r3
    result = f_mount(&fs, "", 1);
 8001c34:	f001 f996 	bl	8002f64 <f_mount>
    if (result != FR_OK) {
 8001c38:	b148      	cbz	r0, 8001c4e <_ZN10UpdateFile4openER10VersionTagRjPhPcj+0x2e>
        snprintf(errorStr, errorLen, "failed to mount (error: %d)", result);
 8001c3a:	4a2a      	ldr	r2, [pc, #168]	; (8001ce4 <_ZN10UpdateFile4openER10VersionTagRjPhPcj+0xc4>)
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	9910      	ldr	r1, [sp, #64]	; 0x40
 8001c40:	4628      	mov	r0, r5
 8001c42:	f000 fe0b 	bl	800285c <stbsp_snprintf>
        return false;
 8001c46:	2000      	movs	r0, #0
}
 8001c48:	b009      	add	sp, #36	; 0x24
 8001c4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    result = f_open(&fil, CONFIG_UPDATE_FILENAME, FA_READ);
 8001c4e:	2201      	movs	r2, #1
 8001c50:	4925      	ldr	r1, [pc, #148]	; (8001ce8 <_ZN10UpdateFile4openER10VersionTagRjPhPcj+0xc8>)
 8001c52:	4826      	ldr	r0, [pc, #152]	; (8001cec <_ZN10UpdateFile4openER10VersionTagRjPhPcj+0xcc>)
 8001c54:	f001 f9aa 	bl	8002fac <f_open>
    if (result != FR_OK) {
 8001c58:	b110      	cbz	r0, 8001c60 <_ZN10UpdateFile4openER10VersionTagRjPhPcj+0x40>
        snprintf(errorStr, errorLen, "failed to open file (error: %d)", result);
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	4a24      	ldr	r2, [pc, #144]	; (8001cf0 <_ZN10UpdateFile4openER10VersionTagRjPhPcj+0xd0>)
 8001c5e:	e7ee      	b.n	8001c3e <_ZN10UpdateFile4openER10VersionTagRjPhPcj+0x1e>
    result = f_stat(CONFIG_UPDATE_FILENAME, &info);
 8001c60:	a902      	add	r1, sp, #8
 8001c62:	4821      	ldr	r0, [pc, #132]	; (8001ce8 <_ZN10UpdateFile4openER10VersionTagRjPhPcj+0xc8>)
 8001c64:	f001 fad8 	bl	8003218 <f_stat>
    if (result != FR_OK) {
 8001c68:	b110      	cbz	r0, 8001c70 <_ZN10UpdateFile4openER10VersionTagRjPhPcj+0x50>
        snprintf(errorStr, errorLen, "failed to stat file (error: %d)", result);
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	4a21      	ldr	r2, [pc, #132]	; (8001cf4 <_ZN10UpdateFile4openER10VersionTagRjPhPcj+0xd4>)
 8001c6e:	e7e6      	b.n	8001c3e <_ZN10UpdateFile4openER10VersionTagRjPhPcj+0x1e>
    size = info.fsize - 16; // md5 in hex at the end of the file
 8001c70:	9b02      	ldr	r3, [sp, #8]
    result = f_lseek(&fil, CONFIG_VERSION_TAG_OFFSET);
 8001c72:	481e      	ldr	r0, [pc, #120]	; (8001cec <_ZN10UpdateFile4openER10VersionTagRjPhPcj+0xcc>)
    size = info.fsize - 16; // md5 in hex at the end of the file
 8001c74:	f1a3 0110 	sub.w	r1, r3, #16
 8001c78:	6031      	str	r1, [r6, #0]
    result = f_lseek(&fil, CONFIG_VERSION_TAG_OFFSET);
 8001c7a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c7e:	f001 fa64 	bl	800314a <f_lseek>
    if (result != FR_OK) {
 8001c82:	4603      	mov	r3, r0
 8001c84:	b108      	cbz	r0, 8001c8a <_ZN10UpdateFile4openER10VersionTagRjPhPcj+0x6a>
        snprintf(errorStr, errorLen, "failed to seek version (result: %d)", result);
 8001c86:	4a1c      	ldr	r2, [pc, #112]	; (8001cf8 <_ZN10UpdateFile4openER10VersionTagRjPhPcj+0xd8>)
 8001c88:	e7d9      	b.n	8001c3e <_ZN10UpdateFile4openER10VersionTagRjPhPcj+0x1e>
    result = f_read(&fil, &version, sizeof(version), &bytesRead);
 8001c8a:	2220      	movs	r2, #32
 8001c8c:	ab01      	add	r3, sp, #4
 8001c8e:	4641      	mov	r1, r8
 8001c90:	4816      	ldr	r0, [pc, #88]	; (8001cec <_ZN10UpdateFile4openER10VersionTagRjPhPcj+0xcc>)
 8001c92:	f001 f9cc 	bl	800302e <f_read>
    if (result != FR_OK || bytesRead != sizeof(VersionTag)) {
 8001c96:	4602      	mov	r2, r0
 8001c98:	b910      	cbnz	r0, 8001ca0 <_ZN10UpdateFile4openER10VersionTagRjPhPcj+0x80>
 8001c9a:	9c01      	ldr	r4, [sp, #4]
 8001c9c:	2c20      	cmp	r4, #32
 8001c9e:	d002      	beq.n	8001ca6 <_ZN10UpdateFile4openER10VersionTagRjPhPcj+0x86>
        snprintf(errorStr, errorLen, "failed to read version tag (error: %d)", result);
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	4a16      	ldr	r2, [pc, #88]	; (8001cfc <_ZN10UpdateFile4openER10VersionTagRjPhPcj+0xdc>)
 8001ca4:	e7cb      	b.n	8001c3e <_ZN10UpdateFile4openER10VersionTagRjPhPcj+0x1e>
    result = f_lseek(&fil, size);
 8001ca6:	6831      	ldr	r1, [r6, #0]
 8001ca8:	4810      	ldr	r0, [pc, #64]	; (8001cec <_ZN10UpdateFile4openER10VersionTagRjPhPcj+0xcc>)
 8001caa:	f001 fa4e 	bl	800314a <f_lseek>
    if (result != FR_OK) {
 8001cae:	4603      	mov	r3, r0
 8001cb0:	b108      	cbz	r0, 8001cb6 <_ZN10UpdateFile4openER10VersionTagRjPhPcj+0x96>
        snprintf(errorStr, errorLen, "failed to seek checksum (result: %d)", result);
 8001cb2:	4a13      	ldr	r2, [pc, #76]	; (8001d00 <_ZN10UpdateFile4openER10VersionTagRjPhPcj+0xe0>)
 8001cb4:	e7c3      	b.n	8001c3e <_ZN10UpdateFile4openER10VersionTagRjPhPcj+0x1e>
    result = f_read(&fil, md5, 16, &bytesRead);
 8001cb6:	ab01      	add	r3, sp, #4
 8001cb8:	2210      	movs	r2, #16
 8001cba:	4639      	mov	r1, r7
 8001cbc:	480b      	ldr	r0, [pc, #44]	; (8001cec <_ZN10UpdateFile4openER10VersionTagRjPhPcj+0xcc>)
 8001cbe:	f001 f9b6 	bl	800302e <f_read>
    if (result != FR_OK || bytesRead != 16) {
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	b910      	cbnz	r0, 8001ccc <_ZN10UpdateFile4openER10VersionTagRjPhPcj+0xac>
 8001cc6:	9e01      	ldr	r6, [sp, #4]
 8001cc8:	2e10      	cmp	r6, #16
 8001cca:	d001      	beq.n	8001cd0 <_ZN10UpdateFile4openER10VersionTagRjPhPcj+0xb0>
        snprintf(errorStr, errorLen, "failed to read checksum (error: %d)", result);
 8001ccc:	4a0d      	ldr	r2, [pc, #52]	; (8001d04 <_ZN10UpdateFile4openER10VersionTagRjPhPcj+0xe4>)
 8001cce:	e7b6      	b.n	8001c3e <_ZN10UpdateFile4openER10VersionTagRjPhPcj+0x1e>
    return rewind(errorStr, errorLen);
 8001cd0:	9910      	ldr	r1, [sp, #64]	; 0x40
 8001cd2:	4628      	mov	r0, r5
 8001cd4:	f7ff ff8e 	bl	8001bf4 <_ZN10UpdateFile6rewindEPcj>
 8001cd8:	e7b6      	b.n	8001c48 <_ZN10UpdateFile4openER10VersionTagRjPhPcj+0x28>
 8001cda:	bf00      	nop
 8001cdc:	08005120 	.word	0x08005120
 8001ce0:	200045f4 	.word	0x200045f4
 8001ce4:	080051a4 	.word	0x080051a4
 8001ce8:	080051c0 	.word	0x080051c0
 8001cec:	2000481c 	.word	0x2000481c
 8001cf0:	080051cb 	.word	0x080051cb
 8001cf4:	080051eb 	.word	0x080051eb
 8001cf8:	0800520b 	.word	0x0800520b
 8001cfc:	0800522f 	.word	0x0800522f
 8001d00:	08005256 	.word	0x08005256
 8001d04:	0800527b 	.word	0x0800527b

08001d08 <_ZN10UpdateFile4readEPvjPcj>:

bool UpdateFile::read(void *readBuf, size_t readLen, char *errorStr, size_t errorLen) {
 8001d08:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    uint8_t *readPos = reinterpret_cast<uint8_t *>(readBuf);
    while (readLen > 0) {
        size_t bytesRead;
        FRESULT result = f_read(&fil, readPos, readLen, &bytesRead);
 8001d0c:	f8df 8040 	ldr.w	r8, [pc, #64]	; 8001d50 <_ZN10UpdateFile4readEPvjPcj+0x48>
bool UpdateFile::read(void *readBuf, size_t readLen, char *errorStr, size_t errorLen) {
 8001d10:	4605      	mov	r5, r0
 8001d12:	460c      	mov	r4, r1
 8001d14:	4616      	mov	r6, r2
 8001d16:	461f      	mov	r7, r3
    while (readLen > 0) {
 8001d18:	b1ac      	cbz	r4, 8001d46 <_ZN10UpdateFile4readEPvjPcj+0x3e>
        FRESULT result = f_read(&fil, readPos, readLen, &bytesRead);
 8001d1a:	ab01      	add	r3, sp, #4
 8001d1c:	4622      	mov	r2, r4
 8001d1e:	4629      	mov	r1, r5
 8001d20:	4640      	mov	r0, r8
 8001d22:	f001 f984 	bl	800302e <f_read>
        if (result != FR_OK || bytesRead == 0) {
 8001d26:	4603      	mov	r3, r0
 8001d28:	b908      	cbnz	r0, 8001d2e <_ZN10UpdateFile4readEPvjPcj+0x26>
 8001d2a:	9a01      	ldr	r2, [sp, #4]
 8001d2c:	b942      	cbnz	r2, 8001d40 <_ZN10UpdateFile4readEPvjPcj+0x38>
            snprintf(errorStr, errorLen, "failed to read data (error: %d)", result);
 8001d2e:	4a07      	ldr	r2, [pc, #28]	; (8001d4c <_ZN10UpdateFile4readEPvjPcj+0x44>)
 8001d30:	4639      	mov	r1, r7
 8001d32:	4630      	mov	r0, r6
 8001d34:	f000 fd92 	bl	800285c <stbsp_snprintf>
            return false;
 8001d38:	2000      	movs	r0, #0
        readPos += bytesRead;
        readLen -= bytesRead;
    }

    return true;
}
 8001d3a:	b002      	add	sp, #8
 8001d3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        readPos += bytesRead;
 8001d40:	4415      	add	r5, r2
        readLen -= bytesRead;
 8001d42:	1aa4      	subs	r4, r4, r2
    while (readLen > 0) {
 8001d44:	e7e8      	b.n	8001d18 <_ZN10UpdateFile4readEPvjPcj+0x10>
    return true;
 8001d46:	2001      	movs	r0, #1
 8001d48:	e7f7      	b.n	8001d3a <_ZN10UpdateFile4readEPvjPcj+0x32>
 8001d4a:	bf00      	nop
 8001d4c:	0800529f 	.word	0x0800529f
 8001d50:	2000481c 	.word	0x2000481c

08001d54 <stbsp__clamp_callback>:
   int count;
   char tmp[STB_SPRINTF_MIN];
} stbsp__context;

static char *stbsp__clamp_callback(char *buf, void *user, int len)
{
 8001d54:	684b      	ldr	r3, [r1, #4]
 8001d56:	429a      	cmp	r2, r3
 8001d58:	bfa8      	it	ge
 8001d5a:	461a      	movge	r2, r3
 8001d5c:	b530      	push	{r4, r5, lr}
   stbsp__context *c = (stbsp__context *)user;

   if (len > c->count)
      len = c->count;

   if (len) {
 8001d5e:	b18a      	cbz	r2, 8001d84 <stbsp__clamp_callback+0x30>
      if (buf != c->buf) {
 8001d60:	680d      	ldr	r5, [r1, #0]
 8001d62:	4285      	cmp	r5, r0
 8001d64:	d008      	beq.n	8001d78 <stbsp__clamp_callback+0x24>
         char *s, *d, *se;
         d = c->buf;
         s = buf;
         se = buf + len;
 8001d66:	1884      	adds	r4, r0, r2
 8001d68:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
         do {
            *d++ = *s++;
 8001d6c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8001d70:	f80c 3f01 	strb.w	r3, [ip, #1]!
         } while (s < se);
 8001d74:	4284      	cmp	r4, r0
 8001d76:	d8f9      	bhi.n	8001d6c <stbsp__clamp_callback+0x18>
      }
      c->buf += len;
 8001d78:	680d      	ldr	r5, [r1, #0]
      c->count -= len;
 8001d7a:	684c      	ldr	r4, [r1, #4]
      c->buf += len;
 8001d7c:	4415      	add	r5, r2
      c->count -= len;
 8001d7e:	1aa2      	subs	r2, r4, r2
      c->buf += len;
 8001d80:	600d      	str	r5, [r1, #0]
      c->count -= len;
 8001d82:	604a      	str	r2, [r1, #4]
   }

   if (c->count <= 0)
 8001d84:	684b      	ldr	r3, [r1, #4]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	dd05      	ble.n	8001d96 <stbsp__clamp_callback+0x42>
      return 0;
   return (c->count >= STB_SPRINTF_MIN) ? c->buf : c->tmp; // go direct into buffer if you can
 8001d8a:	2b7f      	cmp	r3, #127	; 0x7f
 8001d8c:	bfcc      	ite	gt
 8001d8e:	6808      	ldrgt	r0, [r1, #0]
 8001d90:	f101 0008 	addle.w	r0, r1, #8
}
 8001d94:	bd30      	pop	{r4, r5, pc}
      return 0;
 8001d96:	2000      	movs	r0, #0
 8001d98:	e7fc      	b.n	8001d94 <stbsp__clamp_callback+0x40>
 8001d9a:	0000      	movs	r0, r0
 8001d9c:	0000      	movs	r0, r0
	...

08001da0 <stbsp_vsprintfcb>:
{
 8001da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001da4:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 8001da8:	461d      	mov	r5, r3
 8001daa:	f8dd b260 	ldr.w	fp, [sp, #608]	; 0x260
 8001dae:	9000      	str	r0, [sp, #0]
   int tlen = 0;
 8001db0:	2300      	movs	r3, #0
{
 8001db2:	9105      	str	r1, [sp, #20]
 8001db4:	4614      	mov	r4, r2
            *bf++ = f[0];
 8001db6:	4616      	mov	r6, r2
   int tlen = 0;
 8001db8:	9304      	str	r3, [sp, #16]
         while (((stbsp__uintptr)f) & 3) {
 8001dba:	07a9      	lsls	r1, r5, #30
 8001dbc:	462a      	mov	r2, r5
 8001dbe:	d11b      	bne.n	8001df8 <stbsp_vsprintfcb+0x58>
               if ((STB_SPRINTF_MIN - (int)(bf - buf)) < 4)
 8001dc0:	f106 0780 	add.w	r7, r6, #128	; 0x80
 8001dc4:	4615      	mov	r5, r2
            v = *(stbsp__uint32 *)f;
 8001dc6:	f852 3b04 	ldr.w	r3, [r2], #4
            c = (~v) & 0x80808080;
 8001dca:	43d9      	mvns	r1, r3
            if (((v ^ 0x25252525) - 0x01010101) & c)
 8001dcc:	f083 3025 	eor.w	r0, r3, #623191333	; 0x25252525
            c = (~v) & 0x80808080;
 8001dd0:	f001 3880 	and.w	r8, r1, #2155905152	; 0x80808080
            if (((v ^ 0x25252525) - 0x01010101) & c)
 8001dd4:	f1a0 3101 	sub.w	r1, r0, #16843009	; 0x1010101
 8001dd8:	ea11 0f08 	tst.w	r1, r8
 8001ddc:	d10c      	bne.n	8001df8 <stbsp_vsprintfcb+0x58>
            if ((v - 0x01010101) & c)
 8001dde:	f1a3 3901 	sub.w	r9, r3, #16843009	; 0x1010101
 8001de2:	ea19 0f08 	tst.w	r9, r8
 8001de6:	d10a      	bne.n	8001dfe <stbsp_vsprintfcb+0x5e>
            if (callback)
 8001de8:	9800      	ldr	r0, [sp, #0]
 8001dea:	b110      	cbz	r0, 8001df2 <stbsp_vsprintfcb+0x52>
               if ((STB_SPRINTF_MIN - (int)(bf - buf)) < 4)
 8001dec:	1b39      	subs	r1, r7, r4
 8001dee:	2903      	cmp	r1, #3
 8001df0:	dd02      	ble.n	8001df8 <stbsp_vsprintfcb+0x58>
            *(stbsp__uint32 *)bf = v;
 8001df2:	f844 3b04 	str.w	r3, [r4], #4
         for (;;) {
 8001df6:	e7e5      	b.n	8001dc4 <stbsp_vsprintfcb+0x24>
            if (f[0] == '%')
 8001df8:	782a      	ldrb	r2, [r5, #0]
 8001dfa:	2a25      	cmp	r2, #37	; 0x25
 8001dfc:	d019      	beq.n	8001e32 <stbsp_vsprintfcb+0x92>
            if (f[0] == 0)
 8001dfe:	782f      	ldrb	r7, [r5, #0]
 8001e00:	2f00      	cmp	r7, #0
 8001e02:	f000 84f3 	beq.w	80027ec <stbsp_vsprintfcb+0xa4c>
            stbsp__chk_cb_buf(1);
 8001e06:	9b00      	ldr	r3, [sp, #0]
 8001e08:	b173      	cbz	r3, 8001e28 <stbsp_vsprintfcb+0x88>
 8001e0a:	1ba2      	subs	r2, r4, r6
 8001e0c:	2a7e      	cmp	r2, #126	; 0x7e
 8001e0e:	dd0b      	ble.n	8001e28 <stbsp_vsprintfcb+0x88>
 8001e10:	9c04      	ldr	r4, [sp, #16]
 8001e12:	9905      	ldr	r1, [sp, #20]
 8001e14:	4414      	add	r4, r2
 8001e16:	4630      	mov	r0, r6
 8001e18:	9e00      	ldr	r6, [sp, #0]
 8001e1a:	9404      	str	r4, [sp, #16]
 8001e1c:	47b0      	blx	r6
 8001e1e:	4606      	mov	r6, r0
done:
 8001e20:	4604      	mov	r4, r0
            stbsp__chk_cb_buf(1);
 8001e22:	2800      	cmp	r0, #0
 8001e24:	f000 84db 	beq.w	80027de <stbsp_vsprintfcb+0xa3e>
            *bf++ = f[0];
 8001e28:	f815 0b01 	ldrb.w	r0, [r5], #1
 8001e2c:	7020      	strb	r0, [r4, #0]
 8001e2e:	3401      	adds	r4, #1
 8001e30:	e7c3      	b.n	8001dba <stbsp_vsprintfcb+0x1a>
      ++f;
 8001e32:	1c68      	adds	r0, r5, #1
      fl = 0;
 8001e34:	2500      	movs	r5, #0
 8001e36:	4681      	mov	r9, r0
 8001e38:	3001      	adds	r0, #1
         switch (f[0]) {
 8001e3a:	f899 2000 	ldrb.w	r2, [r9]
 8001e3e:	2a27      	cmp	r2, #39	; 0x27
 8001e40:	d034      	beq.n	8001eac <stbsp_vsprintfcb+0x10c>
 8001e42:	d808      	bhi.n	8001e56 <stbsp_vsprintfcb+0xb6>
 8001e44:	2a23      	cmp	r2, #35	; 0x23
 8001e46:	d02e      	beq.n	8001ea6 <stbsp_vsprintfcb+0x106>
 8001e48:	2a24      	cmp	r2, #36	; 0x24
 8001e4a:	d032      	beq.n	8001eb2 <stbsp_vsprintfcb+0x112>
 8001e4c:	2a20      	cmp	r2, #32
 8001e4e:	d107      	bne.n	8001e60 <stbsp_vsprintfcb+0xc0>
            fl |= STBSP__LEADINGSPACE;
 8001e50:	f045 0504 	orr.w	r5, r5, #4
            continue;
 8001e54:	e7ef      	b.n	8001e36 <stbsp_vsprintfcb+0x96>
         switch (f[0]) {
 8001e56:	2a2d      	cmp	r2, #45	; 0x2d
 8001e58:	d01f      	beq.n	8001e9a <stbsp_vsprintfcb+0xfa>
 8001e5a:	d817      	bhi.n	8001e8c <stbsp_vsprintfcb+0xec>
 8001e5c:	2a2b      	cmp	r2, #43	; 0x2b
 8001e5e:	d01f      	beq.n	8001ea0 <stbsp_vsprintfcb+0x100>
      if (f[0] == '*') {
 8001e60:	f899 1000 	ldrb.w	r1, [r9]
 8001e64:	292a      	cmp	r1, #42	; 0x2a
 8001e66:	d034      	beq.n	8001ed2 <stbsp_vsprintfcb+0x132>
      fw = 0;
 8001e68:	2700      	movs	r7, #0
 8001e6a:	9706      	str	r7, [sp, #24]
            fw = fw * 10 + f[0] - '0';
 8001e6c:	f04f 080a 	mov.w	r8, #10
 8001e70:	46ca      	mov	sl, r9
         while ((f[0] >= '0') && (f[0] <= '9')) {
 8001e72:	f819 cb01 	ldrb.w	ip, [r9], #1
 8001e76:	f1ac 0230 	sub.w	r2, ip, #48	; 0x30
 8001e7a:	2a09      	cmp	r2, #9
 8001e7c:	d830      	bhi.n	8001ee0 <stbsp_vsprintfcb+0x140>
            fw = fw * 10 + f[0] - '0';
 8001e7e:	9b06      	ldr	r3, [sp, #24]
 8001e80:	fb08 ca03 	mla	sl, r8, r3, ip
 8001e84:	f1aa 0030 	sub.w	r0, sl, #48	; 0x30
 8001e88:	9006      	str	r0, [sp, #24]
 8001e8a:	e7f1      	b.n	8001e70 <stbsp_vsprintfcb+0xd0>
         switch (f[0]) {
 8001e8c:	2a30      	cmp	r2, #48	; 0x30
 8001e8e:	d01c      	beq.n	8001eca <stbsp_vsprintfcb+0x12a>
 8001e90:	2a5f      	cmp	r2, #95	; 0x5f
 8001e92:	d1e5      	bne.n	8001e60 <stbsp_vsprintfcb+0xc0>
            fl |= STBSP__METRIC_NOSPACE;
 8001e94:	f445 6580 	orr.w	r5, r5, #1024	; 0x400
            continue;
 8001e98:	e7cd      	b.n	8001e36 <stbsp_vsprintfcb+0x96>
            fl |= STBSP__LEFTJUST;
 8001e9a:	f045 0501 	orr.w	r5, r5, #1
            continue;
 8001e9e:	e7ca      	b.n	8001e36 <stbsp_vsprintfcb+0x96>
            fl |= STBSP__LEADINGPLUS;
 8001ea0:	f045 0502 	orr.w	r5, r5, #2
            continue;
 8001ea4:	e7c7      	b.n	8001e36 <stbsp_vsprintfcb+0x96>
            fl |= STBSP__LEADING_0X;
 8001ea6:	f045 0508 	orr.w	r5, r5, #8
            continue;
 8001eaa:	e7c4      	b.n	8001e36 <stbsp_vsprintfcb+0x96>
            fl |= STBSP__TRIPLET_COMMA;
 8001eac:	f045 0540 	orr.w	r5, r5, #64	; 0x40
            continue;
 8001eb0:	e7c1      	b.n	8001e36 <stbsp_vsprintfcb+0x96>
            if (fl & STBSP__METRIC_SUFFIX) {
 8001eb2:	05eb      	lsls	r3, r5, #23
 8001eb4:	d506      	bpl.n	8001ec4 <stbsp_vsprintfcb+0x124>
               if (fl & STBSP__METRIC_1024) {
 8001eb6:	052f      	lsls	r7, r5, #20
                  fl |= STBSP__METRIC_JEDEC;
 8001eb8:	bf4c      	ite	mi
 8001eba:	f445 5580 	orrmi.w	r5, r5, #4096	; 0x1000
                  fl |= STBSP__METRIC_1024;
 8001ebe:	f445 6500 	orrpl.w	r5, r5, #2048	; 0x800
 8001ec2:	e7b8      	b.n	8001e36 <stbsp_vsprintfcb+0x96>
               fl |= STBSP__METRIC_SUFFIX;
 8001ec4:	f445 7580 	orr.w	r5, r5, #256	; 0x100
            continue;
 8001ec8:	e7b5      	b.n	8001e36 <stbsp_vsprintfcb+0x96>
            fl |= STBSP__LEADINGZERO;
 8001eca:	f045 0510 	orr.w	r5, r5, #16
            ++f;
 8001ece:	4681      	mov	r9, r0
            goto flags_done;
 8001ed0:	e7c6      	b.n	8001e60 <stbsp_vsprintfcb+0xc0>
         fw = va_arg(va, stbsp__uint32);
 8001ed2:	f8db 1000 	ldr.w	r1, [fp]
 8001ed6:	9106      	str	r1, [sp, #24]
         ++f;
 8001ed8:	f109 0a01 	add.w	sl, r9, #1
         fw = va_arg(va, stbsp__uint32);
 8001edc:	f10b 0b04 	add.w	fp, fp, #4
      if (f[0] == '.') {
 8001ee0:	f89a 7000 	ldrb.w	r7, [sl]
 8001ee4:	2f2e      	cmp	r7, #46	; 0x2e
 8001ee6:	d146      	bne.n	8001f76 <stbsp_vsprintfcb+0x1d6>
         if (f[0] == '*') {
 8001ee8:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8001eec:	2b2a      	cmp	r3, #42	; 0x2a
 8001eee:	d012      	beq.n	8001f16 <stbsp_vsprintfcb+0x176>
            pr = 0;
 8001ef0:	2000      	movs	r0, #0
         ++f;
 8001ef2:	f10a 0801 	add.w	r8, sl, #1
            pr = 0;
 8001ef6:	9001      	str	r0, [sp, #4]
               pr = pr * 10 + f[0] - '0';
 8001ef8:	270a      	movs	r7, #10
 8001efa:	46c2      	mov	sl, r8
            while ((f[0] >= '0') && (f[0] <= '9')) {
 8001efc:	f818 cb01 	ldrb.w	ip, [r8], #1
 8001f00:	f1ac 0130 	sub.w	r1, ip, #48	; 0x30
 8001f04:	2909      	cmp	r1, #9
 8001f06:	d80d      	bhi.n	8001f24 <stbsp_vsprintfcb+0x184>
               pr = pr * 10 + f[0] - '0';
 8001f08:	9a01      	ldr	r2, [sp, #4]
 8001f0a:	fb07 c902 	mla	r9, r7, r2, ip
 8001f0e:	f1a9 0330 	sub.w	r3, r9, #48	; 0x30
 8001f12:	9301      	str	r3, [sp, #4]
 8001f14:	e7f1      	b.n	8001efa <stbsp_vsprintfcb+0x15a>
            pr = va_arg(va, stbsp__uint32);
 8001f16:	f8db 0000 	ldr.w	r0, [fp]
 8001f1a:	9001      	str	r0, [sp, #4]
            ++f;
 8001f1c:	f10a 0a02 	add.w	sl, sl, #2
            pr = va_arg(va, stbsp__uint32);
 8001f20:	f10b 0b04 	add.w	fp, fp, #4
      switch (f[0]) {
 8001f24:	f89a 1000 	ldrb.w	r1, [sl]
 8001f28:	296a      	cmp	r1, #106	; 0x6a
 8001f2a:	d03c      	beq.n	8001fa6 <stbsp_vsprintfcb+0x206>
 8001f2c:	d827      	bhi.n	8001f7e <stbsp_vsprintfcb+0x1de>
 8001f2e:	2949      	cmp	r1, #73	; 0x49
 8001f30:	d03c      	beq.n	8001fac <stbsp_vsprintfcb+0x20c>
 8001f32:	2968      	cmp	r1, #104	; 0x68
 8001f34:	d032      	beq.n	8001f9c <stbsp_vsprintfcb+0x1fc>
      switch (f[0]) {
 8001f36:	f89a 3000 	ldrb.w	r3, [sl]
 8001f3a:	2b64      	cmp	r3, #100	; 0x64
 8001f3c:	f000 8206 	beq.w	800234c <stbsp_vsprintfcb+0x5ac>
 8001f40:	d878      	bhi.n	8002034 <stbsp_vsprintfcb+0x294>
 8001f42:	2b47      	cmp	r3, #71	; 0x47
 8001f44:	d007      	beq.n	8001f56 <stbsp_vsprintfcb+0x1b6>
 8001f46:	d845      	bhi.n	8001fd4 <stbsp_vsprintfcb+0x234>
 8001f48:	2b42      	cmp	r3, #66	; 0x42
 8001f4a:	f000 81e0 	beq.w	800230e <stbsp_vsprintfcb+0x56e>
 8001f4e:	2b45      	cmp	r3, #69	; 0x45
 8001f50:	d001      	beq.n	8001f56 <stbsp_vsprintfcb+0x1b6>
 8001f52:	2b41      	cmp	r3, #65	; 0x41
 8001f54:	d144      	bne.n	8001fe0 <stbsp_vsprintfcb+0x240>
         va_arg(va, double); // eat it
 8001f56:	f10b 0207 	add.w	r2, fp, #7
         lead[0] = 0;
 8001f5a:	f04f 0800 	mov.w	r8, #0
         va_arg(va, double); // eat it
 8001f5e:	f022 0c07 	bic.w	ip, r2, #7
 8001f62:	f10c 0b08 	add.w	fp, ip, #8
         lead[0] = 0;
 8001f66:	f88d 8028 	strb.w	r8, [sp, #40]	; 0x28
         tail[0] = 0;
 8001f6a:	f88d 8030 	strb.w	r8, [sp, #48]	; 0x30
         l = 8;
 8001f6e:	f04f 0908 	mov.w	r9, #8
         s = (char *)"No float";
 8001f72:	4fac      	ldr	r7, [pc, #688]	; (8002224 <stbsp_vsprintfcb+0x484>)
 8001f74:	e05b      	b.n	800202e <stbsp_vsprintfcb+0x28e>
      pr = -1;
 8001f76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f7a:	9201      	str	r2, [sp, #4]
 8001f7c:	e7d2      	b.n	8001f24 <stbsp_vsprintfcb+0x184>
      switch (f[0]) {
 8001f7e:	2974      	cmp	r1, #116	; 0x74
 8001f80:	d00e      	beq.n	8001fa0 <stbsp_vsprintfcb+0x200>
 8001f82:	297a      	cmp	r1, #122	; 0x7a
 8001f84:	d00c      	beq.n	8001fa0 <stbsp_vsprintfcb+0x200>
 8001f86:	296c      	cmp	r1, #108	; 0x6c
 8001f88:	d1d5      	bne.n	8001f36 <stbsp_vsprintfcb+0x196>
         if (f[0] == 'l') {
 8001f8a:	f89a 0001 	ldrb.w	r0, [sl, #1]
 8001f8e:	286c      	cmp	r0, #108	; 0x6c
 8001f90:	d106      	bne.n	8001fa0 <stbsp_vsprintfcb+0x200>
            fl |= STBSP__INTMAX;
 8001f92:	f045 0520 	orr.w	r5, r5, #32
            ++f;
 8001f96:	f10a 0a02 	add.w	sl, sl, #2
 8001f9a:	e7cc      	b.n	8001f36 <stbsp_vsprintfcb+0x196>
         fl |= STBSP__HALFWIDTH;
 8001f9c:	f445 7500 	orr.w	r5, r5, #512	; 0x200
            ++f;
 8001fa0:	f10a 0a01 	add.w	sl, sl, #1
 8001fa4:	e7c7      	b.n	8001f36 <stbsp_vsprintfcb+0x196>
         fl |= STBSP__INTMAX;
 8001fa6:	f045 0520 	orr.w	r5, r5, #32
 8001faa:	e7f9      	b.n	8001fa0 <stbsp_vsprintfcb+0x200>
         if ((f[1] == '6') && (f[2] == '4')) {
 8001fac:	f89a 7001 	ldrb.w	r7, [sl, #1]
 8001fb0:	2f36      	cmp	r7, #54	; 0x36
 8001fb2:	d108      	bne.n	8001fc6 <stbsp_vsprintfcb+0x226>
 8001fb4:	f89a 3002 	ldrb.w	r3, [sl, #2]
 8001fb8:	2b34      	cmp	r3, #52	; 0x34
 8001fba:	d1f1      	bne.n	8001fa0 <stbsp_vsprintfcb+0x200>
            fl |= STBSP__INTMAX;
 8001fbc:	f045 0520 	orr.w	r5, r5, #32
            f += 3;
 8001fc0:	f10a 0a03 	add.w	sl, sl, #3
 8001fc4:	e7b7      	b.n	8001f36 <stbsp_vsprintfcb+0x196>
         } else if ((f[1] == '3') && (f[2] == '2')) {
 8001fc6:	2f33      	cmp	r7, #51	; 0x33
 8001fc8:	d1ea      	bne.n	8001fa0 <stbsp_vsprintfcb+0x200>
 8001fca:	f89a 2002 	ldrb.w	r2, [sl, #2]
 8001fce:	2a32      	cmp	r2, #50	; 0x32
 8001fd0:	d1e6      	bne.n	8001fa0 <stbsp_vsprintfcb+0x200>
 8001fd2:	e7f5      	b.n	8001fc0 <stbsp_vsprintfcb+0x220>
      switch (f[0]) {
 8001fd4:	2b61      	cmp	r3, #97	; 0x61
 8001fd6:	d0be      	beq.n	8001f56 <stbsp_vsprintfcb+0x1b6>
 8001fd8:	d814      	bhi.n	8002004 <stbsp_vsprintfcb+0x264>
 8001fda:	2b58      	cmp	r3, #88	; 0x58
 8001fdc:	f000 81a6 	beq.w	800232c <stbsp_vsprintfcb+0x58c>
         lead[0] = 0;
 8001fe0:	f04f 0800 	mov.w	r8, #0
         *s = f[0];
 8001fe4:	f88d 3237 	strb.w	r3, [sp, #567]	; 0x237
         lead[0] = 0;
 8001fe8:	f88d 8028 	strb.w	r8, [sp, #40]	; 0x28
         tail[0] = 0;
 8001fec:	f88d 8030 	strb.w	r8, [sp, #48]	; 0x30
         l = 1;
 8001ff0:	f04f 0901 	mov.w	r9, #1
         s = num + STBSP__NUMSZ - 1;
 8001ff4:	f20d 2737 	addw	r7, sp, #567	; 0x237
         fw = pr = fl = 0;
 8001ff8:	4645      	mov	r5, r8
         pr = 0;
 8001ffa:	f8cd 8004 	str.w	r8, [sp, #4]
         fw = pr = fl = 0;
 8001ffe:	f8cd 8018 	str.w	r8, [sp, #24]
         goto scopy;
 8002002:	e08a      	b.n	800211a <stbsp_vsprintfcb+0x37a>
      switch (f[0]) {
 8002004:	2b62      	cmp	r3, #98	; 0x62
 8002006:	f000 8113 	beq.w	8002230 <stbsp_vsprintfcb+0x490>
 800200a:	2b63      	cmp	r3, #99	; 0x63
 800200c:	d1e8      	bne.n	8001fe0 <stbsp_vsprintfcb+0x240>
         *s = (char)va_arg(va, int);
 800200e:	f8db 1000 	ldr.w	r1, [fp]
 8002012:	f88d 1237 	strb.w	r1, [sp, #567]	; 0x237
         lead[0] = 0;
 8002016:	f04f 0800 	mov.w	r8, #0
 800201a:	f88d 8028 	strb.w	r8, [sp, #40]	; 0x28
         tail[0] = 0;
 800201e:	f88d 8030 	strb.w	r8, [sp, #48]	; 0x30
         *s = (char)va_arg(va, int);
 8002022:	f10b 0b04 	add.w	fp, fp, #4
         l = 1;
 8002026:	f04f 0901 	mov.w	r9, #1
         s = num + STBSP__NUMSZ - 1;
 800202a:	f20d 2737 	addw	r7, sp, #567	; 0x237
         pr = 0;
 800202e:	f8cd 8004 	str.w	r8, [sp, #4]
         goto scopy;
 8002032:	e072      	b.n	800211a <stbsp_vsprintfcb+0x37a>
      switch (f[0]) {
 8002034:	2b6f      	cmp	r3, #111	; 0x6f
 8002036:	f000 816c 	beq.w	8002312 <stbsp_vsprintfcb+0x572>
 800203a:	d813      	bhi.n	8002064 <stbsp_vsprintfcb+0x2c4>
 800203c:	2b69      	cmp	r3, #105	; 0x69
 800203e:	f000 8185 	beq.w	800234c <stbsp_vsprintfcb+0x5ac>
 8002042:	d802      	bhi.n	800204a <stbsp_vsprintfcb+0x2aa>
 8002044:	2b67      	cmp	r3, #103	; 0x67
 8002046:	d986      	bls.n	8001f56 <stbsp_vsprintfcb+0x1b6>
 8002048:	e7ca      	b.n	8001fe0 <stbsp_vsprintfcb+0x240>
 800204a:	2b6e      	cmp	r3, #110	; 0x6e
 800204c:	d1c8      	bne.n	8001fe0 <stbsp_vsprintfcb+0x240>
         *d = tlen + (int)(bf - buf);
 800204e:	9b04      	ldr	r3, [sp, #16]
 8002050:	f8db 5000 	ldr.w	r5, [fp]
 8002054:	1ba0      	subs	r0, r4, r6
 8002056:	4418      	add	r0, r3
 8002058:	6028      	str	r0, [r5, #0]
         int *d = va_arg(va, int *);
 800205a:	f10b 0b04 	add.w	fp, fp, #4
      ++f;
 800205e:	f10a 0501 	add.w	r5, sl, #1
   for (;;) {
 8002062:	e6aa      	b.n	8001dba <stbsp_vsprintfcb+0x1a>
      switch (f[0]) {
 8002064:	2b73      	cmp	r3, #115	; 0x73
 8002066:	d01d      	beq.n	80020a4 <stbsp_vsprintfcb+0x304>
 8002068:	d806      	bhi.n	8002078 <stbsp_vsprintfcb+0x2d8>
 800206a:	2b70      	cmp	r3, #112	; 0x70
 800206c:	d1b8      	bne.n	8001fe0 <stbsp_vsprintfcb+0x240>
         pr = sizeof(void *) * 2;
 800206e:	2108      	movs	r1, #8
         fl &= ~STBSP__LEADINGZERO; // 'p' only prints the pointer with zeros
 8002070:	f025 0510 	bic.w	r5, r5, #16
         pr = sizeof(void *) * 2;
 8002074:	9101      	str	r1, [sp, #4]
 8002076:	e004      	b.n	8002082 <stbsp_vsprintfcb+0x2e2>
      switch (f[0]) {
 8002078:	2b75      	cmp	r3, #117	; 0x75
 800207a:	f000 8167 	beq.w	800234c <stbsp_vsprintfcb+0x5ac>
 800207e:	2b78      	cmp	r3, #120	; 0x78
 8002080:	d1ae      	bne.n	8001fe0 <stbsp_vsprintfcb+0x240>
         h = (f[0] == 'X') ? hexu : hex;
 8002082:	4a69      	ldr	r2, [pc, #420]	; (8002228 <stbsp_vsprintfcb+0x488>)
         if (fl & STBSP__LEADING_0X) {
 8002084:	f015 0008 	ands.w	r0, r5, #8
            lead[0] = 2;
 8002088:	bf1d      	ittte	ne
 800208a:	f243 0002 	movwne	r0, #12290	; 0x3002
 800208e:	f8ad 0028 	strhne.w	r0, [sp, #40]	; 0x28
            lead[2] = h[16];
 8002092:	7c10      	ldrbne	r0, [r2, #16]
         lead[0] = 0;
 8002094:	f88d 0028 	strbeq.w	r0, [sp, #40]	; 0x28
            lead[2] = h[16];
 8002098:	bf18      	it	ne
 800209a:	f88d 002a 	strbne.w	r0, [sp, #42]	; 0x2a
         l = (4 << 4) | (4 << 8);
 800209e:	f44f 6388 	mov.w	r3, #1088	; 0x440
 80020a2:	e0d5      	b.n	8002250 <stbsp_vsprintfcb+0x4b0>
         s = va_arg(va, char *);
 80020a4:	f8db 7000 	ldr.w	r7, [fp]
            s = (char *)"null";
 80020a8:	4b60      	ldr	r3, [pc, #384]	; (800222c <stbsp_vsprintfcb+0x48c>)
 80020aa:	2f00      	cmp	r7, #0
 80020ac:	bf08      	it	eq
 80020ae:	461f      	moveq	r7, r3
         s = va_arg(va, char *);
 80020b0:	f10b 0204 	add.w	r2, fp, #4
         sn = s;
 80020b4:	46bb      	mov	fp, r7
            if ((((stbsp__uintptr)sn) & 3) == 0)
 80020b6:	ea5f 708b 	movs.w	r0, fp, lsl #30
 80020ba:	4659      	mov	r1, fp
 80020bc:	d005      	beq.n	80020ca <stbsp_vsprintfcb+0x32a>
            if (sn[0] == 0)
 80020be:	f89b 0000 	ldrb.w	r0, [fp]
 80020c2:	b1e0      	cbz	r0, 80020fe <stbsp_vsprintfcb+0x35e>
            ++sn;
 80020c4:	f10b 0b01 	add.w	fp, fp, #1
            if ((((stbsp__uintptr)sn) & 3) == 0)
 80020c8:	e7f5      	b.n	80020b6 <stbsp_vsprintfcb+0x316>
         if (pr >= 0) {
 80020ca:	9801      	ldr	r0, [sp, #4]
 80020cc:	2800      	cmp	r0, #0
 80020ce:	db13      	blt.n	80020f8 <stbsp_vsprintfcb+0x358>
            if (n >= (stbsp__uint32)pr)
 80020d0:	9801      	ldr	r0, [sp, #4]
            n = (stbsp__uint32)(sn - s);
 80020d2:	1bcb      	subs	r3, r1, r7
            if (n >= (stbsp__uint32)pr)
 80020d4:	4283      	cmp	r3, r0
 80020d6:	d212      	bcs.n	80020fe <stbsp_vsprintfcb+0x35e>
            n = ((stbsp__uint32)(pr - n)) >> 2;
 80020d8:	1ac3      	subs	r3, r0, r3
 80020da:	089b      	lsrs	r3, r3, #2
 80020dc:	468b      	mov	fp, r1
         while (n) {
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d0ed      	beq.n	80020be <stbsp_vsprintfcb+0x31e>
            stbsp__uint32 v = *(stbsp__uint32 *)sn;
 80020e2:	f851 cb04 	ldr.w	ip, [r1], #4
            if ((v - 0x01010101) & (~v) & 0x80808080UL)
 80020e6:	f1ac 3801 	sub.w	r8, ip, #16843009	; 0x1010101
 80020ea:	ea28 090c 	bic.w	r9, r8, ip
 80020ee:	f019 3f80 	tst.w	r9, #2155905152	; 0x80808080
 80020f2:	d1e4      	bne.n	80020be <stbsp_vsprintfcb+0x31e>
            --n;
 80020f4:	3b01      	subs	r3, #1
 80020f6:	e7f1      	b.n	80020dc <stbsp_vsprintfcb+0x33c>
         n = 0xffffffff;
 80020f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020fc:	e7ee      	b.n	80020dc <stbsp_vsprintfcb+0x33c>
 80020fe:	9b01      	ldr	r3, [sp, #4]
         l = (stbsp__uint32)(sn - s);
 8002100:	ebab 0907 	sub.w	r9, fp, r7
         lead[0] = 0;
 8002104:	2100      	movs	r1, #0
 8002106:	4599      	cmp	r9, r3
 8002108:	bf28      	it	cs
 800210a:	4699      	movcs	r9, r3
 800210c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
         tail[0] = 0;
 8002110:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
         s = va_arg(va, char *);
 8002114:	4693      	mov	fp, r2
         cs = 0;
 8002116:	9101      	str	r1, [sp, #4]
         pr = 0;
 8002118:	4688      	mov	r8, r1
 800211a:	9a01      	ldr	r2, [sp, #4]
         n = pr + lead[0] + tail[0] + tz;
 800211c:	f89d 0028 	ldrb.w	r0, [sp, #40]	; 0x28
         fw -= n;
 8002120:	9906      	ldr	r1, [sp, #24]
 8002122:	454a      	cmp	r2, r9
 8002124:	bfb8      	it	lt
 8002126:	464a      	movlt	r2, r9
         n = pr + lead[0] + tail[0] + tz;
 8002128:	4410      	add	r0, r2
         fw -= n;
 800212a:	4288      	cmp	r0, r1
 800212c:	bfac      	ite	ge
 800212e:	ebc0 0000 	rsbge	r0, r0, r0
 8002132:	ebc0 0001 	rsblt	r0, r0, r1
 8002136:	9001      	str	r0, [sp, #4]
         pr -= l;
 8002138:	eba2 0309 	sub.w	r3, r2, r9
         if ((fl & STBSP__LEFTJUST) == 0) {
 800213c:	f015 0001 	ands.w	r0, r5, #1
         pr -= l;
 8002140:	9302      	str	r3, [sp, #8]
         if ((fl & STBSP__LEFTJUST) == 0) {
 8002142:	d109      	bne.n	8002158 <stbsp_vsprintfcb+0x3b8>
            if (fl & STBSP__LEADINGZERO) // if leading zeros, everything is in pr
 8002144:	06ea      	lsls	r2, r5, #27
 8002146:	f140 81ef 	bpl.w	8002528 <stbsp_vsprintfcb+0x788>
               pr = (fw > pr) ? fw : pr;
 800214a:	e9dd c201 	ldrd	ip, r2, [sp, #4]
 800214e:	4562      	cmp	r2, ip
 8002150:	bfb8      	it	lt
 8002152:	4662      	movlt	r2, ip
               fw = 0;
 8002154:	e9cd 0201 	strd	r0, r2, [sp, #4]
         if (fw + pr) {
 8002158:	e9dd 1301 	ldrd	r1, r3, [sp, #4]
 800215c:	42d9      	cmn	r1, r3
 800215e:	f000 82ca 	beq.w	80026f6 <stbsp_vsprintfcb+0x956>
            if ((fl & STBSP__LEFTJUST) == 0)
 8002162:	07e8      	lsls	r0, r5, #31
 8002164:	d404      	bmi.n	8002170 <stbsp_vsprintfcb+0x3d0>
                     *bf++ = ' ';
 8002166:	2320      	movs	r3, #32
               while (fw > 0) {
 8002168:	9a01      	ldr	r2, [sp, #4]
 800216a:	2a00      	cmp	r2, #0
 800216c:	f300 81df 	bgt.w	800252e <stbsp_vsprintfcb+0x78e>
            sn = lead + 1;
 8002170:	f10d 0129 	add.w	r1, sp, #41	; 0x29
            while (lead[0]) {
 8002174:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
 8002178:	2a00      	cmp	r2, #0
 800217a:	f040 8211 	bne.w	80025a0 <stbsp_vsprintfcb+0x800>
            cs = (fl & STBSP__TRIPLET_COMMA) ? ((stbsp__uint32)(c - ((pr + cs) % (c + 1)))) : 0;
 800217e:	f015 0140 	ands.w	r1, r5, #64	; 0x40
            c = cs >> 24;
 8002182:	ea4f 6318 	mov.w	r3, r8, lsr #24
            cs = (fl & STBSP__TRIPLET_COMMA) ? ((stbsp__uint32)(c - ((pr + cs) % (c + 1)))) : 0;
 8002186:	9106      	str	r1, [sp, #24]
 8002188:	f000 8285 	beq.w	8002696 <stbsp_vsprintfcb+0x8f6>
 800218c:	9802      	ldr	r0, [sp, #8]
            cs &= 0xffffff;
 800218e:	f028 4c7f 	bic.w	ip, r8, #4278190080	; 0xff000000
            cs = (fl & STBSP__TRIPLET_COMMA) ? ((stbsp__uint32)(c - ((pr + cs) % (c + 1)))) : 0;
 8002192:	4484      	add	ip, r0
 8002194:	1c59      	adds	r1, r3, #1
 8002196:	fbbc f2f1 	udiv	r2, ip, r1
 800219a:	fb01 c012 	mls	r0, r1, r2, ip
 800219e:	eba3 0800 	sub.w	r8, r3, r0
            while (pr > 0) {
 80021a2:	9902      	ldr	r1, [sp, #8]
 80021a4:	2900      	cmp	r1, #0
 80021a6:	f300 8227 	bgt.w	80025f8 <stbsp_vsprintfcb+0x858>
         while (n) {
 80021aa:	f1b9 0f00 	cmp.w	r9, #0
 80021ae:	f040 82a5 	bne.w	80026fc <stbsp_vsprintfcb+0x95c>
         sn = tail + 1;
 80021b2:	f10d 0131 	add.w	r1, sp, #49	; 0x31
         while (tail[0]) {
 80021b6:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 80021ba:	2f00      	cmp	r7, #0
 80021bc:	f040 82d1 	bne.w	8002762 <stbsp_vsprintfcb+0x9c2>
         if (fl & STBSP__LEFTJUST)
 80021c0:	07e9      	lsls	r1, r5, #31
 80021c2:	f57f af4c 	bpl.w	800205e <stbsp_vsprintfcb+0x2be>
            if (fw > 0) {
 80021c6:	9d01      	ldr	r5, [sp, #4]
 80021c8:	2d00      	cmp	r5, #0
 80021ca:	f77f af48 	ble.w	800205e <stbsp_vsprintfcb+0x2be>
                     *bf++ = ' ';
 80021ce:	f04f 0920 	mov.w	r9, #32
                     *(stbsp__uint32 *)bf = 0x20202020;
 80021d2:	f04f 3720 	mov.w	r7, #538976288	; 0x20202020
                  stbsp__cb_buf_clamp(i, fw);
 80021d6:	9b00      	ldr	r3, [sp, #0]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	f000 82ea 	beq.w	80027b2 <stbsp_vsprintfcb+0xa12>
 80021de:	9801      	ldr	r0, [sp, #4]
 80021e0:	1ba2      	subs	r2, r4, r6
 80021e2:	f1c2 0380 	rsb	r3, r2, #128	; 0x80
 80021e6:	4283      	cmp	r3, r0
 80021e8:	bfa8      	it	ge
 80021ea:	4603      	movge	r3, r0
                  fw -= i;
 80021ec:	9901      	ldr	r1, [sp, #4]
 80021ee:	1aca      	subs	r2, r1, r3
 80021f0:	9201      	str	r2, [sp, #4]
                  while (i) {
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	f040 82df 	bne.w	80027b6 <stbsp_vsprintfcb+0xa16>
                  stbsp__chk_cb_buf(1);
 80021f8:	9b00      	ldr	r3, [sp, #0]
 80021fa:	b173      	cbz	r3, 800221a <stbsp_vsprintfcb+0x47a>
 80021fc:	1ba2      	subs	r2, r4, r6
 80021fe:	2a7e      	cmp	r2, #126	; 0x7e
 8002200:	dd0b      	ble.n	800221a <stbsp_vsprintfcb+0x47a>
 8002202:	9c04      	ldr	r4, [sp, #16]
 8002204:	9905      	ldr	r1, [sp, #20]
 8002206:	4414      	add	r4, r2
 8002208:	4630      	mov	r0, r6
 800220a:	9e00      	ldr	r6, [sp, #0]
 800220c:	9404      	str	r4, [sp, #16]
 800220e:	47b0      	blx	r6
 8002210:	4606      	mov	r6, r0
 8002212:	2800      	cmp	r0, #0
 8002214:	f000 82e1 	beq.w	80027da <stbsp_vsprintfcb+0xa3a>
 8002218:	4604      	mov	r4, r0
               while (fw) {
 800221a:	9801      	ldr	r0, [sp, #4]
 800221c:	2800      	cmp	r0, #0
 800221e:	d1da      	bne.n	80021d6 <stbsp_vsprintfcb+0x436>
 8002220:	e71d      	b.n	800205e <stbsp_vsprintfcb+0x2be>
 8002222:	bf00      	nop
 8002224:	080052e6 	.word	0x080052e6
 8002228:	20000476 	.word	0x20000476
 800222c:	080052e1 	.word	0x080052e1
         h = (f[0] == 'B') ? hexu : hex;
 8002230:	4ab9      	ldr	r2, [pc, #740]	; (8002518 <stbsp_vsprintfcb+0x778>)
         if (fl & STBSP__LEADING_0X) {
 8002232:	f015 0708 	ands.w	r7, r5, #8
            lead[0] = 2;
 8002236:	bf1d      	ittte	ne
 8002238:	f243 0702 	movwne	r7, #12290	; 0x3002
 800223c:	f8ad 7028 	strhne.w	r7, [sp, #40]	; 0x28
            lead[2] = h[0xb];
 8002240:	7ad7      	ldrbne	r7, [r2, #11]
         lead[0] = 0;
 8002242:	f88d 7028 	strbeq.w	r7, [sp, #40]	; 0x28
            lead[2] = h[0xb];
 8002246:	bf18      	it	ne
 8002248:	f88d 702a 	strbne.w	r7, [sp, #42]	; 0x2a
         l = (8 << 4) | (1 << 8);
 800224c:	f44f 73c0 	mov.w	r3, #384	; 0x180
         if (fl & STBSP__INTMAX)
 8002250:	06a9      	lsls	r1, r5, #26
 8002252:	d56d      	bpl.n	8002330 <stbsp_vsprintfcb+0x590>
            n64 = va_arg(va, stbsp__uint64);
 8002254:	f10b 0007 	add.w	r0, fp, #7
 8002258:	f020 0c07 	bic.w	ip, r0, #7
 800225c:	e9dc 7800 	ldrd	r7, r8, [ip]
 8002260:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8002264:	f10c 0b08 	add.w	fp, ip, #8
         if (n64 == 0) {
 8002268:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
         tail[0] = 0;
 800226c:	f04f 0800 	mov.w	r8, #0
         if (n64 == 0) {
 8002270:	4301      	orrs	r1, r0
         tail[0] = 0;
 8002272:	f88d 8030 	strb.w	r8, [sp, #48]	; 0x30
         if (n64 == 0) {
 8002276:	d105      	bne.n	8002284 <stbsp_vsprintfcb+0x4e4>
            if (pr == 0) {
 8002278:	9901      	ldr	r1, [sp, #4]
            lead[0] = 0;
 800227a:	f88d 8028 	strb.w	r8, [sp, #40]	; 0x28
            if (pr == 0) {
 800227e:	2900      	cmp	r1, #0
 8002280:	f000 813a 	beq.w	80024f8 <stbsp_vsprintfcb+0x758>
                  *--s = stbsp__comma;
 8002284:	4fa5      	ldr	r7, [pc, #660]	; (800251c <stbsp_vsprintfcb+0x77c>)
            if (fl & STBSP__TRIPLET_COMMA) {
 8002286:	f005 0140 	and.w	r1, r5, #64	; 0x40
                  *--s = stbsp__comma;
 800228a:	7838      	ldrb	r0, [r7, #0]
 800228c:	9007      	str	r0, [sp, #28]
 800228e:	f50d 7e0e 	add.w	lr, sp, #568	; 0x238
            if (fl & STBSP__TRIPLET_COMMA) {
 8002292:	9108      	str	r1, [sp, #32]
            *--s = h[n64 & ((1 << (l >> 8)) - 1)];
 8002294:	ea4f 2c13 	mov.w	ip, r3, lsr #8
 8002298:	2001      	movs	r0, #1
 800229a:	9902      	ldr	r1, [sp, #8]
 800229c:	fa00 f90c 	lsl.w	r9, r0, ip
 80022a0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80022a4:	4008      	ands	r0, r1
            n64 >>= (l >> 8);
 80022a6:	f1cc 0920 	rsb	r9, ip, #32
            *--s = h[n64 & ((1 << (l >> 8)) - 1)];
 80022aa:	5c10      	ldrb	r0, [r2, r0]
 80022ac:	f80e 0c01 	strb.w	r0, [lr, #-1]
            n64 >>= (l >> 8);
 80022b0:	fa21 f00c 	lsr.w	r0, r1, ip
 80022b4:	9903      	ldr	r1, [sp, #12]
 80022b6:	f1ac 0820 	sub.w	r8, ip, #32
 80022ba:	fa01 f909 	lsl.w	r9, r1, r9
 80022be:	ea40 0009 	orr.w	r0, r0, r9
 80022c2:	fa21 f808 	lsr.w	r8, r1, r8
 80022c6:	fa21 fc0c 	lsr.w	ip, r1, ip
 80022ca:	ea40 0108 	orr.w	r1, r0, r8
 80022ce:	e9cd 1c02 	strd	r1, ip, [sp, #8]
            if (!((n64) || ((stbsp__int32)((num + STBSP__NUMSZ) - s) < pr)))
 80022d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80022d6:	4301      	orrs	r1, r0
            *--s = h[n64 & ((1 << (l >> 8)) - 1)];
 80022d8:	f10e 37ff 	add.w	r7, lr, #4294967295	; 0xffffffff
            if (!((n64) || ((stbsp__int32)((num + STBSP__NUMSZ) - s) < pr)))
 80022dc:	d106      	bne.n	80022ec <stbsp_vsprintfcb+0x54c>
 80022de:	f50d 790e 	add.w	r9, sp, #568	; 0x238
 80022e2:	9901      	ldr	r1, [sp, #4]
 80022e4:	eba9 0907 	sub.w	r9, r9, r7
 80022e8:	4589      	cmp	r9, r1
 80022ea:	da2a      	bge.n	8002342 <stbsp_vsprintfcb+0x5a2>
            if (fl & STBSP__TRIPLET_COMMA) {
 80022ec:	9808      	ldr	r0, [sp, #32]
 80022ee:	b160      	cbz	r0, 800230a <stbsp_vsprintfcb+0x56a>
               ++l;
 80022f0:	3301      	adds	r3, #1
               if ((l & 15) == ((l >> 4) & 15)) {
 80022f2:	ea83 1113 	eor.w	r1, r3, r3, lsr #4
 80022f6:	f011 0f0f 	tst.w	r1, #15
 80022fa:	d106      	bne.n	800230a <stbsp_vsprintfcb+0x56a>
                  *--s = stbsp__comma;
 80022fc:	9807      	ldr	r0, [sp, #28]
 80022fe:	f80e 0c02 	strb.w	r0, [lr, #-2]
                  l &= ~15;
 8002302:	f023 030f 	bic.w	r3, r3, #15
                  *--s = stbsp__comma;
 8002306:	f1ae 0702 	sub.w	r7, lr, #2
            n64 = va_arg(va, stbsp__uint32);
 800230a:	46be      	mov	lr, r7
 800230c:	e7c2      	b.n	8002294 <stbsp_vsprintfcb+0x4f4>
         h = (f[0] == 'B') ? hexu : hex;
 800230e:	4a84      	ldr	r2, [pc, #528]	; (8002520 <stbsp_vsprintfcb+0x780>)
 8002310:	e78f      	b.n	8002232 <stbsp_vsprintfcb+0x492>
         if (fl & STBSP__LEADING_0X) {
 8002312:	f015 0708 	ands.w	r7, r5, #8
            lead[0] = 1;
 8002316:	bf16      	itet	ne
 8002318:	f243 0701 	movwne	r7, #12289	; 0x3001
         lead[0] = 0;
 800231c:	f88d 7028 	strbeq.w	r7, [sp, #40]	; 0x28
            lead[0] = 1;
 8002320:	f8ad 7028 	strhne.w	r7, [sp, #40]	; 0x28
         l = (3 << 4) | (3 << 8);
 8002324:	f44f 734c 	mov.w	r3, #816	; 0x330
         h = hexu;
 8002328:	4a7d      	ldr	r2, [pc, #500]	; (8002520 <stbsp_vsprintfcb+0x780>)
 800232a:	e791      	b.n	8002250 <stbsp_vsprintfcb+0x4b0>
         h = (f[0] == 'X') ? hexu : hex;
 800232c:	4a7c      	ldr	r2, [pc, #496]	; (8002520 <stbsp_vsprintfcb+0x780>)
 800232e:	e6a9      	b.n	8002084 <stbsp_vsprintfcb+0x2e4>
            n64 = va_arg(va, stbsp__uint32);
 8002330:	f8db 7000 	ldr.w	r7, [fp]
 8002334:	f04f 0800 	mov.w	r8, #0
 8002338:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800233c:	f10b 0b04 	add.w	fp, fp, #4
 8002340:	e792      	b.n	8002268 <stbsp_vsprintfcb+0x4c8>
         cs = (stbsp__uint32)((num + STBSP__NUMSZ) - s) + ((((l >> 4) & 15)) << 24);
 8002342:	0519      	lsls	r1, r3, #20
 8002344:	f001 6870 	and.w	r8, r1, #251658240	; 0xf000000
 8002348:	44c8      	add	r8, r9
         goto scopy;
 800234a:	e6e6      	b.n	800211a <stbsp_vsprintfcb+0x37a>
         if (fl & STBSP__INTMAX) {
 800234c:	06af      	lsls	r7, r5, #26
 800234e:	d553      	bpl.n	80023f8 <stbsp_vsprintfcb+0x658>
            stbsp__int64 i64 = va_arg(va, stbsp__int64);
 8002350:	f10b 0107 	add.w	r1, fp, #7
 8002354:	f021 0b07 	bic.w	fp, r1, #7
 8002358:	e9db 1200 	ldrd	r1, r2, [fp]
 800235c:	f10b 0708 	add.w	r7, fp, #8
            if ((f[0] != 'u') && (i64 < 0)) {
 8002360:	2b75      	cmp	r3, #117	; 0x75
            stbsp__int64 i64 = va_arg(va, stbsp__int64);
 8002362:	9709      	str	r7, [sp, #36]	; 0x24
 8002364:	e9cd 1202 	strd	r1, r2, [sp, #8]
            if ((f[0] != 'u') && (i64 < 0)) {
 8002368:	d00c      	beq.n	8002384 <stbsp_vsprintfcb+0x5e4>
 800236a:	2900      	cmp	r1, #0
 800236c:	f172 0300 	sbcs.w	r3, r2, #0
 8002370:	da08      	bge.n	8002384 <stbsp_vsprintfcb+0x5e4>
               n64 = (stbsp__uint64)-i64;
 8002372:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002376:	4252      	negs	r2, r2
 8002378:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800237c:	e9cd 2302 	strd	r2, r3, [sp, #8]
               fl |= STBSP__NEGATIVE;
 8002380:	f045 0580 	orr.w	r5, r5, #128	; 0x80
                  *--s = stbsp__comma;
 8002384:	4a65      	ldr	r2, [pc, #404]	; (800251c <stbsp_vsprintfcb+0x77c>)
            if ((fl & STBSP__TRIPLET_COMMA) == 0) {
 8002386:	f005 0140 	and.w	r1, r5, #64	; 0x40
                  *--s = stbsp__comma;
 800238a:	7810      	ldrb	r0, [r2, #0]
 800238c:	9008      	str	r0, [sp, #32]
         l = 0;
 800238e:	f04f 0900 	mov.w	r9, #0
         s = num + STBSP__NUMSZ;
 8002392:	af8e      	add	r7, sp, #568	; 0x238
            if ((fl & STBSP__TRIPLET_COMMA) == 0) {
 8002394:	9107      	str	r1, [sp, #28]
            if (n64 >= 100000000) {
 8002396:	a35c      	add	r3, pc, #368	; (adr r3, 8002508 <stbsp_vsprintfcb+0x768>)
 8002398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800239c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80023a0:	428b      	cmp	r3, r1
 80023a2:	bf08      	it	eq
 80023a4:	4282      	cmpeq	r2, r0
            char *o = s - 8;
 80023a6:	f1a7 0b08 	sub.w	fp, r7, #8
            if (n64 >= 100000000) {
 80023aa:	d237      	bcs.n	800241c <stbsp_vsprintfcb+0x67c>
               n = (stbsp__uint32)(n64 % 100000000);
 80023ac:	a358      	add	r3, pc, #352	; (adr r3, 8002510 <stbsp_vsprintfcb+0x770>)
 80023ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023b2:	f001 fbbb 	bl	8003b2c <__aeabi_uldivmod>
               n64 /= 100000000;
 80023b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
               n = (stbsp__uint32)(n64 % 100000000);
 80023ba:	4690      	mov	r8, r2
               n64 /= 100000000;
 80023bc:	a354      	add	r3, pc, #336	; (adr r3, 8002510 <stbsp_vsprintfcb+0x770>)
 80023be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023c2:	f001 fbb3 	bl	8003b2c <__aeabi_uldivmod>
 80023c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
            if ((fl & STBSP__TRIPLET_COMMA) == 0) {
 80023ca:	9b07      	ldr	r3, [sp, #28]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d145      	bne.n	800245c <stbsp_vsprintfcb+0x6bc>
               while (n) {
 80023d0:	f1b8 0f00 	cmp.w	r8, #0
 80023d4:	d129      	bne.n	800242a <stbsp_vsprintfcb+0x68a>
            if (n64 == 0) {
 80023d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80023da:	4313      	orrs	r3, r2
 80023dc:	d04d      	beq.n	800247a <stbsp_vsprintfcb+0x6da>
                  *--s = '0';
 80023de:	2330      	movs	r3, #48	; 0x30
            while (s != o)
 80023e0:	455f      	cmp	r7, fp
 80023e2:	d0d8      	beq.n	8002396 <stbsp_vsprintfcb+0x5f6>
               if ((fl & STBSP__TRIPLET_COMMA) && (l++ == 3)) {
 80023e4:	9807      	ldr	r0, [sp, #28]
 80023e6:	3f01      	subs	r7, #1
 80023e8:	b120      	cbz	r0, 80023f4 <stbsp_vsprintfcb+0x654>
 80023ea:	f1b9 0f03 	cmp.w	r9, #3
 80023ee:	d057      	beq.n	80024a0 <stbsp_vsprintfcb+0x700>
 80023f0:	f109 0901 	add.w	r9, r9, #1
                  *--s = '0';
 80023f4:	703b      	strb	r3, [r7, #0]
 80023f6:	e7f3      	b.n	80023e0 <stbsp_vsprintfcb+0x640>
            stbsp__int32 i = va_arg(va, stbsp__int32);
 80023f8:	f8db 2000 	ldr.w	r2, [fp]
 80023fc:	f10b 0704 	add.w	r7, fp, #4
            n64 = (stbsp__uint32)i;
 8002400:	4610      	mov	r0, r2
 8002402:	2100      	movs	r1, #0
            if ((f[0] != 'u') && (i < 0)) {
 8002404:	2b75      	cmp	r3, #117	; 0x75
            stbsp__int32 i = va_arg(va, stbsp__int32);
 8002406:	9709      	str	r7, [sp, #36]	; 0x24
            n64 = (stbsp__uint32)i;
 8002408:	e9cd 0102 	strd	r0, r1, [sp, #8]
            if ((f[0] != 'u') && (i < 0)) {
 800240c:	d0ba      	beq.n	8002384 <stbsp_vsprintfcb+0x5e4>
 800240e:	2a00      	cmp	r2, #0
 8002410:	dab8      	bge.n	8002384 <stbsp_vsprintfcb+0x5e4>
               n64 = (stbsp__uint32)-i;
 8002412:	4250      	negs	r0, r2
 8002414:	17c1      	asrs	r1, r0, #31
 8002416:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800241a:	e7b1      	b.n	8002380 <stbsp_vsprintfcb+0x5e0>
               n64 = 0;
 800241c:	2200      	movs	r2, #0
 800241e:	2300      	movs	r3, #0
               n = (stbsp__uint32)n64;
 8002420:	f8dd 8008 	ldr.w	r8, [sp, #8]
               n64 = 0;
 8002424:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002428:	e7cf      	b.n	80023ca <stbsp_vsprintfcb+0x62a>
                  *(stbsp__uint16 *)s = *(stbsp__uint16 *)&stbsp__digitpair[(n % 100) * 2];
 800242a:	2064      	movs	r0, #100	; 0x64
 800242c:	4a3d      	ldr	r2, [pc, #244]	; (8002524 <stbsp_vsprintfcb+0x784>)
 800242e:	fbb8 fcf0 	udiv	ip, r8, r0
 8002432:	fb00 831c 	mls	r3, r0, ip, r8
                  n /= 100;
 8002436:	46e0      	mov	r8, ip
                  *(stbsp__uint16 *)s = *(stbsp__uint16 *)&stbsp__digitpair[(n % 100) * 2];
 8002438:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800243c:	f827 1d02 	strh.w	r1, [r7, #-2]!
 8002440:	e7c6      	b.n	80023d0 <stbsp_vsprintfcb+0x630>
               if ((fl & STBSP__TRIPLET_COMMA) && (l++ == 3)) {
 8002442:	f1b9 0f03 	cmp.w	r9, #3
 8002446:	f109 0c01 	add.w	ip, r9, #1
 800244a:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
 800244e:	d109      	bne.n	8002464 <stbsp_vsprintfcb+0x6c4>
                  *--s = stbsp__comma;
 8002450:	9908      	ldr	r1, [sp, #32]
 8002452:	7039      	strb	r1, [r7, #0]
                  --o;
 8002454:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
                  l = 0;
 8002458:	f04f 0900 	mov.w	r9, #0
            while (n) {
 800245c:	f1b8 0f00 	cmp.w	r8, #0
 8002460:	d1ef      	bne.n	8002442 <stbsp_vsprintfcb+0x6a2>
 8002462:	e7b8      	b.n	80023d6 <stbsp_vsprintfcb+0x636>
                  *--s = (char)(n % 10) + '0';
 8002464:	220a      	movs	r2, #10
 8002466:	fbb8 f9f2 	udiv	r9, r8, r2
 800246a:	fb02 8819 	mls	r8, r2, r9, r8
 800246e:	f108 0030 	add.w	r0, r8, #48	; 0x30
 8002472:	7038      	strb	r0, [r7, #0]
                  n /= 10;
 8002474:	46c8      	mov	r8, r9
 8002476:	46e1      	mov	r9, ip
 8002478:	e7f0      	b.n	800245c <stbsp_vsprintfcb+0x6bc>
               if ((s[0] == '0') && (s != (num + STBSP__NUMSZ)))
 800247a:	783a      	ldrb	r2, [r7, #0]
 800247c:	2a30      	cmp	r2, #48	; 0x30
 800247e:	d104      	bne.n	800248a <stbsp_vsprintfcb+0x6ea>
 8002480:	f50d 7c0e 	add.w	ip, sp, #568	; 0x238
 8002484:	4567      	cmp	r7, ip
 8002486:	d012      	beq.n	80024ae <stbsp_vsprintfcb+0x70e>
                  ++s;
 8002488:	3701      	adds	r7, #1
         tail[0] = 0;
 800248a:	f04f 0800 	mov.w	r8, #0
   if (fl & STBSP__NEGATIVE) {
 800248e:	0628      	lsls	r0, r5, #24
         tail[0] = 0;
 8002490:	f88d 8030 	strb.w	r8, [sp, #48]	; 0x30
   if (fl & STBSP__NEGATIVE) {
 8002494:	d50d      	bpl.n	80024b2 <stbsp_vsprintfcb+0x712>
      sign[0] = 1;
 8002496:	f642 5001 	movw	r0, #11521	; 0x2d01
      sign[0] = 1;
 800249a:	f8ad 0028 	strh.w	r0, [sp, #40]	; 0x28
 800249e:	e012      	b.n	80024c6 <stbsp_vsprintfcb+0x726>
                  *--s = stbsp__comma;
 80024a0:	9908      	ldr	r1, [sp, #32]
 80024a2:	7039      	strb	r1, [r7, #0]
                  --o;
 80024a4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
                  l = 0;
 80024a8:	f04f 0900 	mov.w	r9, #0
                  --o;
 80024ac:	e798      	b.n	80023e0 <stbsp_vsprintfcb+0x640>
 80024ae:	af8e      	add	r7, sp, #568	; 0x238
 80024b0:	e7eb      	b.n	800248a <stbsp_vsprintfcb+0x6ea>
   } else if (fl & STBSP__LEADINGSPACE) {
 80024b2:	0769      	lsls	r1, r5, #29
 80024b4:	d502      	bpl.n	80024bc <stbsp_vsprintfcb+0x71c>
      sign[0] = 1;
 80024b6:	f242 0001 	movw	r0, #8193	; 0x2001
 80024ba:	e7ee      	b.n	800249a <stbsp_vsprintfcb+0x6fa>
   } else if (fl & STBSP__LEADINGPLUS) {
 80024bc:	f015 0302 	ands.w	r3, r5, #2
 80024c0:	d117      	bne.n	80024f2 <stbsp_vsprintfcb+0x752>
   sign[0] = 0;
 80024c2:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
         if (l == 0) {
 80024c6:	a98e      	add	r1, sp, #568	; 0x238
 80024c8:	9a01      	ldr	r2, [sp, #4]
 80024ca:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 80024ce:	ebb1 0907 	subs.w	r9, r1, r7
            *--s = '0';
 80024d2:	bf04      	itt	eq
 80024d4:	2130      	moveq	r1, #48	; 0x30
            l = 1;
 80024d6:	f04f 0901 	moveq.w	r9, #1
 80024da:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
            *--s = '0';
 80024de:	bf08      	it	eq
 80024e0:	f807 1c01 	strbeq.w	r1, [r7, #-1]
         cs = l + (3 << 24);
 80024e4:	f109 7840 	add.w	r8, r9, #50331648	; 0x3000000
            *--s = '0';
 80024e8:	bf08      	it	eq
 80024ea:	f107 37ff 	addeq.w	r7, r7, #4294967295	; 0xffffffff
 80024ee:	9301      	str	r3, [sp, #4]
 80024f0:	e613      	b.n	800211a <stbsp_vsprintfcb+0x37a>
      sign[0] = 1;
 80024f2:	f642 3001 	movw	r0, #11009	; 0x2b01
 80024f6:	e7d0      	b.n	800249a <stbsp_vsprintfcb+0x6fa>
               cs = (((l >> 4) & 15)) << 24;
 80024f8:	f8dd 8004 	ldr.w	r8, [sp, #4]
         s = num + STBSP__NUMSZ;
 80024fc:	af8e      	add	r7, sp, #568	; 0x238
               l = 0;
 80024fe:	46c1      	mov	r9, r8
 8002500:	e60b      	b.n	800211a <stbsp_vsprintfcb+0x37a>
 8002502:	bf00      	nop
 8002504:	f3af 8000 	nop.w
 8002508:	05f5e0ff 	.word	0x05f5e0ff
 800250c:	00000000 	.word	0x00000000
 8002510:	05f5e100 	.word	0x05f5e100
 8002514:	00000000 	.word	0x00000000
 8002518:	20000476 	.word	0x20000476
 800251c:	2000049c 	.word	0x2000049c
 8002520:	20000489 	.word	0x20000489
 8002524:	2000049d 	.word	0x2000049d
               fl &= ~STBSP__TRIPLET_COMMA; // if no leading zeros, then no commas
 8002528:	f025 0540 	bic.w	r5, r5, #64	; 0x40
 800252c:	e614      	b.n	8002158 <stbsp_vsprintfcb+0x3b8>
                  stbsp__cb_buf_clamp(i, fw);
 800252e:	9800      	ldr	r0, [sp, #0]
 8002530:	b308      	cbz	r0, 8002576 <stbsp_vsprintfcb+0x7d6>
 8002532:	9801      	ldr	r0, [sp, #4]
 8002534:	1ba1      	subs	r1, r4, r6
 8002536:	f1c1 0280 	rsb	r2, r1, #128	; 0x80
 800253a:	4282      	cmp	r2, r0
 800253c:	bfa8      	it	ge
 800253e:	4602      	movge	r2, r0
                  fw -= i;
 8002540:	9901      	ldr	r1, [sp, #4]
 8002542:	1a88      	subs	r0, r1, r2
 8002544:	9001      	str	r0, [sp, #4]
                  while (i) {
 8002546:	b9c2      	cbnz	r2, 800257a <stbsp_vsprintfcb+0x7da>
                  stbsp__chk_cb_buf(1);
 8002548:	9a00      	ldr	r2, [sp, #0]
 800254a:	2a00      	cmp	r2, #0
 800254c:	f43f ae0c 	beq.w	8002168 <stbsp_vsprintfcb+0x3c8>
 8002550:	1ba2      	subs	r2, r4, r6
 8002552:	2a7e      	cmp	r2, #126	; 0x7e
 8002554:	f77f ae08 	ble.w	8002168 <stbsp_vsprintfcb+0x3c8>
 8002558:	9c04      	ldr	r4, [sp, #16]
 800255a:	9905      	ldr	r1, [sp, #20]
 800255c:	9306      	str	r3, [sp, #24]
 800255e:	4414      	add	r4, r2
 8002560:	4630      	mov	r0, r6
 8002562:	9e00      	ldr	r6, [sp, #0]
 8002564:	9404      	str	r4, [sp, #16]
 8002566:	47b0      	blx	r6
 8002568:	4606      	mov	r6, r0
 800256a:	2800      	cmp	r0, #0
 800256c:	f000 8135 	beq.w	80027da <stbsp_vsprintfcb+0xa3a>
 8002570:	4604      	mov	r4, r0
 8002572:	9b06      	ldr	r3, [sp, #24]
 8002574:	e5f8      	b.n	8002168 <stbsp_vsprintfcb+0x3c8>
 8002576:	9a01      	ldr	r2, [sp, #4]
 8002578:	e7e2      	b.n	8002540 <stbsp_vsprintfcb+0x7a0>
                     if ((((stbsp__uintptr)bf) & 3) == 0)
 800257a:	07a1      	lsls	r1, r4, #30
 800257c:	d008      	beq.n	8002590 <stbsp_vsprintfcb+0x7f0>
                     *bf++ = ' ';
 800257e:	f804 3b01 	strb.w	r3, [r4], #1
                     --i;
 8002582:	3a01      	subs	r2, #1
 8002584:	e7df      	b.n	8002546 <stbsp_vsprintfcb+0x7a6>
                     *(stbsp__uint32 *)bf = 0x20202020;
 8002586:	f04f 3120 	mov.w	r1, #538976288	; 0x20202020
 800258a:	f844 1b04 	str.w	r1, [r4], #4
                     i -= 4;
 800258e:	3a04      	subs	r2, #4
                  while (i >= 4) {
 8002590:	2a03      	cmp	r2, #3
 8002592:	dcf8      	bgt.n	8002586 <stbsp_vsprintfcb+0x7e6>
 8002594:	4422      	add	r2, r4
                  while (i) {
 8002596:	4294      	cmp	r4, r2
 8002598:	d0d6      	beq.n	8002548 <stbsp_vsprintfcb+0x7a8>
                     *bf++ = ' ';
 800259a:	f804 3b01 	strb.w	r3, [r4], #1
 800259e:	e7fa      	b.n	8002596 <stbsp_vsprintfcb+0x7f6>
               stbsp__cb_buf_clamp(i, lead[0]);
 80025a0:	9800      	ldr	r0, [sp, #0]
 80025a2:	4613      	mov	r3, r2
 80025a4:	b128      	cbz	r0, 80025b2 <stbsp_vsprintfcb+0x812>
 80025a6:	1ba3      	subs	r3, r4, r6
 80025a8:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80025ac:	4293      	cmp	r3, r2
 80025ae:	bfa8      	it	ge
 80025b0:	4613      	movge	r3, r2
               lead[0] -= (char)i;
 80025b2:	1ad2      	subs	r2, r2, r3
 80025b4:	18c8      	adds	r0, r1, r3
 80025b6:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
 80025ba:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
 80025be:	9006      	str	r0, [sp, #24]
               while (i) {
 80025c0:	9806      	ldr	r0, [sp, #24]
 80025c2:	4281      	cmp	r1, r0
 80025c4:	d113      	bne.n	80025ee <stbsp_vsprintfcb+0x84e>
               stbsp__chk_cb_buf(1);
 80025c6:	9900      	ldr	r1, [sp, #0]
 80025c8:	441c      	add	r4, r3
 80025ca:	b171      	cbz	r1, 80025ea <stbsp_vsprintfcb+0x84a>
 80025cc:	1ba2      	subs	r2, r4, r6
 80025ce:	2a7e      	cmp	r2, #126	; 0x7e
 80025d0:	dd0b      	ble.n	80025ea <stbsp_vsprintfcb+0x84a>
 80025d2:	9c04      	ldr	r4, [sp, #16]
 80025d4:	9905      	ldr	r1, [sp, #20]
 80025d6:	4414      	add	r4, r2
 80025d8:	4630      	mov	r0, r6
 80025da:	9e00      	ldr	r6, [sp, #0]
 80025dc:	9404      	str	r4, [sp, #16]
 80025de:	47b0      	blx	r6
 80025e0:	4606      	mov	r6, r0
 80025e2:	2800      	cmp	r0, #0
 80025e4:	f000 80f9 	beq.w	80027da <stbsp_vsprintfcb+0xa3a>
 80025e8:	4604      	mov	r4, r0
 80025ea:	9906      	ldr	r1, [sp, #24]
 80025ec:	e5c2      	b.n	8002174 <stbsp_vsprintfcb+0x3d4>
                  *bf++ = *sn++;
 80025ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80025f2:	f80c 2f01 	strb.w	r2, [ip, #1]!
 80025f6:	e7e3      	b.n	80025c0 <stbsp_vsprintfcb+0x820>
               stbsp__cb_buf_clamp(i, pr);
 80025f8:	9900      	ldr	r1, [sp, #0]
 80025fa:	b319      	cbz	r1, 8002644 <stbsp_vsprintfcb+0x8a4>
 80025fc:	9802      	ldr	r0, [sp, #8]
 80025fe:	1ba2      	subs	r2, r4, r6
 8002600:	f1c2 0280 	rsb	r2, r2, #128	; 0x80
 8002604:	4282      	cmp	r2, r0
 8002606:	bfa8      	it	ge
 8002608:	4602      	movge	r2, r0
               pr -= i;
 800260a:	9902      	ldr	r1, [sp, #8]
 800260c:	1a88      	subs	r0, r1, r2
               if ((fl & STBSP__TRIPLET_COMMA) == 0) {
 800260e:	9906      	ldr	r1, [sp, #24]
               pr -= i;
 8002610:	9002      	str	r0, [sp, #8]
               if ((fl & STBSP__TRIPLET_COMMA) == 0) {
 8002612:	b9f9      	cbnz	r1, 8002654 <stbsp_vsprintfcb+0x8b4>
                  while (i) {
 8002614:	b9c2      	cbnz	r2, 8002648 <stbsp_vsprintfcb+0x8a8>
               stbsp__chk_cb_buf(1);
 8002616:	9a00      	ldr	r2, [sp, #0]
 8002618:	2a00      	cmp	r2, #0
 800261a:	f43f adc2 	beq.w	80021a2 <stbsp_vsprintfcb+0x402>
 800261e:	1ba2      	subs	r2, r4, r6
 8002620:	2a7e      	cmp	r2, #126	; 0x7e
 8002622:	f77f adbe 	ble.w	80021a2 <stbsp_vsprintfcb+0x402>
 8002626:	9c04      	ldr	r4, [sp, #16]
 8002628:	9905      	ldr	r1, [sp, #20]
 800262a:	9307      	str	r3, [sp, #28]
 800262c:	4414      	add	r4, r2
 800262e:	4630      	mov	r0, r6
 8002630:	9e00      	ldr	r6, [sp, #0]
 8002632:	9404      	str	r4, [sp, #16]
 8002634:	47b0      	blx	r6
 8002636:	4606      	mov	r6, r0
 8002638:	2800      	cmp	r0, #0
 800263a:	f000 80ce 	beq.w	80027da <stbsp_vsprintfcb+0xa3a>
 800263e:	4604      	mov	r4, r0
 8002640:	9b07      	ldr	r3, [sp, #28]
 8002642:	e5ae      	b.n	80021a2 <stbsp_vsprintfcb+0x402>
 8002644:	9a02      	ldr	r2, [sp, #8]
 8002646:	e7e0      	b.n	800260a <stbsp_vsprintfcb+0x86a>
                     if ((((stbsp__uintptr)bf) & 3) == 0)
 8002648:	07a0      	lsls	r0, r4, #30
 800264a:	d108      	bne.n	800265e <stbsp_vsprintfcb+0x8be>
                     *(stbsp__uint32 *)bf = 0x30303030;
 800264c:	f04f 3030 	mov.w	r0, #808464432	; 0x30303030
                  while (i >= 4) {
 8002650:	2a03      	cmp	r2, #3
 8002652:	dc0a      	bgt.n	800266a <stbsp_vsprintfcb+0x8ca>
                     *bf++ = stbsp__comma;
 8002654:	496e      	ldr	r1, [pc, #440]	; (8002810 <stbsp_vsprintfcb+0xa70>)
 8002656:	4422      	add	r2, r4
 8002658:	f891 c000 	ldrb.w	ip, [r1]
 800265c:	e00d      	b.n	800267a <stbsp_vsprintfcb+0x8da>
                     *bf++ = '0';
 800265e:	f04f 0030 	mov.w	r0, #48	; 0x30
 8002662:	f804 0b01 	strb.w	r0, [r4], #1
                     --i;
 8002666:	3a01      	subs	r2, #1
 8002668:	e7d4      	b.n	8002614 <stbsp_vsprintfcb+0x874>
                     *(stbsp__uint32 *)bf = 0x30303030;
 800266a:	f844 0b04 	str.w	r0, [r4], #4
                     i -= 4;
 800266e:	3a04      	subs	r2, #4
 8002670:	e7ee      	b.n	8002650 <stbsp_vsprintfcb+0x8b0>
                     *bf++ = stbsp__comma;
 8002672:	f804 cc01 	strb.w	ip, [r4, #-1]
                     cs = 0;
 8002676:	f04f 0800 	mov.w	r8, #0
               while (i) {
 800267a:	4294      	cmp	r4, r2
 800267c:	d0cb      	beq.n	8002616 <stbsp_vsprintfcb+0x876>
                  if ((fl & STBSP__TRIPLET_COMMA) && (cs++ == c)) {
 800267e:	9806      	ldr	r0, [sp, #24]
 8002680:	3401      	adds	r4, #1
 8002682:	b118      	cbz	r0, 800268c <stbsp_vsprintfcb+0x8ec>
 8002684:	4598      	cmp	r8, r3
 8002686:	d0f4      	beq.n	8002672 <stbsp_vsprintfcb+0x8d2>
 8002688:	f108 0801 	add.w	r8, r8, #1
                     *bf++ = '0';
 800268c:	f04f 0130 	mov.w	r1, #48	; 0x30
 8002690:	f804 1c01 	strb.w	r1, [r4, #-1]
 8002694:	e7f1      	b.n	800267a <stbsp_vsprintfcb+0x8da>
            cs = (fl & STBSP__TRIPLET_COMMA) ? ((stbsp__uint32)(c - ((pr + cs) % (c + 1)))) : 0;
 8002696:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800269a:	e582      	b.n	80021a2 <stbsp_vsprintfcb+0x402>
            stbsp__cb_buf_clamp(i, lead[0]);
 800269c:	9800      	ldr	r0, [sp, #0]
 800269e:	4613      	mov	r3, r2
 80026a0:	b128      	cbz	r0, 80026ae <stbsp_vsprintfcb+0x90e>
 80026a2:	1ba1      	subs	r1, r4, r6
 80026a4:	f1c1 0380 	rsb	r3, r1, #128	; 0x80
 80026a8:	4293      	cmp	r3, r2
 80026aa:	bfa8      	it	ge
 80026ac:	4613      	movge	r3, r2
            lead[0] -= (char)i;
 80026ae:	1ad2      	subs	r2, r2, r3
 80026b0:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
 80026b4:	1e61      	subs	r1, r4, #1
 80026b6:	eb0c 0803 	add.w	r8, ip, r3
            while (i) {
 80026ba:	45c4      	cmp	ip, r8
 80026bc:	d116      	bne.n	80026ec <stbsp_vsprintfcb+0x94c>
 80026be:	441c      	add	r4, r3
            stbsp__chk_cb_buf(1);
 80026c0:	9b00      	ldr	r3, [sp, #0]
 80026c2:	b16b      	cbz	r3, 80026e0 <stbsp_vsprintfcb+0x940>
 80026c4:	1ba2      	subs	r2, r4, r6
 80026c6:	2a7e      	cmp	r2, #126	; 0x7e
 80026c8:	dd0a      	ble.n	80026e0 <stbsp_vsprintfcb+0x940>
 80026ca:	9c04      	ldr	r4, [sp, #16]
 80026cc:	9905      	ldr	r1, [sp, #20]
 80026ce:	4414      	add	r4, r2
 80026d0:	4630      	mov	r0, r6
 80026d2:	9e00      	ldr	r6, [sp, #0]
 80026d4:	9404      	str	r4, [sp, #16]
 80026d6:	47b0      	blx	r6
 80026d8:	4606      	mov	r6, r0
 80026da:	2800      	cmp	r0, #0
 80026dc:	d07d      	beq.n	80027da <stbsp_vsprintfcb+0xa3a>
 80026de:	4604      	mov	r4, r0
 80026e0:	46c4      	mov	ip, r8
         while (lead[0]) {
 80026e2:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
 80026e6:	2a00      	cmp	r2, #0
 80026e8:	d1d8      	bne.n	800269c <stbsp_vsprintfcb+0x8fc>
 80026ea:	e55e      	b.n	80021aa <stbsp_vsprintfcb+0x40a>
               *bf++ = *sn++;
 80026ec:	f81c 0b01 	ldrb.w	r0, [ip], #1
 80026f0:	f801 0f01 	strb.w	r0, [r1, #1]!
 80026f4:	e7e1      	b.n	80026ba <stbsp_vsprintfcb+0x91a>
         sn = lead + 1;
 80026f6:	f10d 0c29 	add.w	ip, sp, #41	; 0x29
 80026fa:	e7f2      	b.n	80026e2 <stbsp_vsprintfcb+0x942>
            stbsp__cb_buf_clamp(i, n);
 80026fc:	9800      	ldr	r0, [sp, #0]
 80026fe:	464b      	mov	r3, r9
 8002700:	b128      	cbz	r0, 800270e <stbsp_vsprintfcb+0x96e>
 8002702:	1ba3      	subs	r3, r4, r6
 8002704:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002708:	454b      	cmp	r3, r9
 800270a:	bfa8      	it	ge
 800270c:	464b      	movge	r3, r9
            n -= i;
 800270e:	eba9 0903 	sub.w	r9, r9, r3
            STBSP__UNALIGNED(while (i >= 4) {
 8002712:	2b03      	cmp	r3, #3
 8002714:	463a      	mov	r2, r7
 8002716:	dc19      	bgt.n	800274c <stbsp_vsprintfcb+0x9ac>
 8002718:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
 800271c:	441f      	add	r7, r3
            while (i) {
 800271e:	42ba      	cmp	r2, r7
 8002720:	d11a      	bne.n	8002758 <stbsp_vsprintfcb+0x9b8>
            stbsp__chk_cb_buf(1);
 8002722:	9900      	ldr	r1, [sp, #0]
 8002724:	441c      	add	r4, r3
 8002726:	2900      	cmp	r1, #0
 8002728:	f43f ad3f 	beq.w	80021aa <stbsp_vsprintfcb+0x40a>
 800272c:	1ba2      	subs	r2, r4, r6
 800272e:	2a7e      	cmp	r2, #126	; 0x7e
 8002730:	f77f ad3b 	ble.w	80021aa <stbsp_vsprintfcb+0x40a>
 8002734:	9c04      	ldr	r4, [sp, #16]
 8002736:	9905      	ldr	r1, [sp, #20]
 8002738:	4414      	add	r4, r2
 800273a:	4630      	mov	r0, r6
 800273c:	9e00      	ldr	r6, [sp, #0]
 800273e:	9404      	str	r4, [sp, #16]
 8002740:	47b0      	blx	r6
 8002742:	4606      	mov	r6, r0
 8002744:	2800      	cmp	r0, #0
 8002746:	d048      	beq.n	80027da <stbsp_vsprintfcb+0xa3a>
 8002748:	4604      	mov	r4, r0
 800274a:	e52e      	b.n	80021aa <stbsp_vsprintfcb+0x40a>
            STBSP__UNALIGNED(while (i >= 4) {
 800274c:	f857 0b04 	ldr.w	r0, [r7], #4
 8002750:	f844 0b04 	str.w	r0, [r4], #4
 8002754:	3b04      	subs	r3, #4
 8002756:	e7dc      	b.n	8002712 <stbsp_vsprintfcb+0x972>
               *bf++ = *s++;
 8002758:	f812 cb01 	ldrb.w	ip, [r2], #1
 800275c:	f808 cf01 	strb.w	ip, [r8, #1]!
 8002760:	e7dd      	b.n	800271e <stbsp_vsprintfcb+0x97e>
            stbsp__cb_buf_clamp(i, tail[0]);
 8002762:	9800      	ldr	r0, [sp, #0]
 8002764:	463a      	mov	r2, r7
 8002766:	b128      	cbz	r0, 8002774 <stbsp_vsprintfcb+0x9d4>
 8002768:	1ba2      	subs	r2, r4, r6
 800276a:	f1c2 0280 	rsb	r2, r2, #128	; 0x80
 800276e:	42ba      	cmp	r2, r7
 8002770:	bfa8      	it	ge
 8002772:	463a      	movge	r2, r7
            tail[0] -= (char)i;
 8002774:	1abb      	subs	r3, r7, r2
 8002776:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
 800277a:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
 800277e:	188f      	adds	r7, r1, r2
            while (i) {
 8002780:	42b9      	cmp	r1, r7
 8002782:	d111      	bne.n	80027a8 <stbsp_vsprintfcb+0xa08>
            stbsp__chk_cb_buf(1);
 8002784:	9900      	ldr	r1, [sp, #0]
 8002786:	4414      	add	r4, r2
 8002788:	b161      	cbz	r1, 80027a4 <stbsp_vsprintfcb+0xa04>
 800278a:	1ba2      	subs	r2, r4, r6
 800278c:	2a7e      	cmp	r2, #126	; 0x7e
 800278e:	dd09      	ble.n	80027a4 <stbsp_vsprintfcb+0xa04>
 8002790:	9c04      	ldr	r4, [sp, #16]
 8002792:	9905      	ldr	r1, [sp, #20]
 8002794:	4414      	add	r4, r2
 8002796:	4630      	mov	r0, r6
 8002798:	9e00      	ldr	r6, [sp, #0]
 800279a:	9404      	str	r4, [sp, #16]
 800279c:	47b0      	blx	r6
 800279e:	4606      	mov	r6, r0
 80027a0:	b1d8      	cbz	r0, 80027da <stbsp_vsprintfcb+0xa3a>
 80027a2:	4604      	mov	r4, r0
 80027a4:	4639      	mov	r1, r7
 80027a6:	e506      	b.n	80021b6 <stbsp_vsprintfcb+0x416>
               *bf++ = *sn++;
 80027a8:	f811 cb01 	ldrb.w	ip, [r1], #1
 80027ac:	f808 cf01 	strb.w	ip, [r8, #1]!
 80027b0:	e7e6      	b.n	8002780 <stbsp_vsprintfcb+0x9e0>
 80027b2:	9b01      	ldr	r3, [sp, #4]
 80027b4:	e51a      	b.n	80021ec <stbsp_vsprintfcb+0x44c>
                     if ((((stbsp__uintptr)bf) & 3) == 0)
 80027b6:	07a2      	lsls	r2, r4, #30
 80027b8:	d006      	beq.n	80027c8 <stbsp_vsprintfcb+0xa28>
                     *bf++ = ' ';
 80027ba:	f804 9b01 	strb.w	r9, [r4], #1
                     --i;
 80027be:	3b01      	subs	r3, #1
 80027c0:	e517      	b.n	80021f2 <stbsp_vsprintfcb+0x452>
                     *(stbsp__uint32 *)bf = 0x20202020;
 80027c2:	f844 7b04 	str.w	r7, [r4], #4
                     i -= 4;
 80027c6:	3b04      	subs	r3, #4
                  while (i >= 4) {
 80027c8:	2b03      	cmp	r3, #3
 80027ca:	dcfa      	bgt.n	80027c2 <stbsp_vsprintfcb+0xa22>
 80027cc:	4423      	add	r3, r4
                  while (i--)
 80027ce:	429c      	cmp	r4, r3
 80027d0:	f43f ad12 	beq.w	80021f8 <stbsp_vsprintfcb+0x458>
                     *bf++ = ' ';
 80027d4:	f804 9b01 	strb.w	r9, [r4], #1
 80027d8:	e7f9      	b.n	80027ce <stbsp_vsprintfcb+0xa2e>
 80027da:	2400      	movs	r4, #0
 80027dc:	4626      	mov	r6, r4
}
 80027de:	9d04      	ldr	r5, [sp, #16]
   return tlen + (int)(bf - buf);
 80027e0:	1ba0      	subs	r0, r4, r6
}
 80027e2:	4428      	add	r0, r5
 80027e4:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 80027e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   if (!callback)
 80027ec:	9d00      	ldr	r5, [sp, #0]
 80027ee:	b90d      	cbnz	r5, 80027f4 <stbsp_vsprintfcb+0xa54>
      *bf = 0;
 80027f0:	7025      	strb	r5, [r4, #0]
 80027f2:	e7f4      	b.n	80027de <stbsp_vsprintfcb+0xa3e>
 80027f4:	1ba2      	subs	r2, r4, r6
      stbsp__flush_cb();
 80027f6:	2a00      	cmp	r2, #0
 80027f8:	ddf1      	ble.n	80027de <stbsp_vsprintfcb+0xa3e>
 80027fa:	9904      	ldr	r1, [sp, #16]
 80027fc:	9f00      	ldr	r7, [sp, #0]
 80027fe:	4411      	add	r1, r2
 8002800:	9104      	str	r1, [sp, #16]
 8002802:	4630      	mov	r0, r6
 8002804:	9905      	ldr	r1, [sp, #20]
 8002806:	47b8      	blx	r7
 8002808:	4606      	mov	r6, r0
 800280a:	4604      	mov	r4, r0
done:
 800280c:	e7e7      	b.n	80027de <stbsp_vsprintfcb+0xa3e>
 800280e:	bf00      	nop
 8002810:	2000049c 	.word	0x2000049c

08002814 <stbsp_vsnprintf>:

STBSP__PUBLICDEF int STB_SPRINTF_DECORATE(vsnprintf)(char *buf, int count, char const *fmt, va_list va)
{
 8002814:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002816:	4605      	mov	r5, r0
 8002818:	b0a5      	sub	sp, #148	; 0x94
 800281a:	4616      	mov	r6, r2
 800281c:	461f      	mov	r7, r3
   stbsp__context c;
   int l;

   if (count == 0)
 800281e:	460c      	mov	r4, r1
 8002820:	b1b1      	cbz	r1, 8002850 <stbsp_vsnprintf+0x3c>
      return 0;

   c.buf = buf;
   c.count = count;

   STB_SPRINTF_DECORATE(vsprintfcb)(stbsp__clamp_callback, &c, stbsp__clamp_callback(0, &c, 0), fmt, va);
 8002822:	2200      	movs	r2, #0
   c.count = count;
 8002824:	e9cd 0102 	strd	r0, r1, [sp, #8]
   STB_SPRINTF_DECORATE(vsprintfcb)(stbsp__clamp_callback, &c, stbsp__clamp_callback(0, &c, 0), fmt, va);
 8002828:	a902      	add	r1, sp, #8
 800282a:	4610      	mov	r0, r2
 800282c:	f7ff fa92 	bl	8001d54 <stbsp__clamp_callback>
 8002830:	4633      	mov	r3, r6
 8002832:	4602      	mov	r2, r0
 8002834:	9700      	str	r7, [sp, #0]
 8002836:	a902      	add	r1, sp, #8
 8002838:	4807      	ldr	r0, [pc, #28]	; (8002858 <stbsp_vsnprintf+0x44>)
 800283a:	f7ff fab1 	bl	8001da0 <stbsp_vsprintfcb>

   // zero-terminate
   l = (int)(c.buf - buf);
 800283e:	9b02      	ldr	r3, [sp, #8]
 8002840:	1b58      	subs	r0, r3, r5
   if (l >= count) // should never be greater, only equal (or less) than count
 8002842:	4284      	cmp	r4, r0
      l = count - 1;
 8002844:	bfd8      	it	le
 8002846:	f104 30ff 	addle.w	r0, r4, #4294967295	; 0xffffffff
   buf[l] = 0;
 800284a:	2200      	movs	r2, #0
 800284c:	542a      	strb	r2, [r5, r0]

   return l;
 800284e:	4604      	mov	r4, r0
}
 8002850:	4620      	mov	r0, r4
 8002852:	b025      	add	sp, #148	; 0x94
 8002854:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002856:	bf00      	nop
 8002858:	08001d55 	.word	0x08001d55

0800285c <stbsp_snprintf>:

STBSP__PUBLICDEF int STB_SPRINTF_DECORATE(snprintf)(char *buf, int count, char const *fmt, ...)
{
 800285c:	b40c      	push	{r2, r3}
 800285e:	b507      	push	{r0, r1, r2, lr}
 8002860:	ab04      	add	r3, sp, #16
 8002862:	f853 2b04 	ldr.w	r2, [r3], #4
   int result;
   va_list va;
   va_start(va, fmt);
 8002866:	9301      	str	r3, [sp, #4]

   result = STB_SPRINTF_DECORATE(vsnprintf)(buf, count, fmt, va);
 8002868:	f7ff ffd4 	bl	8002814 <stbsp_vsnprintf>
   va_end(va);

   return result;
}
 800286c:	b003      	add	sp, #12
 800286e:	f85d eb04 	ldr.w	lr, [sp], #4
 8002872:	b002      	add	sp, #8
 8002874:	4770      	bx	lr

08002876 <ld_dword>:
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
	rv = rv << 8 | ptr[2];
 8002876:	8842      	ldrh	r2, [r0, #2]
	rv = rv << 8 | ptr[1];
 8002878:	7843      	ldrb	r3, [r0, #1]
	rv = rv << 8 | ptr[0];
 800287a:	7800      	ldrb	r0, [r0, #0]
	rv = rv << 8 | ptr[1];
 800287c:	ea43 2102 	orr.w	r1, r3, r2, lsl #8
	return rv;
}
 8002880:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 8002884:	4770      	bx	lr

08002886 <mem_cmp>:


/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt)	/* ZR:same, NZ:different */
{
 8002886:	b510      	push	{r4, lr}
 8002888:	4402      	add	r2, r0
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;

	do {
		r = *d++ - *s++;
 800288a:	f810 3b01 	ldrb.w	r3, [r0], #1
 800288e:	f811 4b01 	ldrb.w	r4, [r1], #1
	} while (--cnt && r == 0);
 8002892:	4290      	cmp	r0, r2
		r = *d++ - *s++;
 8002894:	eba3 0304 	sub.w	r3, r3, r4
	} while (--cnt && r == 0);
 8002898:	d001      	beq.n	800289e <mem_cmp+0x18>
 800289a:	2b00      	cmp	r3, #0
 800289c:	d0f5      	beq.n	800288a <mem_cmp+0x4>

	return r;
}
 800289e:	4618      	mov	r0, r3
 80028a0:	bd10      	pop	{r4, pc}

080028a2 <clst2sect>:
	FATFS* fs,		/* Filesystem object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;		/* Cluster number is origin from 2 */
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 80028a2:	68c3      	ldr	r3, [r0, #12]
	clst -= 2;		/* Cluster number is origin from 2 */
 80028a4:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 80028a6:	1e9a      	subs	r2, r3, #2
 80028a8:	428a      	cmp	r2, r1
	return fs->database + fs->csize * clst;		/* Start sector number of the cluster */
 80028aa:	bf83      	ittte	hi
 80028ac:	8942      	ldrhhi	r2, [r0, #10]
 80028ae:	6a00      	ldrhi	r0, [r0, #32]
 80028b0:	fb01 0002 	mlahi	r0, r1, r2, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 80028b4:	2000      	movls	r0, #0
}
 80028b6:	4770      	bx	lr

080028b8 <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80028b8:	6802      	ldr	r2, [r0, #0]
{
 80028ba:	b510      	push	{r4, lr}
	if (*path) {	/* If the pointer is not a null */
 80028bc:	b152      	cbz	r2, 80028d4 <get_ldnumber+0x1c>
 80028be:	4611      	mov	r1, r2
 80028c0:	460b      	mov	r3, r1
		for (tt = *path; (UINT)*tt >= (FF_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find a colon in the path */
 80028c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80028c6:	2c20      	cmp	r4, #32
 80028c8:	d90c      	bls.n	80028e4 <get_ldnumber+0x2c>
 80028ca:	2c3a      	cmp	r4, #58	; 0x3a
 80028cc:	d1f8      	bne.n	80028c0 <get_ldnumber+0x8>
		if (*tt == ':') {	/* If a colon is exist in the path name */
			tp = *path;
			i = *tp++;
 80028ce:	1c51      	adds	r1, r2, #1
			if (IsDigit(i) && tp == tt) {	/* Is there a numeric drive id + colon? */
 80028d0:	428b      	cmp	r3, r1
 80028d2:	d002      	beq.n	80028da <get_ldnumber+0x22>
	int vol = -1;
 80028d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80028d8:	e005      	b.n	80028e6 <get_ldnumber+0x2e>
				if ((i -= '0') < FF_VOLUMES) {	/* If drive id is found, get the value and strip it */
 80028da:	7812      	ldrb	r2, [r2, #0]
 80028dc:	2a30      	cmp	r2, #48	; 0x30
 80028de:	d1f9      	bne.n	80028d4 <get_ldnumber+0x1c>
					vol = (int)i;
					*path = ++tt;
 80028e0:	3301      	adds	r3, #1
 80028e2:	6003      	str	r3, [r0, #0]
#endif
		} else {	/* No volume id and use default drive */
#if FF_FS_RPATH != 0 && FF_VOLUMES >= 2
			vol = CurrVol;	/* Current drive */
#else
			vol = 0;		/* Drive 0 */
 80028e4:	2000      	movs	r0, #0
#endif
		}
	}
	return vol;
}
 80028e6:	bd10      	pop	{r4, pc}

080028e8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	FFOBJID* obj,	/* Pointer to the FFOBJID, the 1st member in the FIL/DIR object, to check validity */
	FATFS** rfs		/* Pointer to pointer to the owner filesystem object to return */
)
{
 80028e8:	b538      	push	{r3, r4, r5, lr}
 80028ea:	460d      	mov	r5, r1
	FRESULT res = FR_INVALID_OBJECT;


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80028ec:	4604      	mov	r4, r0
 80028ee:	b918      	cbnz	r0, 80028f8 <validate+0x10>
	FRESULT res = FR_INVALID_OBJECT;
 80028f0:	2009      	movs	r0, #9
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80028f2:	2400      	movs	r4, #0
 80028f4:	602c      	str	r4, [r5, #0]
	return res;
}
 80028f6:	bd38      	pop	{r3, r4, r5, pc}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80028f8:	6803      	ldr	r3, [r0, #0]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d0f8      	beq.n	80028f0 <validate+0x8>
 80028fe:	781a      	ldrb	r2, [r3, #0]
 8002900:	2a00      	cmp	r2, #0
 8002902:	d0f5      	beq.n	80028f0 <validate+0x8>
 8002904:	8881      	ldrh	r1, [r0, #4]
 8002906:	88d8      	ldrh	r0, [r3, #6]
 8002908:	4281      	cmp	r1, r0
 800290a:	d1f1      	bne.n	80028f0 <validate+0x8>
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800290c:	7858      	ldrb	r0, [r3, #1]
 800290e:	f7fe f8f9 	bl	8000b04 <disk_status>
 8002912:	f010 0001 	ands.w	r0, r0, #1
 8002916:	d1eb      	bne.n	80028f0 <validate+0x8>
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8002918:	6824      	ldr	r4, [r4, #0]
 800291a:	e7eb      	b.n	80028f4 <validate+0xc>

0800291c <ld_clust.isra.0>:
	rv = rv << 8 | ptr[0];
 800291c:	7eca      	ldrb	r2, [r1, #27]
 800291e:	7e8b      	ldrb	r3, [r1, #26]
	if (fs->fs_type == FS_FAT32) {
 8002920:	2803      	cmp	r0, #3
	cl = ld_word(dir + DIR_FstClusLO);
 8002922:	ea43 2c02 	orr.w	ip, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 8002926:	bf01      	itttt	eq
 8002928:	7d48      	ldrbeq	r0, [r1, #21]
 800292a:	7d0a      	ldrbeq	r2, [r1, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800292c:	ea42 2200 	orreq.w	r2, r2, r0, lsl #8
 8002930:	ea4c 4c02 	orreq.w	ip, ip, r2, lsl #16
}
 8002934:	4660      	mov	r0, ip
 8002936:	4770      	bx	lr

08002938 <get_fileinfo.part.1>:
void get_fileinfo (		/* No return code */
 8002938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		c = (TCHAR)dp->dir[i++];
 800293a:	69c5      	ldr	r5, [r0, #28]
	i = j = 0;
 800293c:	2300      	movs	r3, #0
void get_fileinfo (		/* No return code */
 800293e:	460c      	mov	r4, r1
 8002940:	1e68      	subs	r0, r5, #1
	i = j = 0;
 8002942:	4619      	mov	r1, r3
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8002944:	262e      	movs	r6, #46	; 0x2e
		c = (TCHAR)dp->dir[i++];
 8002946:	f810 2f01 	ldrb.w	r2, [r0, #1]!
		if (c == ' ') continue;				/* Skip padding spaces */
 800294a:	2a20      	cmp	r2, #32
		c = (TCHAR)dp->dir[i++];
 800294c:	f101 0101 	add.w	r1, r1, #1
		if (c == ' ') continue;				/* Skip padding spaces */
 8002950:	d00a      	beq.n	8002968 <get_fileinfo.part.1+0x30>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8002952:	2a05      	cmp	r2, #5
 8002954:	bf08      	it	eq
 8002956:	22e5      	moveq	r2, #229	; 0xe5
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8002958:	2909      	cmp	r1, #9
 800295a:	bf02      	ittt	eq
 800295c:	18e7      	addeq	r7, r4, r3
 800295e:	3301      	addeq	r3, #1
 8002960:	727e      	strbeq	r6, [r7, #9]
		fno->fname[j++] = c;
 8002962:	18e7      	adds	r7, r4, r3
 8002964:	3301      	adds	r3, #1
 8002966:	727a      	strb	r2, [r7, #9]
	while (i < 11) {		/* Copy name body and extension */
 8002968:	290b      	cmp	r1, #11
 800296a:	d1ec      	bne.n	8002946 <get_fileinfo.part.1+0xe>
	fno->fname[j] = 0;
 800296c:	4423      	add	r3, r4
 800296e:	2700      	movs	r7, #0
 8002970:	725f      	strb	r7, [r3, #9]
	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8002972:	7ae8      	ldrb	r0, [r5, #11]
 8002974:	7220      	strb	r0, [r4, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8002976:	f105 001c 	add.w	r0, r5, #28
 800297a:	f7ff ff7c 	bl	8002876 <ld_dword>
 800297e:	6020      	str	r0, [r4, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8002980:	f105 0016 	add.w	r0, r5, #22
 8002984:	f7ff ff77 	bl	8002876 <ld_dword>
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8002988:	0c05      	lsrs	r5, r0, #16
 800298a:	80e0      	strh	r0, [r4, #6]
 800298c:	80a5      	strh	r5, [r4, #4]
}
 800298e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002990 <move_window>:
{
 8002990:	b538      	push	{r3, r4, r5, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
 8002992:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002994:	428b      	cmp	r3, r1
{
 8002996:	4605      	mov	r5, r0
 8002998:	460c      	mov	r4, r1
	if (sector != fs->winsect) {	/* Window offset changed? */
 800299a:	d00e      	beq.n	80029ba <move_window+0x2a>
			if (disk_read(fs->pdrv, fs->win, sector, 1) != RES_OK) {
 800299c:	460a      	mov	r2, r1
 800299e:	2301      	movs	r3, #1
 80029a0:	f100 0128 	add.w	r1, r0, #40	; 0x28
 80029a4:	7840      	ldrb	r0, [r0, #1]
 80029a6:	f7fe f8b5 	bl	8000b14 <disk_read>
				res = FR_DISK_ERR;
 80029aa:	2800      	cmp	r0, #0
 80029ac:	bf16      	itet	ne
 80029ae:	f04f 34ff 	movne.w	r4, #4294967295	; 0xffffffff
 80029b2:	2000      	moveq	r0, #0
 80029b4:	2001      	movne	r0, #1
			fs->winsect = sector;
 80029b6:	626c      	str	r4, [r5, #36]	; 0x24
}
 80029b8:	bd38      	pop	{r3, r4, r5, pc}
	FRESULT res = FR_OK;
 80029ba:	2000      	movs	r0, #0
 80029bc:	e7fc      	b.n	80029b8 <move_window+0x28>
	...

080029c0 <check_fs>:
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80029c0:	2300      	movs	r3, #0
 80029c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
 80029c6:	b510      	push	{r4, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80029c8:	70c3      	strb	r3, [r0, #3]
 80029ca:	6242      	str	r2, [r0, #36]	; 0x24
{
 80029cc:	4604      	mov	r4, r0
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80029ce:	f7ff ffdf 	bl	8002990 <move_window>
 80029d2:	bb28      	cbnz	r0, 8002a20 <check_fs+0x60>
	rv = rv << 8 | ptr[0];
 80029d4:	f894 0227 	ldrb.w	r0, [r4, #551]	; 0x227
 80029d8:	f894 1226 	ldrb.w	r1, [r4, #550]	; 0x226
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80029dc:	f64a 2355 	movw	r3, #43605	; 0xaa55
	rv = rv << 8 | ptr[0];
 80029e0:	ea41 2c00 	orr.w	ip, r1, r0, lsl #8
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80029e4:	459c      	cmp	ip, r3
 80029e6:	d11d      	bne.n	8002a24 <check_fs+0x64>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {	/* Valid JumpBoot code? */
 80029e8:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 80029ec:	2ae9      	cmp	r2, #233	; 0xe9
 80029ee:	d005      	beq.n	80029fc <check_fs+0x3c>
 80029f0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80029f2:	4b0e      	ldr	r3, [pc, #56]	; (8002a2c <check_fs+0x6c>)
 80029f4:	f000 11ff 	and.w	r1, r0, #16711935	; 0xff00ff
 80029f8:	4299      	cmp	r1, r3
 80029fa:	d115      	bne.n	8002a28 <check_fs+0x68>
		if (!mem_cmp(fs->win + BS_FilSysType, "FAT", 3)) return 0;		/* Is it an FAT VBR? */
 80029fc:	2203      	movs	r2, #3
 80029fe:	490c      	ldr	r1, [pc, #48]	; (8002a30 <check_fs+0x70>)
 8002a00:	f104 005e 	add.w	r0, r4, #94	; 0x5e
 8002a04:	f7ff ff3f 	bl	8002886 <mem_cmp>
 8002a08:	b148      	cbz	r0, 8002a1e <check_fs+0x5e>
		if (!mem_cmp(fs->win + BS_FilSysType32, "FAT32", 5)) return 0;	/* Is it an FAT32 VBR? */
 8002a0a:	2205      	movs	r2, #5
 8002a0c:	4909      	ldr	r1, [pc, #36]	; (8002a34 <check_fs+0x74>)
 8002a0e:	f104 007a 	add.w	r0, r4, #122	; 0x7a
 8002a12:	f7ff ff38 	bl	8002886 <mem_cmp>
		if (!mem_cmp(fs->win + BS_FilSysType, "FAT", 3)) return 0;		/* Is it an FAT VBR? */
 8002a16:	2800      	cmp	r0, #0
 8002a18:	bf14      	ite	ne
 8002a1a:	2002      	movne	r0, #2
 8002a1c:	2000      	moveq	r0, #0
}
 8002a1e:	bd10      	pop	{r4, pc}
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8002a20:	2004      	movs	r0, #4
 8002a22:	e7fc      	b.n	8002a1e <check_fs+0x5e>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8002a24:	2003      	movs	r0, #3
 8002a26:	e7fa      	b.n	8002a1e <check_fs+0x5e>
	return 2;	/* Valid BS but not FAT */
 8002a28:	2002      	movs	r0, #2
 8002a2a:	e7f8      	b.n	8002a1e <check_fs+0x5e>
 8002a2c:	009000eb 	.word	0x009000eb
 8002a30:	080052ef 	.word	0x080052ef
 8002a34:	080052f3 	.word	0x080052f3

08002a38 <find_volume.isra.4>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
 8002a38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	*rfs = 0;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	600b      	str	r3, [r1, #0]
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
 8002a40:	460e      	mov	r6, r1
	vol = get_ldnumber(path);
 8002a42:	f7ff ff39 	bl	80028b8 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8002a46:	1e05      	subs	r5, r0, #0
 8002a48:	f2c0 80ba 	blt.w	8002bc0 <find_volume.isra.4+0x188>
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
 8002a4c:	4877      	ldr	r0, [pc, #476]	; (8002c2c <find_volume.isra.4+0x1f4>)
 8002a4e:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 8002a52:	2c00      	cmp	r4, #0
 8002a54:	f000 80b6 	beq.w	8002bc4 <find_volume.isra.4+0x18c>
	*rfs = fs;							/* Return pointer to the filesystem object */
 8002a58:	6034      	str	r4, [r6, #0]
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 8002a5a:	7821      	ldrb	r1, [r4, #0]
 8002a5c:	b951      	cbnz	r1, 8002a74 <find_volume.isra.4+0x3c>
	fs->fs_type = 0;					/* Clear the filesystem object */
 8002a5e:	2200      	movs	r2, #0
	fs->pdrv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8002a60:	b2e8      	uxtb	r0, r5
	fs->fs_type = 0;					/* Clear the filesystem object */
 8002a62:	7022      	strb	r2, [r4, #0]
	fs->pdrv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8002a64:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->pdrv);	/* Initialize the physical drive */
 8002a66:	f7fe f83f 	bl	8000ae8 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8002a6a:	f010 0601 	ands.w	r6, r0, #1
 8002a6e:	d00a      	beq.n	8002a86 <find_volume.isra.4+0x4e>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8002a70:	2003      	movs	r0, #3
 8002a72:	e005      	b.n	8002a80 <find_volume.isra.4+0x48>
		stat = disk_status(fs->pdrv);
 8002a74:	7860      	ldrb	r0, [r4, #1]
 8002a76:	f7fe f845 	bl	8000b04 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8002a7a:	f010 0001 	ands.w	r0, r0, #1
 8002a7e:	d1ee      	bne.n	8002a5e <find_volume.isra.4+0x26>
}
 8002a80:	b004      	add	sp, #16
 8002a82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8002a86:	4631      	mov	r1, r6
 8002a88:	4620      	mov	r0, r4
 8002a8a:	f7ff ff99 	bl	80029c0 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8002a8e:	2802      	cmp	r0, #2
 8002a90:	d17d      	bne.n	8002b8e <find_volume.isra.4+0x156>
 8002a92:	f504 77f7 	add.w	r7, r4, #494	; 0x1ee
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8002a96:	f817 0c04 	ldrb.w	r0, [r7, #-4]
 8002a9a:	b110      	cbz	r0, 8002aa2 <find_volume.isra.4+0x6a>
 8002a9c:	4638      	mov	r0, r7
 8002a9e:	f7ff feea 	bl	8002876 <ld_dword>
 8002aa2:	f84d 0026 	str.w	r0, [sp, r6, lsl #2]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8002aa6:	3601      	adds	r6, #1
 8002aa8:	2e04      	cmp	r6, #4
 8002aaa:	f107 0710 	add.w	r7, r7, #16
 8002aae:	d1f2      	bne.n	8002a96 <find_volume.isra.4+0x5e>
 8002ab0:	2500      	movs	r5, #0
			bsect = br[i];
 8002ab2:	f85d 6025 	ldr.w	r6, [sp, r5, lsl #2]
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8002ab6:	2e00      	cmp	r6, #0
 8002ab8:	d061      	beq.n	8002b7e <find_volume.isra.4+0x146>
 8002aba:	4631      	mov	r1, r6
 8002abc:	4620      	mov	r0, r4
 8002abe:	f7ff ff7f 	bl	80029c0 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8002ac2:	2801      	cmp	r0, #1
 8002ac4:	d85c      	bhi.n	8002b80 <find_volume.isra.4+0x148>
	rv = rv << 8 | ptr[0];
 8002ac6:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 8002aca:	f894 8033 	ldrb.w	r8, [r4, #51]	; 0x33
 8002ace:	ea48 2900 	orr.w	r9, r8, r0, lsl #8
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8002ad2:	f5b9 7f00 	cmp.w	r9, #512	; 0x200
 8002ad6:	d15e      	bne.n	8002b96 <find_volume.isra.4+0x15e>
	rv = rv << 8 | ptr[0];
 8002ad8:	f894 a03f 	ldrb.w	sl, [r4, #63]	; 0x3f
 8002adc:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8002ae0:	ea53 270a 	orrs.w	r7, r3, sl, lsl #8
 8002ae4:	d104      	bne.n	8002af0 <find_volume.isra.4+0xb8>
 8002ae6:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8002aea:	f7ff fec4 	bl	8002876 <ld_dword>
 8002aee:	4607      	mov	r7, r0
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8002af0:	f894 a038 	ldrb.w	sl, [r4, #56]	; 0x38
		fs->fsize = fasize;
 8002af4:	6127      	str	r7, [r4, #16]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8002af6:	f10a 31ff 	add.w	r1, sl, #4294967295	; 0xffffffff
 8002afa:	2901      	cmp	r1, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8002afc:	f884 a002 	strb.w	sl, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8002b00:	d849      	bhi.n	8002b96 <find_volume.isra.4+0x15e>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8002b02:	f894 9035 	ldrb.w	r9, [r4, #53]	; 0x35
 8002b06:	fa1f f289 	uxth.w	r2, r9
 8002b0a:	8162      	strh	r2, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8002b0c:	2a00      	cmp	r2, #0
 8002b0e:	d042      	beq.n	8002b96 <find_volume.isra.4+0x15e>
 8002b10:	f109 35ff 	add.w	r5, r9, #4294967295	; 0xffffffff
 8002b14:	ea15 0f09 	tst.w	r5, r9
 8002b18:	d13d      	bne.n	8002b96 <find_volume.isra.4+0x15e>
	rv = rv << 8 | ptr[0];
 8002b1a:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
 8002b1e:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8002b22:	ea43 2800 	orr.w	r8, r3, r0, lsl #8
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8002b26:	f018 0f0f 	tst.w	r8, #15
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8002b2a:	f8a4 8008 	strh.w	r8, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8002b2e:	d132      	bne.n	8002b96 <find_volume.isra.4+0x15e>
	rv = rv << 8 | ptr[0];
 8002b30:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
 8002b34:	f894 203b 	ldrb.w	r2, [r4, #59]	; 0x3b
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8002b38:	ea52 2001 	orrs.w	r0, r2, r1, lsl #8
 8002b3c:	d103      	bne.n	8002b46 <find_volume.isra.4+0x10e>
 8002b3e:	f104 0048 	add.w	r0, r4, #72	; 0x48
 8002b42:	f7ff fe98 	bl	8002876 <ld_dword>
	rv = rv << 8 | ptr[0];
 8002b46:	f894 5037 	ldrb.w	r5, [r4, #55]	; 0x37
 8002b4a:	f894 c036 	ldrb.w	ip, [r4, #54]	; 0x36
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8002b4e:	ea5c 2305 	orrs.w	r3, ip, r5, lsl #8
 8002b52:	d020      	beq.n	8002b96 <find_volume.isra.4+0x15e>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8002b54:	fb07 fe0a 	mul.w	lr, r7, sl
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8002b58:	eb03 1218 	add.w	r2, r3, r8, lsr #4
 8002b5c:	4472      	add	r2, lr
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8002b5e:	4282      	cmp	r2, r0
 8002b60:	d819      	bhi.n	8002b96 <find_volume.isra.4+0x15e>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8002b62:	1a80      	subs	r0, r0, r2
 8002b64:	fbb0 f5f9 	udiv	r5, r0, r9
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8002b68:	b1ad      	cbz	r5, 8002b96 <find_volume.isra.4+0x15e>
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 8002b6a:	4931      	ldr	r1, [pc, #196]	; (8002c30 <find_volume.isra.4+0x1f8>)
 8002b6c:	428d      	cmp	r5, r1
 8002b6e:	d812      	bhi.n	8002b96 <find_volume.isra.4+0x15e>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8002b70:	f64f 70f5 	movw	r0, #65525	; 0xfff5
 8002b74:	4285      	cmp	r5, r0
 8002b76:	d927      	bls.n	8002bc8 <find_volume.isra.4+0x190>
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 8002b78:	f04f 0a03 	mov.w	sl, #3
 8002b7c:	e02c      	b.n	8002bd8 <find_volume.isra.4+0x1a0>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8002b7e:	2003      	movs	r0, #3
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8002b80:	3501      	adds	r5, #1
 8002b82:	2d04      	cmp	r5, #4
 8002b84:	d195      	bne.n	8002ab2 <find_volume.isra.4+0x7a>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8002b86:	2804      	cmp	r0, #4
 8002b88:	d105      	bne.n	8002b96 <find_volume.isra.4+0x15e>
 8002b8a:	2001      	movs	r0, #1
 8002b8c:	e778      	b.n	8002a80 <find_volume.isra.4+0x48>
 8002b8e:	2804      	cmp	r0, #4
 8002b90:	d0fb      	beq.n	8002b8a <find_volume.isra.4+0x152>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8002b92:	2801      	cmp	r0, #1
 8002b94:	d997      	bls.n	8002ac6 <find_volume.isra.4+0x8e>
 8002b96:	200d      	movs	r0, #13
 8002b98:	e772      	b.n	8002a80 <find_volume.isra.4+0x48>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8002b9a:	f1b8 0f00 	cmp.w	r8, #0
 8002b9e:	d0fa      	beq.n	8002b96 <find_volume.isra.4+0x15e>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8002ba0:	f1ba 0f02 	cmp.w	sl, #2
 8002ba4:	ea4f 0645 	mov.w	r6, r5, lsl #1
 8002ba8:	bf18      	it	ne
 8002baa:	1976      	addne	r6, r6, r5
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8002bac:	4473      	add	r3, lr
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8002bae:	bf18      	it	ne
 8002bb0:	f005 0501 	andne.w	r5, r5, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8002bb4:	61e3      	str	r3, [r4, #28]
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8002bb6:	bf0c      	ite	eq
 8002bb8:	4635      	moveq	r5, r6
 8002bba:	eb05 0556 	addne.w	r5, r5, r6, lsr #1
 8002bbe:	e025      	b.n	8002c0c <find_volume.isra.4+0x1d4>
	if (vol < 0) return FR_INVALID_DRIVE;
 8002bc0:	200b      	movs	r0, #11
 8002bc2:	e75d      	b.n	8002a80 <find_volume.isra.4+0x48>
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 8002bc4:	200c      	movs	r0, #12
 8002bc6:	e75b      	b.n	8002a80 <find_volume.isra.4+0x48>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8002bc8:	f640 71f5 	movw	r1, #4085	; 0xff5
 8002bcc:	428d      	cmp	r5, r1
 8002bce:	bf94      	ite	ls
 8002bd0:	f04f 0a01 	movls.w	sl, #1
 8002bd4:	f04f 0a02 	movhi.w	sl, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8002bd8:	4433      	add	r3, r6
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8002bda:	3502      	adds	r5, #2
		fs->volbase = bsect;							/* Volume start sector */
 8002bdc:	6166      	str	r6, [r4, #20]
		if (fmt == FS_FAT32) {
 8002bde:	f1ba 0f03 	cmp.w	sl, #3
		fs->database = bsect + sysect;					/* Data start sector */
 8002be2:	4416      	add	r6, r2
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8002be4:	60e5      	str	r5, [r4, #12]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8002be6:	61a3      	str	r3, [r4, #24]
		fs->database = bsect + sysect;					/* Data start sector */
 8002be8:	6226      	str	r6, [r4, #32]
		if (fmt == FS_FAT32) {
 8002bea:	d1d6      	bne.n	8002b9a <find_volume.isra.4+0x162>
	rv = rv << 8 | ptr[0];
 8002bec:	f894 9053 	ldrb.w	r9, [r4, #83]	; 0x53
 8002bf0:	f894 c052 	ldrb.w	ip, [r4, #82]	; 0x52
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8002bf4:	ea5c 2309 	orrs.w	r3, ip, r9, lsl #8
 8002bf8:	d1cd      	bne.n	8002b96 <find_volume.isra.4+0x15e>
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8002bfa:	f1b8 0f00 	cmp.w	r8, #0
 8002bfe:	d1ca      	bne.n	8002b96 <find_volume.isra.4+0x15e>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8002c00:	f104 0054 	add.w	r0, r4, #84	; 0x54
 8002c04:	f7ff fe37 	bl	8002876 <ld_dword>
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8002c08:	00ad      	lsls	r5, r5, #2
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8002c0a:	61e0      	str	r0, [r4, #28]
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8002c0c:	f205 13ff 	addw	r3, r5, #511	; 0x1ff
 8002c10:	ebb7 2f53 	cmp.w	r7, r3, lsr #9
 8002c14:	d3bf      	bcc.n	8002b96 <find_volume.isra.4+0x15e>
	fs->id = ++Fsid;		/* Volume mount ID */
 8002c16:	4f07      	ldr	r7, [pc, #28]	; (8002c34 <find_volume.isra.4+0x1fc>)
	fs->fs_type = fmt;		/* FAT sub-type */
 8002c18:	f884 a000 	strb.w	sl, [r4]
	fs->id = ++Fsid;		/* Volume mount ID */
 8002c1c:	883a      	ldrh	r2, [r7, #0]
 8002c1e:	3201      	adds	r2, #1
 8002c20:	b295      	uxth	r5, r2
 8002c22:	803d      	strh	r5, [r7, #0]
 8002c24:	80e5      	strh	r5, [r4, #6]
	return FR_OK;
 8002c26:	2000      	movs	r0, #0
 8002c28:	e72a      	b.n	8002a80 <find_volume.isra.4+0x48>
 8002c2a:	bf00      	nop
 8002c2c:	20004a3c 	.word	0x20004a3c
 8002c30:	0ffffff5 	.word	0x0ffffff5
 8002c34:	20004a40 	.word	0x20004a40

08002c38 <get_fat.isra.5>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8002c38:	2901      	cmp	r1, #1
DWORD get_fat (		/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 8002c3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c3c:	4605      	mov	r5, r0
 8002c3e:	460c      	mov	r4, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8002c40:	d952      	bls.n	8002ce8 <get_fat.isra.5+0xb0>
 8002c42:	68c3      	ldr	r3, [r0, #12]
 8002c44:	4299      	cmp	r1, r3
 8002c46:	d24f      	bcs.n	8002ce8 <get_fat.isra.5+0xb0>
		switch (fs->fs_type) {
 8002c48:	7801      	ldrb	r1, [r0, #0]
 8002c4a:	2902      	cmp	r1, #2
 8002c4c:	d029      	beq.n	8002ca2 <get_fat.isra.5+0x6a>
 8002c4e:	2903      	cmp	r1, #3
 8002c50:	d038      	beq.n	8002cc4 <get_fat.isra.5+0x8c>
 8002c52:	2901      	cmp	r1, #1
 8002c54:	d148      	bne.n	8002ce8 <get_fat.isra.5+0xb0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002c56:	6982      	ldr	r2, [r0, #24]
			bc = (UINT)clst; bc += bc / 2;
 8002c58:	eb04 0654 	add.w	r6, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002c5c:	eb02 2156 	add.w	r1, r2, r6, lsr #9
 8002c60:	f7ff fe96 	bl	8002990 <move_window>
 8002c64:	b110      	cbz	r0, 8002c6c <get_fat.isra.5+0x34>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8002c66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8002c6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 8002c6c:	f3c6 0008 	ubfx	r0, r6, #0, #9
 8002c70:	4428      	add	r0, r5
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002c72:	69ab      	ldr	r3, [r5, #24]
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 8002c74:	1c77      	adds	r7, r6, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002c76:	eb03 2157 	add.w	r1, r3, r7, lsr #9
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 8002c7a:	f890 6028 	ldrb.w	r6, [r0, #40]	; 0x28
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002c7e:	4628      	mov	r0, r5
 8002c80:	f7ff fe86 	bl	8002990 <move_window>
 8002c84:	2800      	cmp	r0, #0
 8002c86:	d1ee      	bne.n	8002c66 <get_fat.isra.5+0x2e>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 8002c88:	f3c7 0c08 	ubfx	ip, r7, #0, #9
 8002c8c:	4465      	add	r5, ip
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 8002c8e:	07e3      	lsls	r3, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 8002c90:	f895 5028 	ldrb.w	r5, [r5, #40]	; 0x28
 8002c94:	ea46 2005 	orr.w	r0, r6, r5, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 8002c98:	bf4c      	ite	mi
 8002c9a:	0900      	lsrmi	r0, r0, #4
 8002c9c:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
 8002ca0:	e7e3      	b.n	8002c6a <get_fat.isra.5+0x32>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8002ca2:	6982      	ldr	r2, [r0, #24]
 8002ca4:	eb02 2114 	add.w	r1, r2, r4, lsr #8
 8002ca8:	f7ff fe72 	bl	8002990 <move_window>
 8002cac:	2800      	cmp	r0, #0
 8002cae:	d1da      	bne.n	8002c66 <get_fat.isra.5+0x2e>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 8002cb0:	0067      	lsls	r7, r4, #1
 8002cb2:	f407 70ff 	and.w	r0, r7, #510	; 0x1fe
 8002cb6:	3528      	adds	r5, #40	; 0x28
 8002cb8:	182e      	adds	r6, r5, r0
	rv = rv << 8 | ptr[0];
 8002cba:	5c2d      	ldrb	r5, [r5, r0]
 8002cbc:	7873      	ldrb	r3, [r6, #1]
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 8002cbe:	ea45 2003 	orr.w	r0, r5, r3, lsl #8
 8002cc2:	e7d2      	b.n	8002c6a <get_fat.isra.5+0x32>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8002cc4:	6981      	ldr	r1, [r0, #24]
 8002cc6:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8002cca:	f7ff fe61 	bl	8002990 <move_window>
 8002cce:	2800      	cmp	r0, #0
 8002cd0:	d1c9      	bne.n	8002c66 <get_fat.isra.5+0x2e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
 8002cd2:	00a4      	lsls	r4, r4, #2
 8002cd4:	f404 7efe 	and.w	lr, r4, #508	; 0x1fc
 8002cd8:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8002cdc:	4470      	add	r0, lr
 8002cde:	f7ff fdca 	bl	8002876 <ld_dword>
 8002ce2:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
 8002ce6:	e7c0      	b.n	8002c6a <get_fat.isra.5+0x32>
			val = 1;	/* Internal error */
 8002ce8:	2001      	movs	r0, #1
 8002cea:	e7be      	b.n	8002c6a <get_fat.isra.5+0x32>

08002cec <dir_next.isra.6>:
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
 8002cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (dp->sect == 0 || ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8002cee:	6983      	ldr	r3, [r0, #24]
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
 8002cf0:	4604      	mov	r4, r0
	if (dp->sect == 0 || ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8002cf2:	b193      	cbz	r3, 8002d1a <dir_next.isra.6+0x2e>
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8002cf4:	6906      	ldr	r6, [r0, #16]
 8002cf6:	3620      	adds	r6, #32
	if (dp->sect == 0 || ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8002cf8:	f5b6 1f00 	cmp.w	r6, #2097152	; 0x200000
 8002cfc:	d20d      	bcs.n	8002d1a <dir_next.isra.6+0x2e>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8002cfe:	f3c6 0708 	ubfx	r7, r6, #0, #9
	FATFS *fs = dp->obj.fs;
 8002d02:	6805      	ldr	r5, [r0, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8002d04:	bb07      	cbnz	r7, 8002d48 <dir_next.isra.6+0x5c>
		if (dp->clust == 0) {	/* Static table */
 8002d06:	6941      	ldr	r1, [r0, #20]
		dp->sect++;				/* Next sector */
 8002d08:	3301      	adds	r3, #1
 8002d0a:	6183      	str	r3, [r0, #24]
		if (dp->clust == 0) {	/* Static table */
 8002d0c:	b939      	cbnz	r1, 8002d1e <dir_next.isra.6+0x32>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8002d0e:	8929      	ldrh	r1, [r5, #8]
 8002d10:	ebb1 1f56 	cmp.w	r1, r6, lsr #5
 8002d14:	d818      	bhi.n	8002d48 <dir_next.isra.6+0x5c>
				dp->sect = 0; return FR_NO_FILE;
 8002d16:	2600      	movs	r6, #0
 8002d18:	61a6      	str	r6, [r4, #24]
	if (dp->sect == 0 || ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8002d1a:	2004      	movs	r0, #4
 8002d1c:	e019      	b.n	8002d52 <dir_next.isra.6+0x66>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
 8002d1e:	8968      	ldrh	r0, [r5, #10]
 8002d20:	1e42      	subs	r2, r0, #1
 8002d22:	ea12 2356 	ands.w	r3, r2, r6, lsr #9
 8002d26:	d10f      	bne.n	8002d48 <dir_next.isra.6+0x5c>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 8002d28:	4628      	mov	r0, r5
 8002d2a:	f7ff ff85 	bl	8002c38 <get_fat.isra.5>
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 8002d2e:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 8002d30:	4601      	mov	r1, r0
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 8002d32:	d90f      	bls.n	8002d54 <dir_next.isra.6+0x68>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8002d34:	1c43      	adds	r3, r0, #1
 8002d36:	d00f      	beq.n	8002d58 <dir_next.isra.6+0x6c>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
 8002d38:	68eb      	ldr	r3, [r5, #12]
 8002d3a:	4298      	cmp	r0, r3
 8002d3c:	d2eb      	bcs.n	8002d16 <dir_next.isra.6+0x2a>
				dp->clust = clst;		/* Initialize data for new cluster */
 8002d3e:	6160      	str	r0, [r4, #20]
				dp->sect = clst2sect(fs, clst);
 8002d40:	4628      	mov	r0, r5
 8002d42:	f7ff fdae 	bl	80028a2 <clst2sect>
 8002d46:	61a0      	str	r0, [r4, #24]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8002d48:	3528      	adds	r5, #40	; 0x28
 8002d4a:	443d      	add	r5, r7
	dp->dptr = ofs;						/* Current entry */
 8002d4c:	6126      	str	r6, [r4, #16]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8002d4e:	61e5      	str	r5, [r4, #28]
	return FR_OK;
 8002d50:	2000      	movs	r0, #0
}
 8002d52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 8002d54:	2002      	movs	r0, #2
 8002d56:	e7fc      	b.n	8002d52 <dir_next.isra.6+0x66>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8002d58:	2001      	movs	r0, #1
 8002d5a:	e7fa      	b.n	8002d52 <dir_next.isra.6+0x66>

08002d5c <dir_sdi.constprop.8>:
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 8002d5c:	b570      	push	{r4, r5, r6, lr}
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8002d5e:	6885      	ldr	r5, [r0, #8]
	FATFS *fs = dp->obj.fs;
 8002d60:	6804      	ldr	r4, [r0, #0]
	dp->dptr = ofs;				/* Set current offset */
 8002d62:	2300      	movs	r3, #0
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 8002d64:	4606      	mov	r6, r0
	dp->dptr = ofs;				/* Set current offset */
 8002d66:	6103      	str	r3, [r0, #16]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8002d68:	b995      	cbnz	r5, 8002d90 <dir_sdi.constprop.8+0x34>
 8002d6a:	7821      	ldrb	r1, [r4, #0]
 8002d6c:	2902      	cmp	r1, #2
 8002d6e:	d901      	bls.n	8002d74 <dir_sdi.constprop.8+0x18>
		clst = fs->dirbase;
 8002d70:	69e0      	ldr	r0, [r4, #28]
	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
 8002d72:	b970      	cbnz	r0, 8002d92 <dir_sdi.constprop.8+0x36>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
 8002d74:	8920      	ldrh	r0, [r4, #8]
 8002d76:	b908      	cbnz	r0, 8002d7c <dir_sdi.constprop.8+0x20>
 8002d78:	2002      	movs	r0, #2
}
 8002d7a:	bd70      	pop	{r4, r5, r6, pc}
		dp->sect = fs->dirbase;
 8002d7c:	69e1      	ldr	r1, [r4, #28]
 8002d7e:	61b1      	str	r1, [r6, #24]
	if (dp->sect == 0) return FR_INT_ERR;
 8002d80:	69b2      	ldr	r2, [r6, #24]
	dp->clust = clst;					/* Current cluster# */
 8002d82:	6175      	str	r5, [r6, #20]
	if (dp->sect == 0) return FR_INT_ERR;
 8002d84:	2a00      	cmp	r2, #0
 8002d86:	d0f7      	beq.n	8002d78 <dir_sdi.constprop.8+0x1c>
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8002d88:	3428      	adds	r4, #40	; 0x28
 8002d8a:	61f4      	str	r4, [r6, #28]
	return FR_OK;
 8002d8c:	2000      	movs	r0, #0
 8002d8e:	e7f4      	b.n	8002d7a <dir_sdi.constprop.8+0x1e>
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8002d90:	4628      	mov	r0, r5
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8002d92:	8962      	ldrh	r2, [r4, #10]
 8002d94:	4605      	mov	r5, r0
		while (ofs >= csz) {				/* Follow cluster chain */
 8002d96:	b962      	cbnz	r2, 8002db2 <dir_sdi.constprop.8+0x56>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8002d98:	4629      	mov	r1, r5
 8002d9a:	6830      	ldr	r0, [r6, #0]
 8002d9c:	f7ff ff4c 	bl	8002c38 <get_fat.isra.5>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8002da0:	1c43      	adds	r3, r0, #1
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8002da2:	4605      	mov	r5, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8002da4:	d00b      	beq.n	8002dbe <dir_sdi.constprop.8+0x62>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8002da6:	2801      	cmp	r0, #1
 8002da8:	d9e6      	bls.n	8002d78 <dir_sdi.constprop.8+0x1c>
 8002daa:	68e3      	ldr	r3, [r4, #12]
 8002dac:	4298      	cmp	r0, r3
 8002dae:	d3f3      	bcc.n	8002d98 <dir_sdi.constprop.8+0x3c>
 8002db0:	e7e2      	b.n	8002d78 <dir_sdi.constprop.8+0x1c>
		dp->sect = clst2sect(fs, clst);
 8002db2:	4601      	mov	r1, r0
 8002db4:	4620      	mov	r0, r4
 8002db6:	f7ff fd74 	bl	80028a2 <clst2sect>
 8002dba:	61b0      	str	r0, [r6, #24]
 8002dbc:	e7e0      	b.n	8002d80 <dir_sdi.constprop.8+0x24>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8002dbe:	2001      	movs	r0, #1
 8002dc0:	e7db      	b.n	8002d7a <dir_sdi.constprop.8+0x1e>
	...

08002dc4 <follow_path>:
{
 8002dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	FATFS *fs = dp->obj.fs;
 8002dc8:	f8d0 8000 	ldr.w	r8, [r0]
{
 8002dcc:	4605      	mov	r5, r0
 8002dce:	460e      	mov	r6, r1
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8002dd0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002dd4:	2b2f      	cmp	r3, #47	; 0x2f
 8002dd6:	d0fa      	beq.n	8002dce <follow_path+0xa>
 8002dd8:	2b5c      	cmp	r3, #92	; 0x5c
 8002dda:	d0f8      	beq.n	8002dce <follow_path+0xa>
		dp->obj.sclust = 0;					/* Start from root directory */
 8002ddc:	2000      	movs	r0, #0
 8002dde:	60a8      	str	r0, [r5, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8002de0:	7831      	ldrb	r1, [r6, #0]
 8002de2:	291f      	cmp	r1, #31
 8002de4:	d953      	bls.n	8002e8e <follow_path+0xca>
	p = *path; sfn = dp->fn;
 8002de6:	f105 0720 	add.w	r7, r5, #32
 8002dea:	f105 092b 	add.w	r9, r5, #43	; 0x2b
	BYTE *d = (BYTE*)dst;
 8002dee:	463c      	mov	r4, r7
		*d++ = (BYTE)val;
 8002df0:	2220      	movs	r2, #32
 8002df2:	f804 2b01 	strb.w	r2, [r4], #1
	} while (--cnt);
 8002df6:	454c      	cmp	r4, r9
 8002df8:	d1fb      	bne.n	8002df2 <follow_path+0x2e>
	si = i = 0; ni = 8;
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	4610      	mov	r0, r2
 8002dfe:	2408      	movs	r4, #8
		c = (BYTE)p[si++];
 8002e00:	5c33      	ldrb	r3, [r6, r0]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8002e02:	2b20      	cmp	r3, #32
		c = (BYTE)p[si++];
 8002e04:	f100 0101 	add.w	r1, r0, #1
		if (c <= ' ') break; 			/* Break if end of the path name */
 8002e08:	d90b      	bls.n	8002e22 <follow_path+0x5e>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8002e0a:	2b2f      	cmp	r3, #47	; 0x2f
 8002e0c:	d001      	beq.n	8002e12 <follow_path+0x4e>
 8002e0e:	2b5c      	cmp	r3, #92	; 0x5c
 8002e10:	d145      	bne.n	8002e9e <follow_path+0xda>
 8002e12:	1870      	adds	r0, r6, r1
 8002e14:	1b81      	subs	r1, r0, r6
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8002e16:	f810 4b01 	ldrb.w	r4, [r0], #1
 8002e1a:	2c2f      	cmp	r4, #47	; 0x2f
 8002e1c:	d0fa      	beq.n	8002e14 <follow_path+0x50>
 8002e1e:	2c5c      	cmp	r4, #92	; 0x5c
 8002e20:	d0f8      	beq.n	8002e14 <follow_path+0x50>
	*path = p + si;						/* Return pointer to the next segment */
 8002e22:	440e      	add	r6, r1
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8002e24:	2a00      	cmp	r2, #0
 8002e26:	d051      	beq.n	8002ecc <follow_path+0x108>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8002e28:	f895 2020 	ldrb.w	r2, [r5, #32]
	FATFS *fs = dp->obj.fs;
 8002e2c:	f8d5 a000 	ldr.w	sl, [r5]
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8002e30:	2ae5      	cmp	r2, #229	; 0xe5
 8002e32:	bf04      	itt	eq
 8002e34:	2205      	moveq	r2, #5
 8002e36:	f885 2020 	strbeq.w	r2, [r5, #32]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8002e3a:	2b21      	cmp	r3, #33	; 0x21
 8002e3c:	bf34      	ite	cc
 8002e3e:	2304      	movcc	r3, #4
 8002e40:	2300      	movcs	r3, #0
 8002e42:	f885 302b 	strb.w	r3, [r5, #43]	; 0x2b
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8002e46:	4628      	mov	r0, r5
 8002e48:	f7ff ff88 	bl	8002d5c <dir_sdi.constprop.8>
	if (res != FR_OK) return res;
 8002e4c:	4604      	mov	r4, r0
 8002e4e:	2800      	cmp	r0, #0
 8002e50:	d158      	bne.n	8002f04 <follow_path+0x140>
		res = move_window(fs, dp->sect);
 8002e52:	69a9      	ldr	r1, [r5, #24]
 8002e54:	4650      	mov	r0, sl
 8002e56:	f7ff fd9b 	bl	8002990 <move_window>
		if (res != FR_OK) break;
 8002e5a:	4604      	mov	r4, r0
 8002e5c:	2800      	cmp	r0, #0
 8002e5e:	d151      	bne.n	8002f04 <follow_path+0x140>
		c = dp->dir[DIR_Name];
 8002e60:	69e8      	ldr	r0, [r5, #28]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8002e62:	7803      	ldrb	r3, [r0, #0]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d04c      	beq.n	8002f02 <follow_path+0x13e>
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8002e68:	7ac1      	ldrb	r1, [r0, #11]
 8002e6a:	f001 023f 	and.w	r2, r1, #63	; 0x3f
 8002e6e:	71aa      	strb	r2, [r5, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8002e70:	f890 e00b 	ldrb.w	lr, [r0, #11]
 8002e74:	ea5f 710e 	movs.w	r1, lr, lsl #28
 8002e78:	d405      	bmi.n	8002e86 <follow_path+0xc2>
 8002e7a:	220b      	movs	r2, #11
 8002e7c:	4639      	mov	r1, r7
 8002e7e:	f7ff fd02 	bl	8002886 <mem_cmp>
 8002e82:	2800      	cmp	r0, #0
 8002e84:	d03e      	beq.n	8002f04 <follow_path+0x140>
		res = dir_next(dp, 0);	/* Next entry */
 8002e86:	4628      	mov	r0, r5
 8002e88:	f7ff ff30 	bl	8002cec <dir_next.isra.6>
 8002e8c:	e7de      	b.n	8002e4c <follow_path+0x88>
		dp->fn[NSFLAG] = NS_NONAME;
 8002e8e:	2680      	movs	r6, #128	; 0x80
 8002e90:	f885 602b 	strb.w	r6, [r5, #43]	; 0x2b
		res = dir_sdi(dp, 0);
 8002e94:	4628      	mov	r0, r5
}
 8002e96:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		res = dir_sdi(dp, 0);
 8002e9a:	f7ff bf5f 	b.w	8002d5c <dir_sdi.constprop.8>
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8002e9e:	2b2e      	cmp	r3, #46	; 0x2e
 8002ea0:	d04f      	beq.n	8002f42 <follow_path+0x17e>
 8002ea2:	4294      	cmp	r4, r2
 8002ea4:	d912      	bls.n	8002ecc <follow_path+0x108>
	if (c >= DbcTbl[0]) {
 8002ea6:	2b80      	cmp	r3, #128	; 0x80
 8002ea8:	d908      	bls.n	8002ebc <follow_path+0xf8>
		if (c <= DbcTbl[1]) return 1;
 8002eaa:	2b9f      	cmp	r3, #159	; 0x9f
 8002eac:	d910      	bls.n	8002ed0 <follow_path+0x10c>
		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;
 8002eae:	f103 0c20 	add.w	ip, r3, #32
 8002eb2:	fa5f fa8c 	uxtb.w	sl, ip
 8002eb6:	f1ba 0f1c 	cmp.w	sl, #28
 8002eba:	d909      	bls.n	8002ed0 <follow_path+0x10c>
 8002ebc:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 8002f60 <follow_path+0x19c>
	while (*str && *str != chr) str++;
 8002ec0:	f81c 0f01 	ldrb.w	r0, [ip, #1]!
 8002ec4:	2800      	cmp	r0, #0
 8002ec6:	d041      	beq.n	8002f4c <follow_path+0x188>
 8002ec8:	4283      	cmp	r3, r0
 8002eca:	d1f9      	bne.n	8002ec0 <follow_path+0xfc>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8002ecc:	2406      	movs	r4, #6
	return res;
 8002ece:	e022      	b.n	8002f16 <follow_path+0x152>
			d = (BYTE)p[si++];			/* Get 2nd byte */
 8002ed0:	5c71      	ldrb	r1, [r6, r1]
	if (c >= DbcTbl[4]) {
 8002ed2:	293f      	cmp	r1, #63	; 0x3f
			d = (BYTE)p[si++];			/* Get 2nd byte */
 8002ed4:	f100 0002 	add.w	r0, r0, #2
	if (c >= DbcTbl[4]) {
 8002ed8:	d9f8      	bls.n	8002ecc <follow_path+0x108>
		if (c <= DbcTbl[5]) return 1;
 8002eda:	297e      	cmp	r1, #126	; 0x7e
 8002edc:	d904      	bls.n	8002ee8 <follow_path+0x124>
		if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;
 8002ede:	f081 0a80 	eor.w	sl, r1, #128	; 0x80
 8002ee2:	f1ba 0f7c 	cmp.w	sl, #124	; 0x7c
 8002ee6:	d8f1      	bhi.n	8002ecc <follow_path+0x108>
			if (!dbc_2nd(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
 8002ee8:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
 8002eec:	4562      	cmp	r2, ip
 8002eee:	d2ed      	bcs.n	8002ecc <follow_path+0x108>
			sfn[i++] = c;
 8002ef0:	f102 0a01 	add.w	sl, r2, #1
 8002ef4:	54bb      	strb	r3, [r7, r2]
			sfn[i++] = d;
 8002ef6:	f807 100a 	strb.w	r1, [r7, sl]
 8002efa:	3202      	adds	r2, #2
			d = (BYTE)p[si++];			/* Get 2nd byte */
 8002efc:	4601      	mov	r1, r0
			sfn[i++] = c;
 8002efe:	4608      	mov	r0, r1
 8002f00:	e77e      	b.n	8002e00 <follow_path+0x3c>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8002f02:	2404      	movs	r4, #4
			ns = dp->fn[NSFLAG];
 8002f04:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
			if (res != FR_OK) {				/* Failed to find the object */
 8002f08:	b144      	cbz	r4, 8002f1c <follow_path+0x158>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8002f0a:	2c04      	cmp	r4, #4
 8002f0c:	d103      	bne.n	8002f16 <follow_path+0x152>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8002f0e:	f010 0f04 	tst.w	r0, #4
 8002f12:	bf08      	it	eq
 8002f14:	2405      	moveq	r4, #5
}
 8002f16:	4620      	mov	r0, r4
 8002f18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8002f1c:	0742      	lsls	r2, r0, #29
 8002f1e:	d4fa      	bmi.n	8002f16 <follow_path+0x152>
			if (!(dp->obj.attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8002f20:	79ac      	ldrb	r4, [r5, #6]
 8002f22:	06e3      	lsls	r3, r4, #27
 8002f24:	d50b      	bpl.n	8002f3e <follow_path+0x17a>
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8002f26:	692b      	ldr	r3, [r5, #16]
 8002f28:	f898 0000 	ldrb.w	r0, [r8]
 8002f2c:	f3c3 0c08 	ubfx	ip, r3, #0, #9
 8002f30:	f108 0128 	add.w	r1, r8, #40	; 0x28
 8002f34:	4461      	add	r1, ip
 8002f36:	f7ff fcf1 	bl	800291c <ld_clust.isra.0>
 8002f3a:	60a8      	str	r0, [r5, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8002f3c:	e757      	b.n	8002dee <follow_path+0x2a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8002f3e:	2405      	movs	r4, #5
 8002f40:	e7e9      	b.n	8002f16 <follow_path+0x152>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8002f42:	2c0b      	cmp	r4, #11
 8002f44:	d0c2      	beq.n	8002ecc <follow_path+0x108>
			i = 8; ni = 11;				/* Goto extension */
 8002f46:	2208      	movs	r2, #8
 8002f48:	240b      	movs	r4, #11
 8002f4a:	e7d8      	b.n	8002efe <follow_path+0x13a>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8002f4c:	f1a3 0061 	sub.w	r0, r3, #97	; 0x61
 8002f50:	2819      	cmp	r0, #25
 8002f52:	d801      	bhi.n	8002f58 <follow_path+0x194>
 8002f54:	3b20      	subs	r3, #32
 8002f56:	b2db      	uxtb	r3, r3
			sfn[i++] = c;
 8002f58:	54bb      	strb	r3, [r7, r2]
 8002f5a:	3201      	adds	r2, #1
 8002f5c:	e7cf      	b.n	8002efe <follow_path+0x13a>
 8002f5e:	bf00      	nop
 8002f60:	080052f8 	.word	0x080052f8

08002f64 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8002f64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002f66:	e9cd 1000 	strd	r1, r0, [sp]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8002f6a:	a804      	add	r0, sp, #16
{
 8002f6c:	4614      	mov	r4, r2
	const TCHAR *rp = path;
 8002f6e:	f840 1d04 	str.w	r1, [r0, #-4]!


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8002f72:	f7ff fca1 	bl	80028b8 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8002f76:	2800      	cmp	r0, #0
 8002f78:	db12      	blt.n	8002fa0 <f_mount+0x3c>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8002f7a:	4b0b      	ldr	r3, [pc, #44]	; (8002fa8 <f_mount+0x44>)
 8002f7c:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]

	if (cfs) {
 8002f80:	b10a      	cbz	r2, 8002f86 <f_mount+0x22>
		clear_lock(cfs);
#endif
#if FF_FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8002f82:	2100      	movs	r1, #0
 8002f84:	7011      	strb	r1, [r2, #0]
	}

	if (fs) {
 8002f86:	9a01      	ldr	r2, [sp, #4]
 8002f88:	b10a      	cbz	r2, 8002f8e <f_mount+0x2a>
		fs->fs_type = 0;				/* Clear new fs object */
 8002f8a:	2100      	movs	r1, #0
 8002f8c:	7011      	strb	r1, [r2, #0]
#if FF_FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8002f8e:	f843 2020 	str.w	r2, [r3, r0, lsl #2]

	if (opt == 0) return FR_OK;			/* Do not mount now, it will be mounted later */
 8002f92:	b13c      	cbz	r4, 8002fa4 <f_mount+0x40>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8002f94:	a901      	add	r1, sp, #4
 8002f96:	4668      	mov	r0, sp
 8002f98:	f7ff fd4e 	bl	8002a38 <find_volume.isra.4>
	LEAVE_FF(fs, res);
}
 8002f9c:	b004      	add	sp, #16
 8002f9e:	bd10      	pop	{r4, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
 8002fa0:	200b      	movs	r0, #11
 8002fa2:	e7fb      	b.n	8002f9c <f_mount+0x38>
	if (opt == 0) return FR_OK;			/* Do not mount now, it will be mounted later */
 8002fa4:	4620      	mov	r0, r4
 8002fa6:	e7f9      	b.n	8002f9c <f_mount+0x38>
 8002fa8:	20004a3c 	.word	0x20004a3c

08002fac <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8002fac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002fb0:	b08e      	sub	sp, #56	; 0x38
 8002fb2:	4616      	mov	r6, r2
 8002fb4:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8002fb6:	4605      	mov	r5, r0
 8002fb8:	2800      	cmp	r0, #0
 8002fba:	d036      	beq.n	800302a <f_open+0x7e>

	/* Get logical drive */
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
	res = find_volume(&path, &fs, mode);
 8002fbc:	a902      	add	r1, sp, #8
 8002fbe:	a801      	add	r0, sp, #4
 8002fc0:	f7ff fd3a 	bl	8002a38 <find_volume.isra.4>
	if (res == FR_OK) {
 8002fc4:	4604      	mov	r4, r0
 8002fc6:	bb58      	cbnz	r0, 8003020 <f_open+0x74>
		dj.obj.fs = fs;
 8002fc8:	a80e      	add	r0, sp, #56	; 0x38
 8002fca:	9b02      	ldr	r3, [sp, #8]
 8002fcc:	f840 3d2c 	str.w	r3, [r0, #-44]!
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8002fd0:	9901      	ldr	r1, [sp, #4]
 8002fd2:	f7ff fef7 	bl	8002dc4 <follow_path>
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);	/* Lock the file for this session */
			if (!fp->obj.lockid) res = FR_INT_ERR;
#endif
		}
#else		/* R/O configuration */
		if (res == FR_OK) {
 8002fd6:	4604      	mov	r4, r0
 8002fd8:	bb10      	cbnz	r0, 8003020 <f_open+0x74>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Is it origin directory itself? */
 8002fda:	f99d 0037 	ldrsb.w	r0, [sp, #55]	; 0x37
 8002fde:	2800      	cmp	r0, #0
 8002fe0:	db1d      	blt.n	800301e <f_open+0x72>
				res = FR_INVALID_NAME;
			} else {
				if (dj.obj.attr & AM_DIR) {		/* Is it a directory? */
 8002fe2:	f89d 1012 	ldrb.w	r1, [sp, #18]
 8002fe6:	06cb      	lsls	r3, r1, #27
 8002fe8:	d41d      	bmi.n	8003026 <f_open+0x7a>
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				fp->obj.n_frag = 0;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8002fea:	9f02      	ldr	r7, [sp, #8]
 8002fec:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8002ff0:	7838      	ldrb	r0, [r7, #0]
 8002ff2:	4641      	mov	r1, r8
 8002ff4:	f7ff fc92 	bl	800291c <ld_clust.isra.0>
 8002ff8:	60a8      	str	r0, [r5, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8002ffa:	f108 001c 	add.w	r0, r8, #28
 8002ffe:	f7ff fc3a 	bl	8002876 <ld_dword>
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8003002:	f006 0601 	and.w	r6, r6, #1
			}
#if FF_USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
			fp->obj.id = fs->id;
 8003006:	88fa      	ldrh	r2, [r7, #6]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8003008:	60e8      	str	r0, [r5, #12]
			fp->obj.fs = fs;	 	/* Validate the file object */
 800300a:	602f      	str	r7, [r5, #0]
			fp->obj.id = fs->id;
 800300c:	80aa      	strh	r2, [r5, #4]
			fp->flag = mode;		/* Set file access mode */
 800300e:	742e      	strb	r6, [r5, #16]
			fp->err = 0;			/* Clear error flag */
 8003010:	746c      	strb	r4, [r5, #17]
			fp->sect = 0;			/* Invalidate current data sector */
 8003012:	61ec      	str	r4, [r5, #28]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8003014:	616c      	str	r4, [r5, #20]
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */

	LEAVE_FF(fs, res);
}
 8003016:	4620      	mov	r0, r4
 8003018:	b00e      	add	sp, #56	; 0x38
 800301a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				res = FR_INVALID_NAME;
 800301e:	2406      	movs	r4, #6
	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8003020:	2300      	movs	r3, #0
 8003022:	602b      	str	r3, [r5, #0]
 8003024:	e7f7      	b.n	8003016 <f_open+0x6a>
					res = FR_NO_FILE;
 8003026:	2404      	movs	r4, #4
 8003028:	e7fa      	b.n	8003020 <f_open+0x74>
	if (!fp) return FR_INVALID_OBJECT;
 800302a:	2409      	movs	r4, #9
 800302c:	e7f3      	b.n	8003016 <f_open+0x6a>

0800302e <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800302e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003032:	469b      	mov	fp, r3
 8003034:	b085      	sub	sp, #20
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 8003036:	2300      	movs	r3, #0
{
 8003038:	4689      	mov	r9, r1
	*br = 0;	/* Clear read byte counter */
 800303a:	f8cb 3000 	str.w	r3, [fp]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800303e:	a903      	add	r1, sp, #12
{
 8003040:	4604      	mov	r4, r0
 8003042:	4616      	mov	r6, r2
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8003044:	f7ff fc50 	bl	80028e8 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8003048:	4605      	mov	r5, r0
 800304a:	bb08      	cbnz	r0, 8003090 <f_read+0x62>
 800304c:	7c65      	ldrb	r5, [r4, #17]
 800304e:	b9fd      	cbnz	r5, 8003090 <f_read+0x62>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8003050:	7c20      	ldrb	r0, [r4, #16]
 8003052:	07c1      	lsls	r1, r0, #31
 8003054:	d577      	bpl.n	8003146 <f_read+0x118>
	remain = fp->obj.objsize - fp->fptr;
 8003056:	68e1      	ldr	r1, [r4, #12]
 8003058:	6967      	ldr	r7, [r4, #20]
 800305a:	1bcf      	subs	r7, r1, r7
 800305c:	42b7      	cmp	r7, r6
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800305e:	f104 0220 	add.w	r2, r4, #32
 8003062:	bf28      	it	cs
 8003064:	4637      	movcs	r7, r6
 8003066:	9200      	str	r2, [sp, #0]
	for ( ;  btr;								/* Repeat until all data read */
 8003068:	b197      	cbz	r7, 8003090 <f_read+0x62>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800306a:	6966      	ldr	r6, [r4, #20]
 800306c:	f3c6 0308 	ubfx	r3, r6, #0, #9
 8003070:	2b00      	cmp	r3, #0
 8003072:	d154      	bne.n	800311e <f_read+0xf0>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8003074:	9803      	ldr	r0, [sp, #12]
 8003076:	f8b0 800a 	ldrh.w	r8, [r0, #10]
 800307a:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
			if (csect == 0) {					/* On the cluster boundary? */
 800307e:	ea11 2356 	ands.w	r3, r1, r6, lsr #9
 8003082:	d115      	bne.n	80030b0 <f_read+0x82>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8003084:	b946      	cbnz	r6, 8003098 <f_read+0x6a>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8003086:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8003088:	2801      	cmp	r0, #1
 800308a:	d80c      	bhi.n	80030a6 <f_read+0x78>
 800308c:	2502      	movs	r5, #2
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800308e:	7465      	strb	r5, [r4, #17]
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
 8003090:	4628      	mov	r0, r5
 8003092:	b005      	add	sp, #20
 8003094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8003098:	69a1      	ldr	r1, [r4, #24]
 800309a:	6820      	ldr	r0, [r4, #0]
 800309c:	9301      	str	r3, [sp, #4]
 800309e:	f7ff fdcb 	bl	8002c38 <get_fat.isra.5>
 80030a2:	9b01      	ldr	r3, [sp, #4]
 80030a4:	e7f0      	b.n	8003088 <f_read+0x5a>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80030a6:	1c42      	adds	r2, r0, #1
 80030a8:	d101      	bne.n	80030ae <f_read+0x80>
 80030aa:	2501      	movs	r5, #1
 80030ac:	e7ef      	b.n	800308e <f_read+0x60>
				fp->clust = clst;				/* Update current cluster */
 80030ae:	61a0      	str	r0, [r4, #24]
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 80030b0:	f8dd a00c 	ldr.w	sl, [sp, #12]
 80030b4:	69a1      	ldr	r1, [r4, #24]
 80030b6:	9301      	str	r3, [sp, #4]
 80030b8:	4650      	mov	r0, sl
 80030ba:	f7ff fbf2 	bl	80028a2 <clst2sect>
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 80030be:	2800      	cmp	r0, #0
 80030c0:	d0e4      	beq.n	800308c <f_read+0x5e>
			sect += csect;
 80030c2:	9b01      	ldr	r3, [sp, #4]
			if (cc > 0) {						/* Read maximum contiguous sectors directly */
 80030c4:	0a7e      	lsrs	r6, r7, #9
			sect += csect;
 80030c6:	eb03 0800 	add.w	r8, r3, r0
			if (cc > 0) {						/* Read maximum contiguous sectors directly */
 80030ca:	d01a      	beq.n	8003102 <f_read+0xd4>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80030cc:	f8ba 000a 	ldrh.w	r0, [sl, #10]
 80030d0:	1999      	adds	r1, r3, r6
 80030d2:	4281      	cmp	r1, r0
					cc = fs->csize - csect;
 80030d4:	bf88      	it	hi
 80030d6:	1ac6      	subhi	r6, r0, r3
				if (disk_read(fs->pdrv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80030d8:	4633      	mov	r3, r6
 80030da:	4642      	mov	r2, r8
 80030dc:	4649      	mov	r1, r9
 80030de:	f89a 0001 	ldrb.w	r0, [sl, #1]
 80030e2:	f7fd fd17 	bl	8000b14 <disk_read>
 80030e6:	2800      	cmp	r0, #0
 80030e8:	d1df      	bne.n	80030aa <f_read+0x7c>
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80030ea:	0276      	lsls	r6, r6, #9
		btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
 80030ec:	f8db 3000 	ldr.w	r3, [fp]
 80030f0:	6962      	ldr	r2, [r4, #20]
 80030f2:	4433      	add	r3, r6
 80030f4:	1bbf      	subs	r7, r7, r6
 80030f6:	44b1      	add	r9, r6
 80030f8:	4416      	add	r6, r2
 80030fa:	f8cb 3000 	str.w	r3, [fp]
 80030fe:	6166      	str	r6, [r4, #20]
 8003100:	e7b2      	b.n	8003068 <f_read+0x3a>
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8003102:	69e2      	ldr	r2, [r4, #28]
 8003104:	4542      	cmp	r2, r8
 8003106:	d008      	beq.n	800311a <f_read+0xec>
				if (disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8003108:	2301      	movs	r3, #1
 800310a:	4642      	mov	r2, r8
 800310c:	9900      	ldr	r1, [sp, #0]
 800310e:	f89a 0001 	ldrb.w	r0, [sl, #1]
 8003112:	f7fd fcff 	bl	8000b14 <disk_read>
 8003116:	2800      	cmp	r0, #0
 8003118:	d1c7      	bne.n	80030aa <f_read+0x7c>
			fp->sect = sect;
 800311a:	f8c4 801c 	str.w	r8, [r4, #28]
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800311e:	6960      	ldr	r0, [r4, #20]
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8003120:	9900      	ldr	r1, [sp, #0]
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8003122:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003126:	f5c3 7600 	rsb	r6, r3, #512	; 0x200
 800312a:	42be      	cmp	r6, r7
 800312c:	bf28      	it	cs
 800312e:	463e      	movcs	r6, r7
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8003130:	440b      	add	r3, r1
 8003132:	f109 3cff 	add.w	ip, r9, #4294967295	; 0xffffffff
 8003136:	199a      	adds	r2, r3, r6
			*d++ = *s++;
 8003138:	f813 eb01 	ldrb.w	lr, [r3], #1
 800313c:	f80c ef01 	strb.w	lr, [ip, #1]!
		} while (--cnt);
 8003140:	4293      	cmp	r3, r2
 8003142:	d1f9      	bne.n	8003138 <f_read+0x10a>
 8003144:	e7d2      	b.n	80030ec <f_read+0xbe>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8003146:	2507      	movs	r5, #7
 8003148:	e7a2      	b.n	8003090 <f_read+0x62>

0800314a <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800314a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800314c:	460e      	mov	r6, r1
	FSIZE_t ifptr;
#if FF_USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800314e:	a901      	add	r1, sp, #4
{
 8003150:	4604      	mov	r4, r0
	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8003152:	f7ff fbc9 	bl	80028e8 <validate>
	if (res == FR_OK) res = (FRESULT)fp->err;
 8003156:	4605      	mov	r5, r0
 8003158:	b940      	cbnz	r0, 800316c <f_lseek+0x22>
 800315a:	7c65      	ldrb	r5, [r4, #17]
#if FF_FS_EXFAT && !FF_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800315c:	b935      	cbnz	r5, 800316c <f_lseek+0x22>
 800315e:	68e0      	ldr	r0, [r4, #12]
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4 GiB - 1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (FF_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
			ofs = fp->obj.objsize;
		}
		ifptr = fp->fptr;
 8003160:	6963      	ldr	r3, [r4, #20]
		fp->fptr = nsect = 0;
 8003162:	6165      	str	r5, [r4, #20]
 8003164:	4286      	cmp	r6, r0
 8003166:	bf28      	it	cs
 8003168:	4606      	movcs	r6, r0
		if (ofs > 0) {
 800316a:	b916      	cbnz	r6, 8003172 <f_lseek+0x28>
			fp->sect = nsect;
		}
	}

	LEAVE_FF(fs, res);
}
 800316c:	4628      	mov	r0, r5
 800316e:	b003      	add	sp, #12
 8003170:	bdf0      	pop	{r4, r5, r6, r7, pc}
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8003172:	9a01      	ldr	r2, [sp, #4]
 8003174:	8957      	ldrh	r7, [r2, #10]
 8003176:	027f      	lsls	r7, r7, #9
			if (ifptr > 0 &&
 8003178:	b30b      	cbz	r3, 80031be <f_lseek+0x74>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800317a:	1e58      	subs	r0, r3, #1
 800317c:	1e71      	subs	r1, r6, #1
 800317e:	fbb0 f2f7 	udiv	r2, r0, r7
 8003182:	fbb1 f3f7 	udiv	r3, r1, r7
			if (ifptr > 0 &&
 8003186:	4293      	cmp	r3, r2
 8003188:	d319      	bcc.n	80031be <f_lseek+0x74>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800318a:	4279      	negs	r1, r7
 800318c:	4008      	ands	r0, r1
				clst = fp->clust;
 800318e:	69a1      	ldr	r1, [r4, #24]
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8003190:	6160      	str	r0, [r4, #20]
			if (clst != 0) {
 8003192:	2900      	cmp	r1, #0
 8003194:	d13e      	bne.n	8003214 <f_lseek+0xca>
		fp->fptr = nsect = 0;
 8003196:	2600      	movs	r6, #0
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8003198:	6963      	ldr	r3, [r4, #20]
 800319a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800319e:	2a00      	cmp	r2, #0
 80031a0:	d0e4      	beq.n	800316c <f_lseek+0x22>
 80031a2:	69e1      	ldr	r1, [r4, #28]
 80031a4:	42b1      	cmp	r1, r6
 80031a6:	d0e1      	beq.n	800316c <f_lseek+0x22>
			if (disk_read(fs->pdrv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80031a8:	9801      	ldr	r0, [sp, #4]
 80031aa:	2301      	movs	r3, #1
 80031ac:	4632      	mov	r2, r6
 80031ae:	f104 0120 	add.w	r1, r4, #32
 80031b2:	7840      	ldrb	r0, [r0, #1]
 80031b4:	f7fd fcae 	bl	8000b14 <disk_read>
 80031b8:	b9f8      	cbnz	r0, 80031fa <f_lseek+0xb0>
			fp->sect = nsect;
 80031ba:	61e6      	str	r6, [r4, #28]
 80031bc:	e7d6      	b.n	800316c <f_lseek+0x22>
				clst = fp->obj.sclust;					/* start from the first cluster */
 80031be:	68a1      	ldr	r1, [r4, #8]
				fp->clust = clst;
 80031c0:	61a1      	str	r1, [r4, #24]
			if (clst != 0) {
 80031c2:	2900      	cmp	r1, #0
 80031c4:	d0d2      	beq.n	800316c <f_lseek+0x22>
				while (ofs > bcs) {						/* Cluster following loop */
 80031c6:	42be      	cmp	r6, r7
 80031c8:	6960      	ldr	r0, [r4, #20]
 80031ca:	d80c      	bhi.n	80031e6 <f_lseek+0x9c>
				fp->fptr += ofs;
 80031cc:	4430      	add	r0, r6
				if (ofs % SS(fs)) {
 80031ce:	f3c6 0708 	ubfx	r7, r6, #0, #9
				fp->fptr += ofs;
 80031d2:	6160      	str	r0, [r4, #20]
				if (ofs % SS(fs)) {
 80031d4:	2f00      	cmp	r7, #0
 80031d6:	d0de      	beq.n	8003196 <f_lseek+0x4c>
					nsect = clst2sect(fs, clst);	/* Current sector */
 80031d8:	9801      	ldr	r0, [sp, #4]
 80031da:	f7ff fb62 	bl	80028a2 <clst2sect>
					if (nsect == 0) ABORT(fs, FR_INT_ERR);
 80031de:	b1a8      	cbz	r0, 800320c <f_lseek+0xc2>
					nsect += (DWORD)(ofs / SS(fs));
 80031e0:	eb00 2656 	add.w	r6, r0, r6, lsr #9
 80031e4:	e7d8      	b.n	8003198 <f_lseek+0x4e>
					ofs -= bcs; fp->fptr += bcs;
 80031e6:	4438      	add	r0, r7
 80031e8:	6160      	str	r0, [r4, #20]
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80031ea:	6820      	ldr	r0, [r4, #0]
 80031ec:	f7ff fd24 	bl	8002c38 <get_fat.isra.5>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80031f0:	1c43      	adds	r3, r0, #1
					ofs -= bcs; fp->fptr += bcs;
 80031f2:	eba6 0607 	sub.w	r6, r6, r7
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80031f6:	4601      	mov	r1, r0
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80031f8:	d102      	bne.n	8003200 <f_lseek+0xb6>
 80031fa:	2501      	movs	r5, #1
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80031fc:	7465      	strb	r5, [r4, #17]
 80031fe:	e7b5      	b.n	800316c <f_lseek+0x22>
 8003200:	2801      	cmp	r0, #1
 8003202:	d903      	bls.n	800320c <f_lseek+0xc2>
 8003204:	9b01      	ldr	r3, [sp, #4]
 8003206:	68da      	ldr	r2, [r3, #12]
 8003208:	4282      	cmp	r2, r0
 800320a:	d801      	bhi.n	8003210 <f_lseek+0xc6>
 800320c:	2502      	movs	r5, #2
 800320e:	e7f5      	b.n	80031fc <f_lseek+0xb2>
					fp->clust = clst;
 8003210:	61a0      	str	r0, [r4, #24]
 8003212:	e7d8      	b.n	80031c6 <f_lseek+0x7c>
				ofs -= fp->fptr;
 8003214:	1a36      	subs	r6, r6, r0
 8003216:	e7d6      	b.n	80031c6 <f_lseek+0x7c>

08003218 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8003218:	b530      	push	{r4, r5, lr}
 800321a:	b08f      	sub	sp, #60	; 0x3c
 800321c:	460d      	mov	r5, r1
 800321e:	9001      	str	r0, [sp, #4]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 8003220:	a903      	add	r1, sp, #12
 8003222:	a801      	add	r0, sp, #4
 8003224:	f7ff fc08 	bl	8002a38 <find_volume.isra.4>
	if (res == FR_OK) {
 8003228:	4604      	mov	r4, r0
 800322a:	b988      	cbnz	r0, 8003250 <f_stat+0x38>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800322c:	9901      	ldr	r1, [sp, #4]
 800322e:	a803      	add	r0, sp, #12
 8003230:	f7ff fdc8 	bl	8002dc4 <follow_path>
		if (res == FR_OK) {				/* Follow completed */
 8003234:	4604      	mov	r4, r0
 8003236:	b958      	cbnz	r0, 8003250 <f_stat+0x38>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 8003238:	f99d 3037 	ldrsb.w	r3, [sp, #55]	; 0x37
 800323c:	2b00      	cmp	r3, #0
 800323e:	db0a      	blt.n	8003256 <f_stat+0x3e>
				res = FR_INVALID_NAME;
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 8003240:	b135      	cbz	r5, 8003250 <f_stat+0x38>
	fno->fname[0] = 0;			/* Invaidate file info */
 8003242:	7268      	strb	r0, [r5, #9]
	if (dp->sect == 0) return;	/* Exit if read pointer has reached end of directory */
 8003244:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003246:	b118      	cbz	r0, 8003250 <f_stat+0x38>
 8003248:	4629      	mov	r1, r5
 800324a:	a803      	add	r0, sp, #12
 800324c:	f7ff fb74 	bl	8002938 <get_fileinfo.part.1>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
}
 8003250:	4620      	mov	r0, r4
 8003252:	b00f      	add	sp, #60	; 0x3c
 8003254:	bd30      	pop	{r4, r5, pc}
				res = FR_INVALID_NAME;
 8003256:	2406      	movs	r4, #6
 8003258:	e7fa      	b.n	8003250 <f_stat+0x38>
	...

0800325c <rcc_is_osc_ready>:
	return ((RCC_CIR & RCC_CIR_CSSF) != 0);
}

bool rcc_is_osc_ready(enum rcc_osc osc)
{
	switch (osc) {
 800325c:	2806      	cmp	r0, #6
 800325e:	d822      	bhi.n	80032a6 <rcc_is_osc_ready+0x4a>
 8003260:	e8df f000 	tbb	[pc, r0]
 8003264:	091c1704 	.word	0x091c1704
 8003268:	130e      	.short	0x130e
 800326a:	15          	.byte	0x15
 800326b:	00          	.byte	0x00
	case RCC_PLL:
		return RCC_CR & RCC_CR_PLLRDY;
 800326c:	4b0f      	ldr	r3, [pc, #60]	; (80032ac <rcc_is_osc_ready+0x50>)
 800326e:	6818      	ldr	r0, [r3, #0]
 8003270:	f3c0 6040 	ubfx	r0, r0, #25, #1
 8003274:	4770      	bx	lr
	case RCC_HSE:
		return RCC_CR & RCC_CR_HSERDY;
 8003276:	4b0d      	ldr	r3, [pc, #52]	; (80032ac <rcc_is_osc_ready+0x50>)
 8003278:	6818      	ldr	r0, [r3, #0]
 800327a:	f3c0 4040 	ubfx	r0, r0, #17, #1
 800327e:	4770      	bx	lr
	case RCC_HSI:
		return RCC_CR & RCC_CR_HSIRDY;
 8003280:	4b0a      	ldr	r3, [pc, #40]	; (80032ac <rcc_is_osc_ready+0x50>)
	case RCC_LSE:
		return RCC_BDCR & RCC_BDCR_LSERDY;
 8003282:	6818      	ldr	r0, [r3, #0]
 8003284:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8003288:	4770      	bx	lr
 800328a:	4b09      	ldr	r3, [pc, #36]	; (80032b0 <rcc_is_osc_ready+0x54>)
 800328c:	e7f9      	b.n	8003282 <rcc_is_osc_ready+0x26>
	case RCC_LSI:
		return RCC_CSR & RCC_CSR_LSIRDY;
 800328e:	4b09      	ldr	r3, [pc, #36]	; (80032b4 <rcc_is_osc_ready+0x58>)
 8003290:	e7f7      	b.n	8003282 <rcc_is_osc_ready+0x26>
	case RCC_PLLSAI:
		return RCC_CR & RCC_CR_PLLSAIRDY;
 8003292:	4b06      	ldr	r3, [pc, #24]	; (80032ac <rcc_is_osc_ready+0x50>)
 8003294:	6818      	ldr	r0, [r3, #0]
 8003296:	f3c0 7040 	ubfx	r0, r0, #29, #1
 800329a:	4770      	bx	lr
	case RCC_PLLI2S:
		return RCC_CR & RCC_CR_PLLI2SRDY;
 800329c:	4b03      	ldr	r3, [pc, #12]	; (80032ac <rcc_is_osc_ready+0x50>)
 800329e:	6818      	ldr	r0, [r3, #0]
 80032a0:	f3c0 60c0 	ubfx	r0, r0, #27, #1
 80032a4:	4770      	bx	lr
	}
	return false;
 80032a6:	2000      	movs	r0, #0
}
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop
 80032ac:	40023800 	.word	0x40023800
 80032b0:	40023870 	.word	0x40023870
 80032b4:	40023874 	.word	0x40023874

080032b8 <rcc_wait_for_osc_ready>:

void rcc_wait_for_osc_ready(enum rcc_osc osc)
{
 80032b8:	b508      	push	{r3, lr}
 80032ba:	4602      	mov	r2, r0
	while (!rcc_is_osc_ready(osc));
 80032bc:	4610      	mov	r0, r2
 80032be:	f7ff ffcd 	bl	800325c <rcc_is_osc_ready>
 80032c2:	2800      	cmp	r0, #0
 80032c4:	d0fa      	beq.n	80032bc <rcc_wait_for_osc_ready+0x4>
}
 80032c6:	bd08      	pop	{r3, pc}

080032c8 <rcc_osc_on>:
	}
}

void rcc_osc_on(enum rcc_osc osc)
{
	switch (osc) {
 80032c8:	2806      	cmp	r0, #6
 80032ca:	d80a      	bhi.n	80032e2 <rcc_osc_on+0x1a>
 80032cc:	e8df f000 	tbb	[pc, r0]
 80032d0:	0a1d1804 	.word	0x0a1d1804
 80032d4:	140f      	.short	0x140f
 80032d6:	16          	.byte	0x16
 80032d7:	00          	.byte	0x00
	case RCC_PLL:
		RCC_CR |= RCC_CR_PLLON;
 80032d8:	4a0e      	ldr	r2, [pc, #56]	; (8003314 <rcc_osc_on+0x4c>)
 80032da:	6813      	ldr	r3, [r2, #0]
 80032dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
		break;
	case RCC_PLLSAI:
		RCC_CR |= RCC_CR_PLLSAION;
		break;
	case RCC_PLLI2S:
		RCC_CR |= RCC_CR_PLLI2SON;
 80032e0:	6013      	str	r3, [r2, #0]
 80032e2:	4770      	bx	lr
		RCC_CR |= RCC_CR_HSEON;
 80032e4:	4a0b      	ldr	r2, [pc, #44]	; (8003314 <rcc_osc_on+0x4c>)
 80032e6:	6813      	ldr	r3, [r2, #0]
 80032e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032ec:	e7f8      	b.n	80032e0 <rcc_osc_on+0x18>
		RCC_CR |= RCC_CR_HSION;
 80032ee:	4a09      	ldr	r2, [pc, #36]	; (8003314 <rcc_osc_on+0x4c>)
		RCC_CSR |= RCC_CSR_LSION;
 80032f0:	6813      	ldr	r3, [r2, #0]
 80032f2:	f043 0301 	orr.w	r3, r3, #1
 80032f6:	e7f3      	b.n	80032e0 <rcc_osc_on+0x18>
		RCC_BDCR |= RCC_BDCR_LSEON;
 80032f8:	4a07      	ldr	r2, [pc, #28]	; (8003318 <rcc_osc_on+0x50>)
 80032fa:	e7f9      	b.n	80032f0 <rcc_osc_on+0x28>
		RCC_CSR |= RCC_CSR_LSION;
 80032fc:	4a07      	ldr	r2, [pc, #28]	; (800331c <rcc_osc_on+0x54>)
 80032fe:	e7f7      	b.n	80032f0 <rcc_osc_on+0x28>
		RCC_CR |= RCC_CR_PLLSAION;
 8003300:	4a04      	ldr	r2, [pc, #16]	; (8003314 <rcc_osc_on+0x4c>)
 8003302:	6813      	ldr	r3, [r2, #0]
 8003304:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003308:	e7ea      	b.n	80032e0 <rcc_osc_on+0x18>
		RCC_CR |= RCC_CR_PLLI2SON;
 800330a:	4a02      	ldr	r2, [pc, #8]	; (8003314 <rcc_osc_on+0x4c>)
 800330c:	6813      	ldr	r3, [r2, #0]
 800330e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003312:	e7e5      	b.n	80032e0 <rcc_osc_on+0x18>
 8003314:	40023800 	.word	0x40023800
 8003318:	40023870 	.word	0x40023870
 800331c:	40023874 	.word	0x40023874

08003320 <rcc_osc_off>:
	}
}

void rcc_osc_off(enum rcc_osc osc)
{
	switch (osc) {
 8003320:	2806      	cmp	r0, #6
 8003322:	d80a      	bhi.n	800333a <rcc_osc_off+0x1a>
 8003324:	e8df f000 	tbb	[pc, r0]
 8003328:	0a1d1804 	.word	0x0a1d1804
 800332c:	140f      	.short	0x140f
 800332e:	16          	.byte	0x16
 800332f:	00          	.byte	0x00
	case RCC_PLL:
		RCC_CR &= ~RCC_CR_PLLON;
 8003330:	4a0e      	ldr	r2, [pc, #56]	; (800336c <rcc_osc_off+0x4c>)
 8003332:	6813      	ldr	r3, [r2, #0]
 8003334:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
		break;
	case RCC_PLLSAI:
		RCC_CR &= ~RCC_CR_PLLSAION;
		break;
	case RCC_PLLI2S:
		RCC_CR &= ~RCC_CR_PLLI2SON;
 8003338:	6013      	str	r3, [r2, #0]
 800333a:	4770      	bx	lr
		RCC_CR &= ~RCC_CR_HSEON;
 800333c:	4a0b      	ldr	r2, [pc, #44]	; (800336c <rcc_osc_off+0x4c>)
 800333e:	6813      	ldr	r3, [r2, #0]
 8003340:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003344:	e7f8      	b.n	8003338 <rcc_osc_off+0x18>
		RCC_CR &= ~RCC_CR_HSION;
 8003346:	4a09      	ldr	r2, [pc, #36]	; (800336c <rcc_osc_off+0x4c>)
		RCC_CSR &= ~RCC_CSR_LSION;
 8003348:	6813      	ldr	r3, [r2, #0]
 800334a:	f023 0301 	bic.w	r3, r3, #1
 800334e:	e7f3      	b.n	8003338 <rcc_osc_off+0x18>
		RCC_BDCR &= ~RCC_BDCR_LSEON;
 8003350:	4a07      	ldr	r2, [pc, #28]	; (8003370 <rcc_osc_off+0x50>)
 8003352:	e7f9      	b.n	8003348 <rcc_osc_off+0x28>
		RCC_CSR &= ~RCC_CSR_LSION;
 8003354:	4a07      	ldr	r2, [pc, #28]	; (8003374 <rcc_osc_off+0x54>)
 8003356:	e7f7      	b.n	8003348 <rcc_osc_off+0x28>
		RCC_CR &= ~RCC_CR_PLLSAION;
 8003358:	4a04      	ldr	r2, [pc, #16]	; (800336c <rcc_osc_off+0x4c>)
 800335a:	6813      	ldr	r3, [r2, #0]
 800335c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003360:	e7ea      	b.n	8003338 <rcc_osc_off+0x18>
		RCC_CR &= ~RCC_CR_PLLI2SON;
 8003362:	4a02      	ldr	r2, [pc, #8]	; (800336c <rcc_osc_off+0x4c>)
 8003364:	6813      	ldr	r3, [r2, #0]
 8003366:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800336a:	e7e5      	b.n	8003338 <rcc_osc_off+0x18>
 800336c:	40023800 	.word	0x40023800
 8003370:	40023870 	.word	0x40023870
 8003374:	40023874 	.word	0x40023874

08003378 <rcc_set_sysclk_source>:

void rcc_set_sysclk_source(uint32_t clk)
{
	uint32_t reg32;

	reg32 = RCC_CFGR;
 8003378:	4a03      	ldr	r2, [pc, #12]	; (8003388 <rcc_set_sysclk_source+0x10>)
 800337a:	6813      	ldr	r3, [r2, #0]
	reg32 &= ~((1 << 1) | (1 << 0));
 800337c:	f023 0303 	bic.w	r3, r3, #3
	RCC_CFGR = (reg32 | clk);
 8003380:	4318      	orrs	r0, r3
 8003382:	6010      	str	r0, [r2, #0]
 8003384:	4770      	bx	lr
 8003386:	bf00      	nop
 8003388:	40023808 	.word	0x40023808

0800338c <rcc_set_ppre2>:

void rcc_set_ppre2(uint32_t ppre2)
{
	uint32_t reg32;

	reg32 = RCC_CFGR;
 800338c:	4a03      	ldr	r2, [pc, #12]	; (800339c <rcc_set_ppre2+0x10>)
 800338e:	6813      	ldr	r3, [r2, #0]
	reg32 &= ~((1 << 13) | (1 << 14) | (1 << 15));
 8003390:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
	RCC_CFGR = (reg32 | (ppre2 << 13));
 8003394:	ea43 3040 	orr.w	r0, r3, r0, lsl #13
 8003398:	6010      	str	r0, [r2, #0]
 800339a:	4770      	bx	lr
 800339c:	40023808 	.word	0x40023808

080033a0 <rcc_set_ppre1>:

void rcc_set_ppre1(uint32_t ppre1)
{
	uint32_t reg32;

	reg32 = RCC_CFGR;
 80033a0:	4a03      	ldr	r2, [pc, #12]	; (80033b0 <rcc_set_ppre1+0x10>)
 80033a2:	6813      	ldr	r3, [r2, #0]
	reg32 &= ~((1 << 10) | (1 << 11) | (1 << 12));
 80033a4:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
	RCC_CFGR = (reg32 | (ppre1 << 10));
 80033a8:	ea43 2080 	orr.w	r0, r3, r0, lsl #10
 80033ac:	6010      	str	r0, [r2, #0]
 80033ae:	4770      	bx	lr
 80033b0:	40023808 	.word	0x40023808

080033b4 <rcc_set_hpre>:

void rcc_set_hpre(uint32_t hpre)
{
	uint32_t reg32;

	reg32 = RCC_CFGR;
 80033b4:	4a03      	ldr	r2, [pc, #12]	; (80033c4 <rcc_set_hpre+0x10>)
 80033b6:	6813      	ldr	r3, [r2, #0]
	reg32 &= ~((1 << 4) | (1 << 5) | (1 << 6) | (1 << 7));
 80033b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
	RCC_CFGR = (reg32 | (hpre << 4));
 80033bc:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 80033c0:	6010      	str	r0, [r2, #0]
 80033c2:	4770      	bx	lr
 80033c4:	40023808 	.word	0x40023808

080033c8 <rcc_set_main_pll_hse>:
	}
	RCC_PLLCFGR = RCC_PLLCFGR_PLLSRC | /* HSE */
		((pllm & RCC_PLLCFGR_PLLM_MASK) << RCC_PLLCFGR_PLLM_SHIFT) |
		((plln & RCC_PLLCFGR_PLLN_MASK) << RCC_PLLCFGR_PLLN_SHIFT) |
		((((pllp >> 1) - 1) & RCC_PLLCFGR_PLLP_MASK) << RCC_PLLCFGR_PLLP_SHIFT) |
		((pllq & RCC_PLLCFGR_PLLQ_MASK) << RCC_PLLCFGR_PLLQ_SHIFT) |
 80033c8:	061b      	lsls	r3, r3, #24
 80033ca:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
		((pllm & RCC_PLLCFGR_PLLM_MASK) << RCC_PLLCFGR_PLLM_SHIFT) |
 80033ce:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		((pllq & RCC_PLLCFGR_PLLQ_MASK) << RCC_PLLCFGR_PLLQ_SHIFT) |
 80033d2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80033d6:	4303      	orrs	r3, r0
		((plln & RCC_PLLCFGR_PLLN_MASK) << RCC_PLLCFGR_PLLN_SHIFT) |
 80033d8:	f647 70c0 	movw	r0, #32704	; 0x7fc0
 80033dc:	ea00 1181 	and.w	r1, r0, r1, lsl #6
		((pllq & RCC_PLLCFGR_PLLQ_MASK) << RCC_PLLCFGR_PLLQ_SHIFT) |
 80033e0:	430b      	orrs	r3, r1
		((((pllp >> 1) - 1) & RCC_PLLCFGR_PLLP_MASK) << RCC_PLLCFGR_PLLP_SHIFT) |
 80033e2:	0851      	lsrs	r1, r2, #1
		((pllr & RCC_PLLCFGR_PLLR_MASK) << RCC_PLLCFGR_PLLR_SHIFT);
 80033e4:	9a00      	ldr	r2, [sp, #0]
		((((pllp >> 1) - 1) & RCC_PLLCFGR_PLLP_MASK) << RCC_PLLCFGR_PLLP_SHIFT) |
 80033e6:	3901      	subs	r1, #1
		((pllr & RCC_PLLCFGR_PLLR_MASK) << RCC_PLLCFGR_PLLR_SHIFT);
 80033e8:	2a02      	cmp	r2, #2
		((((pllp >> 1) - 1) & RCC_PLLCFGR_PLLP_MASK) << RCC_PLLCFGR_PLLP_SHIFT) |
 80033ea:	ea4f 4101 	mov.w	r1, r1, lsl #16
		((pllr & RCC_PLLCFGR_PLLR_MASK) << RCC_PLLCFGR_PLLR_SHIFT);
 80033ee:	bf38      	it	cc
 80033f0:	2202      	movcc	r2, #2
		((((pllp >> 1) - 1) & RCC_PLLCFGR_PLLP_MASK) << RCC_PLLCFGR_PLLP_SHIFT) |
 80033f2:	f401 3140 	and.w	r1, r1, #196608	; 0x30000
		((pllr & RCC_PLLCFGR_PLLR_MASK) << RCC_PLLCFGR_PLLR_SHIFT);
 80033f6:	0712      	lsls	r2, r2, #28
 80033f8:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
		((pllq & RCC_PLLCFGR_PLLQ_MASK) << RCC_PLLCFGR_PLLQ_SHIFT) |
 80033fc:	430b      	orrs	r3, r1
 80033fe:	4313      	orrs	r3, r2
	RCC_PLLCFGR = RCC_PLLCFGR_PLLSRC | /* HSE */
 8003400:	4a01      	ldr	r2, [pc, #4]	; (8003408 <rcc_set_main_pll_hse+0x40>)
 8003402:	6013      	str	r3, [r2, #0]
 8003404:	4770      	bx	lr
 8003406:	bf00      	nop
 8003408:	40023804 	.word	0x40023804

0800340c <rcc_clock_setup_hse_3v3>:
	/* Return the clock source which is used as system clock. */
	return (RCC_CFGR & 0x000c) >> 2;
}

void rcc_clock_setup_hse_3v3(const struct rcc_clock_scale *clock)
{
 800340c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800340e:	4604      	mov	r4, r0
	/* Enable internal high-speed oscillator. */
	rcc_osc_on(RCC_HSI);
 8003410:	2004      	movs	r0, #4
 8003412:	f7ff ff59 	bl	80032c8 <rcc_osc_on>
	rcc_wait_for_osc_ready(RCC_HSI);
 8003416:	2004      	movs	r0, #4
 8003418:	f7ff ff4e 	bl	80032b8 <rcc_wait_for_osc_ready>

	/* Select HSI as SYSCLK source. */
	rcc_set_sysclk_source(RCC_CFGR_SW_HSI);
 800341c:	2000      	movs	r0, #0
 800341e:	f7ff ffab 	bl	8003378 <rcc_set_sysclk_source>

	/* Enable external high-speed oscillator 8MHz. */
	rcc_osc_on(RCC_HSE);
 8003422:	2003      	movs	r0, #3
 8003424:	f7ff ff50 	bl	80032c8 <rcc_osc_on>
	rcc_wait_for_osc_ready(RCC_HSE);
 8003428:	2003      	movs	r0, #3
 800342a:	f7ff ff45 	bl	80032b8 <rcc_wait_for_osc_ready>

	/* Enable/disable high performance mode */
	if (!clock->power_save) {
 800342e:	7be0      	ldrb	r0, [r4, #15]
 8003430:	2800      	cmp	r0, #0
 8003432:	d135      	bne.n	80034a0 <rcc_clock_setup_hse_3v3+0x94>
		pwr_set_vos_scale(PWR_SCALE1);
	} else {
		pwr_set_vos_scale(PWR_SCALE2);
 8003434:	f000 fb6a 	bl	8003b0c <pwr_set_vos_scale>

	/*
	 * Set prescalers for AHB, ADC, ABP1, ABP2.
	 * Do this before touching the PLL (TODO: why?).
	 */
	rcc_set_hpre(clock->hpre);
 8003438:	7b20      	ldrb	r0, [r4, #12]
 800343a:	f7ff ffbb 	bl	80033b4 <rcc_set_hpre>
	rcc_set_ppre1(clock->ppre1);
 800343e:	7b60      	ldrb	r0, [r4, #13]
 8003440:	f7ff ffae 	bl	80033a0 <rcc_set_ppre1>
	rcc_set_ppre2(clock->ppre2);
 8003444:	7ba0      	ldrb	r0, [r4, #14]
 8003446:	f7ff ffa1 	bl	800338c <rcc_set_ppre2>

	rcc_set_main_pll_hse(clock->pllm, clock->plln,
 800344a:	79a5      	ldrb	r5, [r4, #6]
 800344c:	8861      	ldrh	r1, [r4, #2]
 800344e:	7963      	ldrb	r3, [r4, #5]
 8003450:	7922      	ldrb	r2, [r4, #4]
 8003452:	7820      	ldrb	r0, [r4, #0]
 8003454:	9500      	str	r5, [sp, #0]
 8003456:	f7ff ffb7 	bl	80033c8 <rcc_set_main_pll_hse>
		RCC_CR |= RCC_CR_PLLON;
 800345a:	4a12      	ldr	r2, [pc, #72]	; (80034a4 <rcc_clock_setup_hse_3v3+0x98>)
 800345c:	6813      	ldr	r3, [r2, #0]
 800345e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003462:	6013      	str	r3, [r2, #0]
			clock->pllp, clock->pllq, clock->pllr);

	/* Enable PLL oscillator and wait for it to stabilize. */
	rcc_osc_on(RCC_PLL);
	rcc_wait_for_osc_ready(RCC_PLL);
 8003464:	2000      	movs	r0, #0
 8003466:	f7ff ff27 	bl	80032b8 <rcc_wait_for_osc_ready>

	/* Configure flash settings. */
	flash_set_ws(clock->flash_config);
 800346a:	68a0      	ldr	r0, [r4, #8]
 800346c:	f000 fa18 	bl	80038a0 <flash_set_ws>

	/* Select PLL as SYSCLK source. */
	rcc_set_sysclk_source(RCC_CFGR_SW_PLL);
 8003470:	2002      	movs	r0, #2
 8003472:	f7ff ff81 	bl	8003378 <rcc_set_sysclk_source>
		while (((RCC_CFGR >> RCC_CFGR_SWS_SHIFT) & RCC_CFGR_SWS_MASK) !=
 8003476:	4a0c      	ldr	r2, [pc, #48]	; (80034a8 <rcc_clock_setup_hse_3v3+0x9c>)
 8003478:	6813      	ldr	r3, [r2, #0]
 800347a:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800347e:	2b02      	cmp	r3, #2
 8003480:	d1fa      	bne.n	8003478 <rcc_clock_setup_hse_3v3+0x6c>

	/* Wait for PLL clock to be selected. */
	rcc_wait_for_sysclk_status(RCC_PLL);

	/* Set the peripheral clock frequencies used. */
	rcc_ahb_frequency  = clock->ahb_frequency;
 8003482:	4b0a      	ldr	r3, [pc, #40]	; (80034ac <rcc_clock_setup_hse_3v3+0xa0>)
 8003484:	6922      	ldr	r2, [r4, #16]
 8003486:	601a      	str	r2, [r3, #0]
	rcc_apb1_frequency = clock->apb1_frequency;
 8003488:	4b09      	ldr	r3, [pc, #36]	; (80034b0 <rcc_clock_setup_hse_3v3+0xa4>)
 800348a:	6962      	ldr	r2, [r4, #20]
 800348c:	601a      	str	r2, [r3, #0]
	rcc_apb2_frequency = clock->apb2_frequency;
 800348e:	69a2      	ldr	r2, [r4, #24]
 8003490:	4b08      	ldr	r3, [pc, #32]	; (80034b4 <rcc_clock_setup_hse_3v3+0xa8>)

	/* Disable internal high-speed oscillator. */
	rcc_osc_off(RCC_HSI);
 8003492:	2004      	movs	r0, #4
	rcc_apb2_frequency = clock->apb2_frequency;
 8003494:	601a      	str	r2, [r3, #0]
}
 8003496:	b003      	add	sp, #12
 8003498:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	rcc_osc_off(RCC_HSI);
 800349c:	f7ff bf40 	b.w	8003320 <rcc_osc_off>
		pwr_set_vos_scale(PWR_SCALE2);
 80034a0:	2001      	movs	r0, #1
 80034a2:	e7c7      	b.n	8003434 <rcc_clock_setup_hse_3v3+0x28>
 80034a4:	40023800 	.word	0x40023800
 80034a8:	40023808 	.word	0x40023808
 80034ac:	20000568 	.word	0x20000568
 80034b0:	2000056c 	.word	0x2000056c
 80034b4:	20000570 	.word	0x20000570

080034b8 <dma_stream_reset>:
*/

void dma_stream_reset(uint32_t dma, uint8_t stream)
{
/* Disable stream (must be done before register is otherwise changed). */
	DMA_SCR(dma, stream) &= ~DMA_SxCR_EN;
 80034b8:	2318      	movs	r3, #24
 80034ba:	fb13 0301 	smlabb	r3, r3, r1, r0
{
 80034be:	b510      	push	{r4, lr}
	DMA_SCR(dma, stream) &= ~DMA_SxCR_EN;
 80034c0:	691a      	ldr	r2, [r3, #16]
 80034c2:	f022 0201 	bic.w	r2, r2, #1
 80034c6:	611a      	str	r2, [r3, #16]
/* Reset all config bits. */
	DMA_SCR(dma, stream) = 0;
 80034c8:	2200      	movs	r2, #0
 80034ca:	611a      	str	r2, [r3, #16]
/* Reset data transfer number. */
	DMA_SNDTR(dma, stream) = 0;
/* Reset peripheral and memory addresses. */
	DMA_SPAR(dma, stream) = 0;
 80034cc:	619a      	str	r2, [r3, #24]
	DMA_SNDTR(dma, stream) = 0;
 80034ce:	615a      	str	r2, [r3, #20]
	DMA_SM0AR(dma, stream) = 0;
 80034d0:	61da      	str	r2, [r3, #28]
	DMA_SM1AR(dma, stream) = 0;
 80034d2:	621a      	str	r2, [r3, #32]
/* This is the default setting */
	DMA_SFCR(dma, stream) = 0x21;
 80034d4:	2221      	movs	r2, #33	; 0x21
 80034d6:	625a      	str	r2, [r3, #36]	; 0x24
/* Reset all stream interrupt flags using the interrupt flag clear register. */
	uint32_t mask = DMA_ISR_MASK(stream);
 80034d8:	f3c1 0240 	ubfx	r2, r1, #1, #1
 80034dc:	2306      	movs	r3, #6
 80034de:	f001 0401 	and.w	r4, r1, #1
 80034e2:	0112      	lsls	r2, r2, #4
 80034e4:	fb13 2204 	smlabb	r2, r3, r4, r2
	if (stream < 4) {
 80034e8:	2903      	cmp	r1, #3
	uint32_t mask = DMA_ISR_MASK(stream);
 80034ea:	f04f 033d 	mov.w	r3, #61	; 0x3d
 80034ee:	fa03 f302 	lsl.w	r3, r3, r2
		DMA_LIFCR(dma) |= mask;
 80034f2:	bf95      	itete	ls
 80034f4:	6882      	ldrls	r2, [r0, #8]
	} else {
		DMA_HIFCR(dma) |= mask;
 80034f6:	68c2      	ldrhi	r2, [r0, #12]
		DMA_LIFCR(dma) |= mask;
 80034f8:	4313      	orrls	r3, r2
		DMA_HIFCR(dma) |= mask;
 80034fa:	4313      	orrhi	r3, r2
		DMA_LIFCR(dma) |= mask;
 80034fc:	bf94      	ite	ls
 80034fe:	6083      	strls	r3, [r0, #8]
		DMA_HIFCR(dma) |= mask;
 8003500:	60c3      	strhi	r3, [r0, #12]
 8003502:	bd10      	pop	{r4, pc}

08003504 <dma_get_interrupt_flag>:
bool dma_get_interrupt_flag(uint32_t dma, uint8_t stream, uint32_t interrupt)
{
	/* get offset to interrupt flag location in stream field. Assumes
	 * stream and interrupt parameters are integers.
	 */
	uint32_t flag = (interrupt << DMA_ISR_OFFSET(stream));
 8003504:	f3c1 0340 	ubfx	r3, r1, #1, #1
{
 8003508:	b530      	push	{r4, r5, lr}
	uint32_t flag = (interrupt << DMA_ISR_OFFSET(stream));
 800350a:	011c      	lsls	r4, r3, #4
 800350c:	f001 0501 	and.w	r5, r1, #1
 8003510:	2306      	movs	r3, #6
 8003512:	fb13 4305 	smlabb	r3, r3, r5, r4
	/* First four streams are in low register */
	if (stream < 4) {
 8003516:	2903      	cmp	r1, #3
	uint32_t flag = (interrupt << DMA_ISR_OFFSET(stream));
 8003518:	fa02 f203 	lsl.w	r2, r2, r3
		return ((DMA_LISR(dma) & flag) > 0);
 800351c:	bf94      	ite	ls
 800351e:	6803      	ldrls	r3, [r0, #0]
	} else {
		return ((DMA_HISR(dma) & flag) > 0);
 8003520:	6843      	ldrhi	r3, [r0, #4]
 8003522:	421a      	tst	r2, r3
 8003524:	bf14      	ite	ne
 8003526:	2001      	movne	r0, #1
 8003528:	2000      	moveq	r0, #0
	}
}
 800352a:	bd30      	pop	{r4, r5, pc}

0800352c <dma_set_transfer_mode>:
@param[in] stream unsigned int8. Stream number: @ref dma_st_number
@param[in] direction unsigned int32. Data transfer direction @ref dma_st_dir
*/

void dma_set_transfer_mode(uint32_t dma, uint8_t stream, uint32_t direction)
{
 800352c:	b510      	push	{r4, lr}
	uint32_t reg32 = (DMA_SCR(dma, stream) & ~DMA_SxCR_DIR_MASK);
 800352e:	3010      	adds	r0, #16
 8003530:	2418      	movs	r4, #24
 8003532:	fb04 0101 	mla	r1, r4, r1, r0
	/* Disable circular and double buffer modes if memory to memory
	 * transfers are in effect. (Direct Mode is automatically disabled by
	 * hardware)
	 */
	if (direction == DMA_SxCR_DIR_MEM_TO_MEM) {
 8003536:	2a80      	cmp	r2, #128	; 0x80
	uint32_t reg32 = (DMA_SCR(dma, stream) & ~DMA_SxCR_DIR_MASK);
 8003538:	680b      	ldr	r3, [r1, #0]
		reg32 &= ~(DMA_SxCR_CIRC | DMA_SxCR_DBM);
 800353a:	bf0a      	itet	eq
 800353c:	f423 2380 	biceq.w	r3, r3, #262144	; 0x40000
	uint32_t reg32 = (DMA_SCR(dma, stream) & ~DMA_SxCR_DIR_MASK);
 8003540:	f023 03c0 	bicne.w	r3, r3, #192	; 0xc0
		reg32 &= ~(DMA_SxCR_CIRC | DMA_SxCR_DBM);
 8003544:	f423 73e0 	biceq.w	r3, r3, #448	; 0x1c0
	}

	DMA_SCR(dma, stream) = (reg32 | direction);
 8003548:	4313      	orrs	r3, r2
 800354a:	600b      	str	r3, [r1, #0]
 800354c:	bd10      	pop	{r4, pc}

0800354e <dma_set_priority>:
@param[in] prio unsigned int32. Priority level @ref dma_st_pri.
*/

void dma_set_priority(uint32_t dma, uint8_t stream, uint32_t prio)
{
	DMA_SCR(dma, stream) &= ~(DMA_SxCR_PL_MASK);
 800354e:	2318      	movs	r3, #24
 8003550:	3010      	adds	r0, #16
 8003552:	fb03 0101 	mla	r1, r3, r1, r0
 8003556:	680b      	ldr	r3, [r1, #0]
 8003558:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800355c:	600b      	str	r3, [r1, #0]
	DMA_SCR(dma, stream) |= prio;
 800355e:	680b      	ldr	r3, [r1, #0]
 8003560:	431a      	orrs	r2, r3
 8003562:	600a      	str	r2, [r1, #0]
 8003564:	4770      	bx	lr

08003566 <dma_set_memory_size>:
@param[in] mem_size unsigned int32. Memory word width @ref dma_st_memwidth.
*/

void dma_set_memory_size(uint32_t dma, uint8_t stream, uint32_t mem_size)
{
	DMA_SCR(dma, stream) &= ~(DMA_SxCR_MSIZE_MASK);
 8003566:	2318      	movs	r3, #24
 8003568:	3010      	adds	r0, #16
 800356a:	fb03 0101 	mla	r1, r3, r1, r0
 800356e:	680b      	ldr	r3, [r1, #0]
 8003570:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8003574:	600b      	str	r3, [r1, #0]
	DMA_SCR(dma, stream) |= mem_size;
 8003576:	680b      	ldr	r3, [r1, #0]
 8003578:	431a      	orrs	r2, r3
 800357a:	600a      	str	r2, [r1, #0]
 800357c:	4770      	bx	lr

0800357e <dma_set_peripheral_size>:
*/

void dma_set_peripheral_size(uint32_t dma, uint8_t stream,
			     uint32_t peripheral_size)
{
	DMA_SCR(dma, stream) &= ~(DMA_SxCR_PSIZE_MASK);
 800357e:	2318      	movs	r3, #24
 8003580:	3010      	adds	r0, #16
 8003582:	fb03 0101 	mla	r1, r3, r1, r0
 8003586:	680b      	ldr	r3, [r1, #0]
 8003588:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800358c:	600b      	str	r3, [r1, #0]
	DMA_SCR(dma, stream) |= peripheral_size;
 800358e:	680b      	ldr	r3, [r1, #0]
 8003590:	431a      	orrs	r2, r3
 8003592:	600a      	str	r2, [r1, #0]
 8003594:	4770      	bx	lr

08003596 <dma_enable_memory_increment_mode>:
@param[in] stream unsigned int8. Stream number: @ref dma_st_number
*/

void dma_enable_memory_increment_mode(uint32_t dma, uint8_t stream)
{
	DMA_SCR(dma, stream) |= DMA_SxCR_MINC;
 8003596:	2318      	movs	r3, #24
 8003598:	3010      	adds	r0, #16
 800359a:	fb03 0101 	mla	r1, r3, r1, r0
 800359e:	680b      	ldr	r3, [r1, #0]
 80035a0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80035a4:	600b      	str	r3, [r1, #0]
 80035a6:	4770      	bx	lr

080035a8 <dma_disable_peripheral_increment_mode>:
@param[in] stream unsigned int8. Stream number: @ref dma_st_number
*/

void dma_disable_peripheral_increment_mode(uint32_t dma, uint8_t stream)
{
	DMA_SCR(dma, stream) &= ~DMA_SxCR_PINC;
 80035a8:	2318      	movs	r3, #24
 80035aa:	3010      	adds	r0, #16
 80035ac:	fb03 0101 	mla	r1, r3, r1, r0
 80035b0:	680b      	ldr	r3, [r1, #0]
 80035b2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80035b6:	600b      	str	r3, [r1, #0]
 80035b8:	4770      	bx	lr

080035ba <dma_channel_select>:
@param[in] channel unsigned int8. Channel selection @ref dma_ch_sel
*/

void dma_channel_select(uint32_t dma, uint8_t stream, uint32_t channel)
{
	DMA_SCR(dma, stream) |= channel;
 80035ba:	2318      	movs	r3, #24
 80035bc:	3010      	adds	r0, #16
 80035be:	fb03 0101 	mla	r1, r3, r1, r0
 80035c2:	680b      	ldr	r3, [r1, #0]
 80035c4:	431a      	orrs	r2, r3
 80035c6:	600a      	str	r2, [r1, #0]
 80035c8:	4770      	bx	lr

080035ca <dma_set_memory_burst>:
@param[in] burst unsigned int8. Memory Burst selection @ref dma_mburst
*/

void dma_set_memory_burst(uint32_t dma, uint8_t stream, uint32_t burst)
{
	uint32_t reg32 = (DMA_SCR(dma, stream) & ~DMA_SxCR_MBURST_MASK);
 80035ca:	2318      	movs	r3, #24
 80035cc:	3010      	adds	r0, #16
 80035ce:	fb03 0101 	mla	r1, r3, r1, r0
 80035d2:	680b      	ldr	r3, [r1, #0]
 80035d4:	f023 73c0 	bic.w	r3, r3, #25165824	; 0x1800000
	DMA_SCR(dma, stream) = (reg32 | burst);
 80035d8:	431a      	orrs	r2, r3
 80035da:	600a      	str	r2, [r1, #0]
 80035dc:	4770      	bx	lr

080035de <dma_set_peripheral_burst>:
@param[in] burst unsigned int8. Peripheral Burst selection @ref dma_pburst
*/

void dma_set_peripheral_burst(uint32_t dma, uint8_t stream, uint32_t burst)
{
	uint32_t reg32 = (DMA_SCR(dma, stream) & ~DMA_SxCR_PBURST_MASK);
 80035de:	2318      	movs	r3, #24
 80035e0:	3010      	adds	r0, #16
 80035e2:	fb03 0101 	mla	r1, r3, r1, r0
 80035e6:	680b      	ldr	r3, [r1, #0]
 80035e8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
	DMA_SCR(dma, stream) = (reg32 | burst);
 80035ec:	431a      	orrs	r2, r3
 80035ee:	600a      	str	r2, [r1, #0]
 80035f0:	4770      	bx	lr

080035f2 <dma_disable_double_buffer_mode>:
@param[in] stream unsigned int8. Stream number: @ref dma_st_number
*/

void dma_disable_double_buffer_mode(uint32_t dma, uint8_t stream)
{
	DMA_SCR(dma, stream) &= ~DMA_SxCR_DBM;
 80035f2:	2318      	movs	r3, #24
 80035f4:	3010      	adds	r0, #16
 80035f6:	fb03 0101 	mla	r1, r3, r1, r0
 80035fa:	680b      	ldr	r3, [r1, #0]
 80035fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003600:	600b      	str	r3, [r1, #0]
 8003602:	4770      	bx	lr

08003604 <dma_set_peripheral_flow_control>:
@param[in] stream unsigned int8. Stream number: @ref dma_st_number
*/

void dma_set_peripheral_flow_control(uint32_t dma, uint8_t stream)
{
	DMA_SCR(dma, stream) |= DMA_SxCR_PFCTRL;
 8003604:	2318      	movs	r3, #24
 8003606:	3010      	adds	r0, #16
 8003608:	fb03 0101 	mla	r1, r3, r1, r0
 800360c:	680b      	ldr	r3, [r1, #0]
 800360e:	f043 0320 	orr.w	r3, r3, #32
 8003612:	600b      	str	r3, [r1, #0]
 8003614:	4770      	bx	lr

08003616 <dma_enable_fifo_mode>:
@param[in] stream unsigned int8. Stream number: @ref dma_st_number
*/

void dma_enable_fifo_mode(uint32_t dma, uint8_t stream)
{
	DMA_SFCR(dma, stream) |= DMA_SxFCR_DMDIS;
 8003616:	2318      	movs	r3, #24
 8003618:	3024      	adds	r0, #36	; 0x24
 800361a:	fb03 0101 	mla	r1, r3, r1, r0
 800361e:	680b      	ldr	r3, [r1, #0]
 8003620:	f043 0304 	orr.w	r3, r3, #4
 8003624:	600b      	str	r3, [r1, #0]
 8003626:	4770      	bx	lr

08003628 <dma_set_fifo_threshold>:
@param[in] threshold unsigned int8. Threshold setting @ref dma_fifo_thresh
*/

void dma_set_fifo_threshold(uint32_t dma, uint8_t stream, uint32_t threshold)
{
	uint32_t reg32 = (DMA_SFCR(dma, stream) & ~DMA_SxFCR_FTH_MASK);
 8003628:	2318      	movs	r3, #24
 800362a:	3024      	adds	r0, #36	; 0x24
 800362c:	fb03 0101 	mla	r1, r3, r1, r0
 8003630:	680b      	ldr	r3, [r1, #0]
 8003632:	f023 0303 	bic.w	r3, r3, #3
	DMA_SFCR(dma, stream) = (reg32 | threshold);
 8003636:	431a      	orrs	r2, r3
 8003638:	600a      	str	r2, [r1, #0]
 800363a:	4770      	bx	lr

0800363c <dma_enable_stream>:
@param[in] stream unsigned int8. Stream number: @ref dma_st_number
*/

void dma_enable_stream(uint32_t dma, uint8_t stream)
{
	DMA_SCR(dma, stream) |= DMA_SxCR_EN;
 800363c:	2318      	movs	r3, #24
 800363e:	3010      	adds	r0, #16
 8003640:	fb03 0101 	mla	r1, r3, r1, r0
 8003644:	680b      	ldr	r3, [r1, #0]
 8003646:	f043 0301 	orr.w	r3, r3, #1
 800364a:	600b      	str	r3, [r1, #0]
 800364c:	4770      	bx	lr

0800364e <dma_set_peripheral_address>:
@param[in] address unsigned int32. Peripheral Address.
*/

void dma_set_peripheral_address(uint32_t dma, uint8_t stream, uint32_t address)
{
	if (!(DMA_SCR(dma, stream) & DMA_SxCR_EN)) {
 800364e:	2318      	movs	r3, #24
 8003650:	fb03 0101 	mla	r1, r3, r1, r0
 8003654:	690b      	ldr	r3, [r1, #16]
 8003656:	07db      	lsls	r3, r3, #31
		DMA_SPAR(dma, stream) = (uint32_t *) address;
 8003658:	bf58      	it	pl
 800365a:	618a      	strpl	r2, [r1, #24]
 800365c:	4770      	bx	lr

0800365e <dma_set_memory_address>:
@param[in] address unsigned int32. Memory Initial Address.
*/

void dma_set_memory_address(uint32_t dma, uint8_t stream, uint32_t address)
{
	uint32_t reg32 = DMA_SCR(dma, stream);
 800365e:	2318      	movs	r3, #24
 8003660:	fb03 0101 	mla	r1, r3, r1, r0
 8003664:	690b      	ldr	r3, [r1, #16]
	if (!(reg32 & DMA_SxCR_EN) ||
 8003666:	07d8      	lsls	r0, r3, #31
 8003668:	d504      	bpl.n	8003674 <dma_set_memory_address+0x16>
	     ((reg32 & DMA_SxCR_CT) && (reg32 & DMA_SxCR_DBM))) {
 800366a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
	if (!(reg32 & DMA_SxCR_EN) ||
 800366e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003672:	d100      	bne.n	8003676 <dma_set_memory_address+0x18>
		DMA_SM0AR(dma, stream) = (uint32_t *) address;
 8003674:	61ca      	str	r2, [r1, #28]
 8003676:	4770      	bx	lr

08003678 <dma_set_number_of_data>:
maximum).
*/

void dma_set_number_of_data(uint32_t dma, uint8_t stream, uint16_t number)
{
	DMA_SNDTR(dma, stream) = number;
 8003678:	3014      	adds	r0, #20
 800367a:	2318      	movs	r3, #24
 800367c:	fb03 0101 	mla	r1, r3, r1, r0
 8003680:	600a      	str	r2, [r1, #0]
 8003682:	4770      	bx	lr

08003684 <gpio_set>:
	     If multiple pins are to be changed, use bitwise OR '|' to separate
	     them.
*/
void gpio_set(uint32_t gpioport, uint16_t gpios)
{
	GPIO_BSRR(gpioport) = gpios;
 8003684:	6181      	str	r1, [r0, #24]
 8003686:	4770      	bx	lr

08003688 <gpio_clear>:
	     If multiple pins are to be changed, use bitwise OR '|' to separate
	     them.
*/
void  gpio_clear(uint32_t gpioport, uint16_t gpios)
{
	GPIO_BSRR(gpioport) = (gpios << 16);
 8003688:	0409      	lsls	r1, r1, #16
 800368a:	6181      	str	r1, [r0, #24]
 800368c:	4770      	bx	lr

0800368e <gpio_get>:
@param[in] gpioport Unsigned int32. Port identifier @ref gpio_port_id
@return Unsigned int16. The value held in the specified GPIO port.
*/
uint16_t gpio_port_read(uint32_t gpioport)
{
	return (uint16_t)GPIO_IDR(gpioport);
 800368e:	6900      	ldr	r0, [r0, #16]
}
 8003690:	4008      	ands	r0, r1
 8003692:	4770      	bx	lr

08003694 <gpio_mode_setup>:
	     If multiple pins are to be set, use bitwise OR '|' to separate
	     them.
*/
void gpio_mode_setup(uint32_t gpioport, uint8_t mode, uint8_t pull_up_down,
		     uint16_t gpios)
{
 8003694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	/*
	 * We want to set the config only for the pins mentioned in gpios,
	 * but keeping the others, so read out the actual config first.
	 */
	moder = GPIO_MODER(gpioport);
 8003698:	6805      	ldr	r5, [r0, #0]
	pupd = GPIO_PUPDR(gpioport);
 800369a:	68c4      	ldr	r4, [r0, #12]
 800369c:	2600      	movs	r6, #0
	for (i = 0; i < 16; i++) {
		if (!((1 << i) & gpios)) {
			continue;
		}

		moder &= ~GPIO_MODE_MASK(i);
 800369e:	f04f 0c03 	mov.w	ip, #3
		if (!((1 << i) & gpios)) {
 80036a2:	fa43 f706 	asr.w	r7, r3, r6
 80036a6:	07ff      	lsls	r7, r7, #31
 80036a8:	d50f      	bpl.n	80036ca <gpio_mode_setup+0x36>
 80036aa:	0077      	lsls	r7, r6, #1
		moder &= ~GPIO_MODE_MASK(i);
 80036ac:	fa0c fe07 	lsl.w	lr, ip, r7
 80036b0:	ea6f 0e0e 	mvn.w	lr, lr
		moder |= GPIO_MODE(i, mode);
 80036b4:	fa01 f807 	lsl.w	r8, r1, r7
		moder &= ~GPIO_MODE_MASK(i);
 80036b8:	ea0e 0505 	and.w	r5, lr, r5
		pupd &= ~GPIO_PUPD_MASK(i);
 80036bc:	ea0e 0404 	and.w	r4, lr, r4
		pupd |= GPIO_PUPD(i, pull_up_down);
 80036c0:	fa02 f707 	lsl.w	r7, r2, r7
		moder |= GPIO_MODE(i, mode);
 80036c4:	ea48 0505 	orr.w	r5, r8, r5
		pupd |= GPIO_PUPD(i, pull_up_down);
 80036c8:	433c      	orrs	r4, r7
 80036ca:	3601      	adds	r6, #1
	for (i = 0; i < 16; i++) {
 80036cc:	2e10      	cmp	r6, #16
 80036ce:	d1e8      	bne.n	80036a2 <gpio_mode_setup+0xe>
	}

	/* Set mode and pull up/down control registers. */
	GPIO_MODER(gpioport) = moder;
 80036d0:	6005      	str	r5, [r0, #0]
	GPIO_PUPDR(gpioport) = pupd;
 80036d2:	60c4      	str	r4, [r0, #12]
 80036d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080036d8 <gpio_set_output_options>:
			     uint16_t gpios)
{
	uint16_t i;
	uint32_t ospeedr;

	if (otype == 0x1) {
 80036d8:	2901      	cmp	r1, #1
		GPIO_OTYPER(gpioport) |= gpios;
 80036da:	6841      	ldr	r1, [r0, #4]
 80036dc:	bf0c      	ite	eq
 80036de:	4319      	orreq	r1, r3
	} else {
		GPIO_OTYPER(gpioport) &= ~gpios;
 80036e0:	4399      	bicne	r1, r3
{
 80036e2:	b5f0      	push	{r4, r5, r6, r7, lr}
		GPIO_OTYPER(gpioport) &= ~gpios;
 80036e4:	6041      	str	r1, [r0, #4]
	}

	ospeedr = GPIO_OSPEEDR(gpioport);
 80036e6:	6881      	ldr	r1, [r0, #8]
 80036e8:	2400      	movs	r4, #0

	for (i = 0; i < 16; i++) {
		if (!((1 << i) & gpios)) {
			continue;
		}
		ospeedr &= ~GPIO_OSPEED_MASK(i);
 80036ea:	2603      	movs	r6, #3
		if (!((1 << i) & gpios)) {
 80036ec:	fa43 f504 	asr.w	r5, r3, r4
 80036f0:	07ed      	lsls	r5, r5, #31
 80036f2:	d507      	bpl.n	8003704 <gpio_set_output_options+0x2c>
 80036f4:	0065      	lsls	r5, r4, #1
		ospeedr &= ~GPIO_OSPEED_MASK(i);
 80036f6:	fa06 f705 	lsl.w	r7, r6, r5
 80036fa:	ea21 0107 	bic.w	r1, r1, r7
		ospeedr |= GPIO_OSPEED(i, speed);
 80036fe:	fa02 f505 	lsl.w	r5, r2, r5
 8003702:	4329      	orrs	r1, r5
 8003704:	3401      	adds	r4, #1
	for (i = 0; i < 16; i++) {
 8003706:	2c10      	cmp	r4, #16
 8003708:	d1f0      	bne.n	80036ec <gpio_set_output_options+0x14>
	}

	GPIO_OSPEEDR(gpioport) = ospeedr;
 800370a:	6081      	str	r1, [r0, #8]
 800370c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800370e <gpio_set_af>:
@param[in] gpios Unsigned int16. Pin identifiers @ref gpio_pin_id
	     If multiple pins are to be set, use bitwise OR '|' to separate
	     them.
*/
void gpio_set_af(uint32_t gpioport, uint8_t alt_func_num, uint16_t gpios)
{
 800370e:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint16_t i;
	uint32_t afrl, afrh;

	afrl = GPIO_AFRL(gpioport);
 8003710:	6a07      	ldr	r7, [r0, #32]
	afrh = GPIO_AFRH(gpioport);
 8003712:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8003714:	2300      	movs	r3, #0

	for (i = 0; i < 8; i++) {
		if (!((1 << i) & gpios)) {
			continue;
		}
		afrl &= ~GPIO_AFR_MASK(i);
 8003716:	f04f 0e0f 	mov.w	lr, #15
		if (!((1 << i) & gpios)) {
 800371a:	fa42 f403 	asr.w	r4, r2, r3
 800371e:	07e5      	lsls	r5, r4, #31
 8003720:	d507      	bpl.n	8003732 <gpio_set_af+0x24>
 8003722:	009d      	lsls	r5, r3, #2
		afrl &= ~GPIO_AFR_MASK(i);
 8003724:	fa0e f405 	lsl.w	r4, lr, r5
 8003728:	ea27 0704 	bic.w	r7, r7, r4
		afrl |= GPIO_AFR(i, alt_func_num);
 800372c:	fa01 f505 	lsl.w	r5, r1, r5
 8003730:	432f      	orrs	r7, r5
 8003732:	3301      	adds	r3, #1
	for (i = 0; i < 8; i++) {
 8003734:	2b08      	cmp	r3, #8
 8003736:	d1f0      	bne.n	800371a <gpio_set_af+0xc>
 8003738:	2300      	movs	r3, #0

	for (i = 8; i < 16; i++) {
		if (!((1 << i) & gpios)) {
			continue;
		}
		afrh &= ~GPIO_AFR_MASK(i - 8);
 800373a:	f04f 0e0f 	mov.w	lr, #15
		if (!((1 << i) & gpios)) {
 800373e:	f103 0408 	add.w	r4, r3, #8
 8003742:	fa42 f404 	asr.w	r4, r2, r4
 8003746:	07e4      	lsls	r4, r4, #31
 8003748:	d507      	bpl.n	800375a <gpio_set_af+0x4c>
 800374a:	009c      	lsls	r4, r3, #2
		afrh &= ~GPIO_AFR_MASK(i - 8);
 800374c:	fa0e f504 	lsl.w	r5, lr, r4
 8003750:	ea26 0605 	bic.w	r6, r6, r5
		afrh |= GPIO_AFR(i - 8, alt_func_num);
 8003754:	fa01 f404 	lsl.w	r4, r1, r4
 8003758:	4326      	orrs	r6, r4
 800375a:	3301      	adds	r3, #1
	for (i = 8; i < 16; i++) {
 800375c:	2b08      	cmp	r3, #8
 800375e:	d1ee      	bne.n	800373e <gpio_set_af+0x30>
	}

	GPIO_AFRL(gpioport) = afrl;
 8003760:	6207      	str	r7, [r0, #32]
	GPIO_AFRH(gpioport) = afrh;
 8003762:	6246      	str	r6, [r0, #36]	; 0x24
 8003764:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003768 <iwdg_start>:

*/

void iwdg_start(void)
{
	IWDG_KR = IWDG_KR_START;
 8003768:	4b02      	ldr	r3, [pc, #8]	; (8003774 <iwdg_start+0xc>)
 800376a:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800376e:	601a      	str	r2, [r3, #0]
 8003770:	4770      	bx	lr
 8003772:	bf00      	nop
 8003774:	40003000 	.word	0x40003000

08003778 <spi_reset>:
@param[in] spi_peripheral Unsigned int32. SPI peripheral identifier @ref
spi_reg_base.
*/

void spi_reset(uint32_t spi_peripheral)
{	switch (spi_peripheral) {
 8003778:	4b15      	ldr	r3, [pc, #84]	; (80037d0 <spi_reset+0x58>)
 800377a:	4298      	cmp	r0, r3
 800377c:	d017      	beq.n	80037ae <spi_reset+0x36>
 800377e:	d808      	bhi.n	8003792 <spi_reset+0x1a>
 8003780:	f5a3 4378 	sub.w	r3, r3, #63488	; 0xf800
 8003784:	4298      	cmp	r0, r3
 8003786:	d016      	beq.n	80037b6 <spi_reset+0x3e>
 8003788:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800378c:	4298      	cmp	r0, r3
 800378e:	d015      	beq.n	80037bc <spi_reset+0x44>
 8003790:	4770      	bx	lr
 8003792:	4b10      	ldr	r3, [pc, #64]	; (80037d4 <spi_reset+0x5c>)
 8003794:	4298      	cmp	r0, r3
 8003796:	d014      	beq.n	80037c2 <spi_reset+0x4a>
 8003798:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800379c:	4298      	cmp	r0, r3
 800379e:	d013      	beq.n	80037c8 <spi_reset+0x50>
 80037a0:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 80037a4:	4298      	cmp	r0, r3
 80037a6:	d112      	bne.n	80037ce <spi_reset+0x56>
		rcc_periph_reset_pulse(RST_SPI3);
		break;
#endif
#if defined(SPI4_BASE)
	case SPI4_BASE:
		rcc_periph_reset_pulse(RST_SPI4);
 80037a8:	f240 408d 	movw	r0, #1165	; 0x48d
 80037ac:	e001      	b.n	80037b2 <spi_reset+0x3a>
		rcc_periph_reset_pulse(RST_SPI1);
 80037ae:	f240 408c 	movw	r0, #1164	; 0x48c
		rcc_periph_reset_pulse(RST_SPI5);
		break;
#endif
#if defined(SPI6_BASE)
	case SPI6_BASE:
		rcc_periph_reset_pulse(RST_SPI6);
 80037b2:	f000 b909 	b.w	80039c8 <rcc_periph_reset_pulse>
		rcc_periph_reset_pulse(RST_SPI2);
 80037b6:	f240 400e 	movw	r0, #1038	; 0x40e
 80037ba:	e7fa      	b.n	80037b2 <spi_reset+0x3a>
		rcc_periph_reset_pulse(RST_SPI3);
 80037bc:	f240 400f 	movw	r0, #1039	; 0x40f
 80037c0:	e7f7      	b.n	80037b2 <spi_reset+0x3a>
		rcc_periph_reset_pulse(RST_SPI5);
 80037c2:	f240 4094 	movw	r0, #1172	; 0x494
 80037c6:	e7f4      	b.n	80037b2 <spi_reset+0x3a>
		rcc_periph_reset_pulse(RST_SPI6);
 80037c8:	f240 4095 	movw	r0, #1173	; 0x495
 80037cc:	e7f1      	b.n	80037b2 <spi_reset+0x3a>
 80037ce:	4770      	bx	lr
 80037d0:	40013000 	.word	0x40013000
 80037d4:	40015000 	.word	0x40015000

080037d8 <spi_enable>:
@param[in] spi Unsigned int32. SPI peripheral identifier @ref spi_reg_base.
*/

void spi_enable(uint32_t spi)
{
	SPI_CR1(spi) |= SPI_CR1_SPE; /* Enable SPI. */
 80037d8:	6803      	ldr	r3, [r0, #0]
 80037da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037de:	6003      	str	r3, [r0, #0]
 80037e0:	4770      	bx	lr

080037e2 <spi_send>:
*/

void spi_send(uint32_t spi, uint16_t data)
{
	/* Wait for transfer finished. */
	while (!(SPI_SR(spi) & SPI_SR_TXE));
 80037e2:	6883      	ldr	r3, [r0, #8]
 80037e4:	079b      	lsls	r3, r3, #30
 80037e6:	d5fc      	bpl.n	80037e2 <spi_send>

	/* Write data (8 or 16 bits, depending on DFF) into DR. */
	SPI_DR(spi) = data;
 80037e8:	60c1      	str	r1, [r0, #12]
 80037ea:	4770      	bx	lr

080037ec <spi_init_master>:
@returns int. Error code.
*/

int spi_init_master(uint32_t spi, uint32_t br, uint32_t cpol, uint32_t cpha,
		    uint32_t dff, uint32_t lsbfirst)
{
 80037ec:	b570      	push	{r4, r5, r6, lr}

	reg32 |= br;		/* Set baud rate bits. */
	reg32 |= cpol;		/* Set CPOL value. */
	reg32 |= cpha;		/* Set CPHA value. */
	reg32 |= dff;		/* Set data format (8 or 16 bits). */
	reg32 |= lsbfirst;	/* Set frame format (LSB- or MSB-first). */
 80037ee:	9c05      	ldr	r4, [sp, #20]
 80037f0:	9e04      	ldr	r6, [sp, #16]
	uint32_t reg32 = SPI_CR1(spi);
 80037f2:	6805      	ldr	r5, [r0, #0]
	reg32 |= lsbfirst;	/* Set frame format (LSB- or MSB-first). */
 80037f4:	f044 0404 	orr.w	r4, r4, #4
 80037f8:	4334      	orrs	r4, r6
 80037fa:	431c      	orrs	r4, r3
 80037fc:	4314      	orrs	r4, r2

	SPI_CR2(spi) |= SPI_CR2_SSOE; /* common case */
 80037fe:	6843      	ldr	r3, [r0, #4]
	reg32 &= SPI_CR1_SPE | SPI_CR1_CRCEN | SPI_CR1_CRCNEXT;
 8003800:	f405 5541 	and.w	r5, r5, #12352	; 0x3040
	reg32 |= lsbfirst;	/* Set frame format (LSB- or MSB-first). */
 8003804:	430c      	orrs	r4, r1
 8003806:	432c      	orrs	r4, r5
	SPI_CR2(spi) |= SPI_CR2_SSOE; /* common case */
 8003808:	f043 0304 	orr.w	r3, r3, #4
 800380c:	6043      	str	r3, [r0, #4]
	SPI_CR1(spi) = reg32;
 800380e:	6004      	str	r4, [r0, #0]

	return 0; /* TODO */
}
 8003810:	2000      	movs	r0, #0
 8003812:	bd70      	pop	{r4, r5, r6, pc}

08003814 <usart_set_baudrate>:
void usart_set_baudrate(uint32_t usart, uint32_t baud)
{
	uint32_t clock = rcc_apb1_frequency;

#if defined STM32F2 || defined STM32F4
	if ((usart == USART1) ||
 8003814:	4a08      	ldr	r2, [pc, #32]	; (8003838 <usart_set_baudrate+0x24>)
	uint32_t clock = rcc_apb1_frequency;
 8003816:	4b09      	ldr	r3, [pc, #36]	; (800383c <usart_set_baudrate+0x28>)
{
 8003818:	b510      	push	{r4, lr}
	if ((usart == USART1) ||
 800381a:	f420 6480 	bic.w	r4, r0, #1024	; 0x400
 800381e:	4294      	cmp	r4, r2
	uint32_t clock = rcc_apb1_frequency;
 8003820:	681b      	ldr	r3, [r3, #0]
	    (usart == USART6)) {
		clock = rcc_apb2_frequency;
 8003822:	bf04      	itt	eq
 8003824:	4b06      	ldreq	r3, [pc, #24]	; (8003840 <usart_set_baudrate+0x2c>)
 8003826:	681b      	ldreq	r3, [r3, #0]
	 * simple divider to generate the correct baudrate.
	 *
	 * Note: We round() the value rather than floor()ing it, for more
	 * accurate divisor selection.
	 */
	USART_BRR(usart) = ((2 * clock) + baud) / (2 * baud);
 8003828:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800382c:	0049      	lsls	r1, r1, #1
 800382e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003832:	6083      	str	r3, [r0, #8]
 8003834:	bd10      	pop	{r4, pc}
 8003836:	bf00      	nop
 8003838:	40011000 	.word	0x40011000
 800383c:	2000056c 	.word	0x2000056c
 8003840:	20000570 	.word	0x20000570

08003844 <usart_set_databits>:
*/

void usart_set_databits(uint32_t usart, uint32_t bits)
{
	if (bits == 8) {
		USART_CR1(usart) &= ~USART_CR1_M; /* 8 data bits */
 8003844:	68c3      	ldr	r3, [r0, #12]
	if (bits == 8) {
 8003846:	2908      	cmp	r1, #8
		USART_CR1(usart) &= ~USART_CR1_M; /* 8 data bits */
 8003848:	bf0c      	ite	eq
 800384a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
	} else {
		USART_CR1(usart) |= USART_CR1_M;  /* 9 data bits */
 800384e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003852:	60c3      	str	r3, [r0, #12]
 8003854:	4770      	bx	lr

08003856 <usart_set_stopbits>:

void usart_set_stopbits(uint32_t usart, uint32_t stopbits)
{
	uint32_t reg32;

	reg32 = USART_CR2(usart);
 8003856:	6903      	ldr	r3, [r0, #16]
	reg32 = (reg32 & ~USART_CR2_STOPBITS_MASK) | stopbits;
 8003858:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800385c:	4319      	orrs	r1, r3
	USART_CR2(usart) = reg32;
 800385e:	6101      	str	r1, [r0, #16]
 8003860:	4770      	bx	lr

08003862 <usart_set_parity>:

void usart_set_parity(uint32_t usart, uint32_t parity)
{
	uint32_t reg32;

	reg32 = USART_CR1(usart);
 8003862:	68c3      	ldr	r3, [r0, #12]
	reg32 = (reg32 & ~USART_PARITY_MASK) | parity;
 8003864:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003868:	4319      	orrs	r1, r3
	USART_CR1(usart) = reg32;
 800386a:	60c1      	str	r1, [r0, #12]
 800386c:	4770      	bx	lr

0800386e <usart_set_mode>:

void usart_set_mode(uint32_t usart, uint32_t mode)
{
	uint32_t reg32;

	reg32 = USART_CR1(usart);
 800386e:	68c3      	ldr	r3, [r0, #12]
	reg32 = (reg32 & ~USART_MODE_MASK) | mode;
 8003870:	f023 030c 	bic.w	r3, r3, #12
 8003874:	4319      	orrs	r1, r3
	USART_CR1(usart) = reg32;
 8003876:	60c1      	str	r1, [r0, #12]
 8003878:	4770      	bx	lr

0800387a <usart_set_flow_control>:

void usart_set_flow_control(uint32_t usart, uint32_t flowcontrol)
{
	uint32_t reg32;

	reg32 = USART_CR3(usart);
 800387a:	6943      	ldr	r3, [r0, #20]
	reg32 = (reg32 & ~USART_FLOWCONTROL_MASK) | flowcontrol;
 800387c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003880:	4319      	orrs	r1, r3
	USART_CR3(usart) = reg32;
 8003882:	6141      	str	r1, [r0, #20]
 8003884:	4770      	bx	lr

08003886 <usart_enable>:
usart_reg_base
*/

void usart_enable(uint32_t usart)
{
	USART_CR1(usart) |= USART_CR1_UE;
 8003886:	68c3      	ldr	r3, [r0, #12]
 8003888:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800388c:	60c3      	str	r3, [r0, #12]
 800388e:	4770      	bx	lr

08003890 <usart_send>:
*/

void usart_send(uint32_t usart, uint16_t data)
{
	/* Send data. */
	USART_DR(usart) = (data & USART_DR_MASK);
 8003890:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8003894:	6041      	str	r1, [r0, #4]
 8003896:	4770      	bx	lr

08003898 <usart_wait_send_ready>:
*/

void usart_wait_send_ready(uint32_t usart)
{
	/* Wait until the data has been transferred into the shift register. */
	while ((USART_SR(usart) & USART_SR_TXE) == 0);
 8003898:	6803      	ldr	r3, [r0, #0]
 800389a:	061b      	lsls	r3, r3, #24
 800389c:	d5fc      	bpl.n	8003898 <usart_wait_send_ready>
}
 800389e:	4770      	bx	lr

080038a0 <flash_set_ws>:
*/
void flash_set_ws(uint32_t ws)
{
	uint32_t reg32;

	reg32 = FLASH_ACR;
 80038a0:	4a03      	ldr	r2, [pc, #12]	; (80038b0 <flash_set_ws+0x10>)
 80038a2:	6813      	ldr	r3, [r2, #0]
	reg32 &= ~(FLASH_ACR_LATENCY_MASK);
 80038a4:	f023 0307 	bic.w	r3, r3, #7
	reg32 |= ws;
 80038a8:	4318      	orrs	r0, r3
	FLASH_ACR = reg32;
 80038aa:	6010      	str	r0, [r2, #0]
 80038ac:	4770      	bx	lr
 80038ae:	bf00      	nop
 80038b0:	40023c00 	.word	0x40023c00

080038b4 <flash_unlock>:
*/

void flash_unlock(void)
{
	/* Clear the unlock sequence state. */
	FLASH_CR |= FLASH_CR_LOCK;
 80038b4:	4a05      	ldr	r2, [pc, #20]	; (80038cc <flash_unlock+0x18>)
 80038b6:	6813      	ldr	r3, [r2, #0]
 80038b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80038bc:	6013      	str	r3, [r2, #0]

	/* Authorize the FPEC access. */
	FLASH_KEYR = FLASH_KEYR_KEY1;
 80038be:	4b04      	ldr	r3, [pc, #16]	; (80038d0 <flash_unlock+0x1c>)
 80038c0:	4a04      	ldr	r2, [pc, #16]	; (80038d4 <flash_unlock+0x20>)
 80038c2:	601a      	str	r2, [r3, #0]
	FLASH_KEYR = FLASH_KEYR_KEY2;
 80038c4:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 80038c8:	601a      	str	r2, [r3, #0]
 80038ca:	4770      	bx	lr
 80038cc:	40023c10 	.word	0x40023c10
 80038d0:	40023c04 	.word	0x40023c04
 80038d4:	45670123 	.word	0x45670123

080038d8 <flash_lock>:
Used to prevent spurious writes to FLASH.
*/

void flash_lock(void)
{
	FLASH_CR |= FLASH_CR_LOCK;
 80038d8:	4a02      	ldr	r2, [pc, #8]	; (80038e4 <flash_lock+0xc>)
 80038da:	6813      	ldr	r3, [r2, #0]
 80038dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80038e0:	6013      	str	r3, [r2, #0]
 80038e2:	4770      	bx	lr
 80038e4:	40023c10 	.word	0x40023c10

080038e8 <flash_wait_for_last_operation>:
testing the busy flag.
*/

void flash_wait_for_last_operation(void)
{
	while ((FLASH_SR & FLASH_SR_BSY) == FLASH_SR_BSY);
 80038e8:	4a02      	ldr	r2, [pc, #8]	; (80038f4 <flash_wait_for_last_operation+0xc>)
 80038ea:	6813      	ldr	r3, [r2, #0]
 80038ec:	03db      	lsls	r3, r3, #15
 80038ee:	d4fc      	bmi.n	80038ea <flash_wait_for_last_operation+0x2>
}
 80038f0:	4770      	bx	lr
 80038f2:	bf00      	nop
 80038f4:	40023c0c 	.word	0x40023c0c

080038f8 <flash_set_program_size>:
@param[in] psize The programming word width one of: @ref flash_cr_program_width
*/

static inline void flash_set_program_size(uint32_t psize)
{
	FLASH_CR &= ~(FLASH_CR_PROGRAM_MASK << FLASH_CR_PROGRAM_SHIFT);
 80038f8:	4b04      	ldr	r3, [pc, #16]	; (800390c <flash_set_program_size+0x14>)
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003900:	601a      	str	r2, [r3, #0]
	FLASH_CR |= psize << FLASH_CR_PROGRAM_SHIFT;
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
 8003908:	6018      	str	r0, [r3, #0]
 800390a:	4770      	bx	lr
 800390c:	40023c10 	.word	0x40023c10

08003910 <flash_program_word>:
@param[in] address Starting address in Flash.
@param[in] data word to write
*/

void flash_program_word(uint32_t address, uint32_t data)
{
 8003910:	b570      	push	{r4, r5, r6, lr}
	/* Ensure that all flash operations are complete. */
	flash_wait_for_last_operation();
	flash_set_program_size(FLASH_CR_PROGRAM_X32);

	/* Enable writes to flash. */
	FLASH_CR |= FLASH_CR_PG;
 8003912:	4c0a      	ldr	r4, [pc, #40]	; (800393c <flash_program_word+0x2c>)
{
 8003914:	460e      	mov	r6, r1
 8003916:	4605      	mov	r5, r0
	flash_wait_for_last_operation();
 8003918:	f7ff ffe6 	bl	80038e8 <flash_wait_for_last_operation>
	flash_set_program_size(FLASH_CR_PROGRAM_X32);
 800391c:	2002      	movs	r0, #2
 800391e:	f7ff ffeb 	bl	80038f8 <flash_set_program_size>
	FLASH_CR |= FLASH_CR_PG;
 8003922:	6823      	ldr	r3, [r4, #0]
 8003924:	f043 0301 	orr.w	r3, r3, #1
 8003928:	6023      	str	r3, [r4, #0]

	/* Program the word. */
	MMIO32(address) = data;
 800392a:	602e      	str	r6, [r5, #0]

	/* Wait for the write to complete. */
	flash_wait_for_last_operation();
 800392c:	f7ff ffdc 	bl	80038e8 <flash_wait_for_last_operation>

	/* Disable writes to flash. */
	FLASH_CR &= ~FLASH_CR_PG;
 8003930:	6823      	ldr	r3, [r4, #0]
 8003932:	f023 0301 	bic.w	r3, r3, #1
 8003936:	6023      	str	r3, [r4, #0]
 8003938:	bd70      	pop	{r4, r5, r6, pc}
 800393a:	bf00      	nop
 800393c:	40023c10 	.word	0x40023c10

08003940 <flash_erase_sector>:
@param[in] sector (0 - 11 for some parts, 0-23 on others)
@param program_size: 0 (8-bit), 1 (16-bit), 2 (32-bit), 3 (64-bit)
*/

void flash_erase_sector(uint8_t sector, uint32_t program_size)
{
 8003940:	b538      	push	{r3, r4, r5, lr}
 8003942:	460c      	mov	r4, r1
 8003944:	4605      	mov	r5, r0
	flash_wait_for_last_operation();
 8003946:	f7ff ffcf 	bl	80038e8 <flash_wait_for_last_operation>
	flash_set_program_size(program_size);
 800394a:	4620      	mov	r0, r4

	FLASH_CR &= ~(FLASH_CR_SNB_MASK << FLASH_CR_SNB_SHIFT);
 800394c:	4c0f      	ldr	r4, [pc, #60]	; (800398c <flash_erase_sector+0x4c>)
	flash_set_program_size(program_size);
 800394e:	f7ff ffd3 	bl	80038f8 <flash_set_program_size>
	FLASH_CR &= ~(FLASH_CR_SNB_MASK << FLASH_CR_SNB_SHIFT);
 8003952:	6823      	ldr	r3, [r4, #0]
 8003954:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003958:	6023      	str	r3, [r4, #0]
	FLASH_CR |= (sector & FLASH_CR_SNB_MASK) << FLASH_CR_SNB_SHIFT;
 800395a:	6823      	ldr	r3, [r4, #0]
 800395c:	00ed      	lsls	r5, r5, #3
 800395e:	b2ed      	uxtb	r5, r5
 8003960:	431d      	orrs	r5, r3
 8003962:	6025      	str	r5, [r4, #0]
	FLASH_CR |= FLASH_CR_SER;
 8003964:	6823      	ldr	r3, [r4, #0]
 8003966:	f043 0302 	orr.w	r3, r3, #2
 800396a:	6023      	str	r3, [r4, #0]
	FLASH_CR |= FLASH_CR_STRT;
 800396c:	6823      	ldr	r3, [r4, #0]
 800396e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003972:	6023      	str	r3, [r4, #0]

	flash_wait_for_last_operation();
 8003974:	f7ff ffb8 	bl	80038e8 <flash_wait_for_last_operation>
	FLASH_CR &= ~FLASH_CR_SER;
 8003978:	6823      	ldr	r3, [r4, #0]
 800397a:	f023 0302 	bic.w	r3, r3, #2
 800397e:	6023      	str	r3, [r4, #0]
	FLASH_CR &= ~(FLASH_CR_SNB_MASK << FLASH_CR_SNB_SHIFT);
 8003980:	6823      	ldr	r3, [r4, #0]
 8003982:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003986:	6023      	str	r3, [r4, #0]
 8003988:	bd38      	pop	{r3, r4, r5, pc}
 800398a:	bf00      	nop
 800398c:	40023c10 	.word	0x40023c10

08003990 <rcc_periph_clock_enable>:
 * For available constants, see #rcc_periph_clken (RCC_UART1 for example)
 */

void rcc_periph_clock_enable(enum rcc_periph_clken clken)
{
	_RCC_REG(clken) |= _RCC_BIT(clken);
 8003990:	0943      	lsrs	r3, r0, #5
 8003992:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003996:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 800399a:	f000 021f 	and.w	r2, r0, #31
 800399e:	6819      	ldr	r1, [r3, #0]
 80039a0:	2001      	movs	r0, #1
 80039a2:	4090      	lsls	r0, r2
 80039a4:	4308      	orrs	r0, r1
 80039a6:	6018      	str	r0, [r3, #0]
 80039a8:	4770      	bx	lr

080039aa <rcc_periph_clock_disable>:
 * For available constants, see #rcc_periph_clken (RCC_UART1 for example)
 */

void rcc_periph_clock_disable(enum rcc_periph_clken clken)
{
	_RCC_REG(clken) &= ~_RCC_BIT(clken);
 80039aa:	0943      	lsrs	r3, r0, #5
 80039ac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80039b0:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 80039b4:	f000 001f 	and.w	r0, r0, #31
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	2101      	movs	r1, #1
 80039bc:	fa01 f000 	lsl.w	r0, r1, r0
 80039c0:	ea22 0000 	bic.w	r0, r2, r0
 80039c4:	6018      	str	r0, [r3, #0]
 80039c6:	4770      	bx	lr

080039c8 <rcc_periph_reset_pulse>:
 * For available constants, see #rcc_periph_rst (RST_UART1 for example)
 */

void rcc_periph_reset_pulse(enum rcc_periph_rst rst)
{
	_RCC_REG(rst) |= _RCC_BIT(rst);
 80039c8:	0943      	lsrs	r3, r0, #5
 80039ca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80039ce:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 80039d2:	f000 021f 	and.w	r2, r0, #31
 80039d6:	6819      	ldr	r1, [r3, #0]
 80039d8:	2001      	movs	r0, #1
 80039da:	4090      	lsls	r0, r2
 80039dc:	4301      	orrs	r1, r0
 80039de:	6019      	str	r1, [r3, #0]
	_RCC_REG(rst) &= ~_RCC_BIT(rst);
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	ea22 0000 	bic.w	r0, r2, r0
 80039e6:	6018      	str	r0, [r3, #0]
 80039e8:	4770      	bx	lr

080039ea <rcc_periph_reset_release>:
 * For available constants, see #rcc_periph_rst (RST_UART1 for example)
 */

void rcc_periph_reset_release(enum rcc_periph_rst rst)
{
	_RCC_REG(rst) &= ~_RCC_BIT(rst);
 80039ea:	0943      	lsrs	r3, r0, #5
 80039ec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80039f0:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 80039f4:	f000 001f 	and.w	r0, r0, #31
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	2101      	movs	r1, #1
 80039fc:	fa01 f000 	lsl.w	r0, r1, r0
 8003a00:	ea22 0000 	bic.w	r0, r2, r0
 8003a04:	6018      	str	r0, [r3, #0]
 8003a06:	4770      	bx	lr

08003a08 <blocking_handler>:
	}

}

void blocking_handler(void)
{
 8003a08:	e7fe      	b.n	8003a08 <blocking_handler>

08003a0a <null_handler>:
	while (1);
}

void null_handler(void)
{
 8003a0a:	4770      	bx	lr

08003a0c <reset_handler>:
{
 8003a0c:	4c1a      	ldr	r4, [pc, #104]	; (8003a78 <reset_handler+0x6c>)
 8003a0e:	491b      	ldr	r1, [pc, #108]	; (8003a7c <reset_handler+0x70>)
	for (src = &_data_loadaddr, dest = &_data;
 8003a10:	481b      	ldr	r0, [pc, #108]	; (8003a80 <reset_handler+0x74>)
 8003a12:	2200      	movs	r2, #0
 8003a14:	1853      	adds	r3, r2, r1
 8003a16:	4283      	cmp	r3, r0
 8003a18:	d31a      	bcc.n	8003a50 <reset_handler+0x44>
	while (dest < &_ebss) {
 8003a1a:	4a1a      	ldr	r2, [pc, #104]	; (8003a84 <reset_handler+0x78>)
		*dest++ = 0;
 8003a1c:	2100      	movs	r1, #0
	while (dest < &_ebss) {
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d31a      	bcc.n	8003a58 <reset_handler+0x4c>
	SCB_CCR |= SCB_CCR_STKALIGN;
 8003a22:	4a19      	ldr	r2, [pc, #100]	; (8003a88 <reset_handler+0x7c>)
	for (fp = &__preinit_array_start; fp < &__preinit_array_end; fp++) {
 8003a24:	4c19      	ldr	r4, [pc, #100]	; (8003a8c <reset_handler+0x80>)
	SCB_CCR |= SCB_CCR_STKALIGN;
 8003a26:	6813      	ldr	r3, [r2, #0]
	for (fp = &__preinit_array_start; fp < &__preinit_array_end; fp++) {
 8003a28:	4d19      	ldr	r5, [pc, #100]	; (8003a90 <reset_handler+0x84>)
	SCB_CCR |= SCB_CCR_STKALIGN;
 8003a2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a2e:	6013      	str	r3, [r2, #0]
#include <libopencm3/cm3/scb.h>

static void pre_main(void)
{
	/* Enable access to Floating-Point coprocessor. */
	SCB_CPACR |= SCB_CPACR_FULL * (SCB_CPACR_CP10 | SCB_CPACR_CP11);
 8003a30:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8003a32:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003a36:	6753      	str	r3, [r2, #116]	; 0x74
	for (fp = &__preinit_array_start; fp < &__preinit_array_end; fp++) {
 8003a38:	42ac      	cmp	r4, r5
 8003a3a:	d310      	bcc.n	8003a5e <reset_handler+0x52>
 8003a3c:	4c15      	ldr	r4, [pc, #84]	; (8003a94 <reset_handler+0x88>)
	for (fp = &__init_array_start; fp < &__init_array_end; fp++) {
 8003a3e:	4d16      	ldr	r5, [pc, #88]	; (8003a98 <reset_handler+0x8c>)
 8003a40:	42ac      	cmp	r4, r5
 8003a42:	d310      	bcc.n	8003a66 <reset_handler+0x5a>
	main();
 8003a44:	f7fc fe26 	bl	8000694 <main>
	for (fp = &__fini_array_start; fp < &__fini_array_end; fp++) {
 8003a48:	4c14      	ldr	r4, [pc, #80]	; (8003a9c <reset_handler+0x90>)
 8003a4a:	4d15      	ldr	r5, [pc, #84]	; (8003aa0 <reset_handler+0x94>)
 8003a4c:	42ac      	cmp	r4, r5
 8003a4e:	d30e      	bcc.n	8003a6e <reset_handler+0x62>
		*dest = *src;
 8003a50:	5913      	ldr	r3, [r2, r4]
 8003a52:	5053      	str	r3, [r2, r1]
 8003a54:	3204      	adds	r2, #4
 8003a56:	e7dd      	b.n	8003a14 <reset_handler+0x8>
		*dest++ = 0;
 8003a58:	6019      	str	r1, [r3, #0]
 8003a5a:	3304      	adds	r3, #4
 8003a5c:	e7df      	b.n	8003a1e <reset_handler+0x12>
		(*fp)();
 8003a5e:	f854 3b04 	ldr.w	r3, [r4], #4
 8003a62:	4798      	blx	r3
 8003a64:	e7e8      	b.n	8003a38 <reset_handler+0x2c>
		(*fp)();
 8003a66:	f854 3b04 	ldr.w	r3, [r4], #4
 8003a6a:	4798      	blx	r3
 8003a6c:	e7e8      	b.n	8003a40 <reset_handler+0x34>
		(*fp)();
 8003a6e:	f854 3b04 	ldr.w	r3, [r4], #4
 8003a72:	4798      	blx	r3
 8003a74:	e7ea      	b.n	8003a4c <reset_handler+0x40>
 8003a76:	bf00      	nop
 8003a78:	0800562c 	.word	0x0800562c
 8003a7c:	20000000 	.word	0x20000000
 8003a80:	200005d8 	.word	0x200005d8
 8003a84:	20004a48 	.word	0x20004a48
 8003a88:	e000ed14 	.word	0xe000ed14
 8003a8c:	08005378 	.word	0x08005378
 8003a90:	08005378 	.word	0x08005378
 8003a94:	08005378 	.word	0x08005378
 8003a98:	08005378 	.word	0x08005378
 8003a9c:	08005378 	.word	0x08005378
 8003aa0:	08005378 	.word	0x08005378

08003aa4 <systick_set_reload>:
 * @param[in] value uint32_t. 24 bit reload value.
 */

void systick_set_reload(uint32_t value)
{
	STK_RVR = (value & STK_RVR_RELOAD);
 8003aa4:	4b02      	ldr	r3, [pc, #8]	; (8003ab0 <systick_set_reload+0xc>)
 8003aa6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8003aaa:	6018      	str	r0, [r3, #0]
 8003aac:	4770      	bx	lr
 8003aae:	bf00      	nop
 8003ab0:	e000e014 	.word	0xe000e014

08003ab4 <systick_set_clocksource>:
 * @param[in] clocksource uint8_t. Clock source from @ref systick_clksource.
 */

void systick_set_clocksource(uint8_t clocksource)
{
	STK_CSR = (STK_CSR & ~STK_CSR_CLKSOURCE) |
 8003ab4:	4a04      	ldr	r2, [pc, #16]	; (8003ac8 <systick_set_clocksource+0x14>)
 8003ab6:	6813      	ldr	r3, [r2, #0]
		  (clocksource & STK_CSR_CLKSOURCE);
 8003ab8:	f000 0004 	and.w	r0, r0, #4
	STK_CSR = (STK_CSR & ~STK_CSR_CLKSOURCE) |
 8003abc:	f023 0304 	bic.w	r3, r3, #4
 8003ac0:	4303      	orrs	r3, r0
 8003ac2:	6013      	str	r3, [r2, #0]
 8003ac4:	4770      	bx	lr
 8003ac6:	bf00      	nop
 8003ac8:	e000e010 	.word	0xe000e010

08003acc <systick_interrupt_enable>:
 *
 */

void systick_interrupt_enable(void)
{
	STK_CSR |= STK_CSR_TICKINT;
 8003acc:	4a02      	ldr	r2, [pc, #8]	; (8003ad8 <systick_interrupt_enable+0xc>)
 8003ace:	6813      	ldr	r3, [r2, #0]
 8003ad0:	f043 0302 	orr.w	r3, r3, #2
 8003ad4:	6013      	str	r3, [r2, #0]
 8003ad6:	4770      	bx	lr
 8003ad8:	e000e010 	.word	0xe000e010

08003adc <systick_interrupt_disable>:
 *
 */

void systick_interrupt_disable(void)
{
	STK_CSR &= ~STK_CSR_TICKINT;
 8003adc:	4a02      	ldr	r2, [pc, #8]	; (8003ae8 <systick_interrupt_disable+0xc>)
 8003ade:	6813      	ldr	r3, [r2, #0]
 8003ae0:	f023 0302 	bic.w	r3, r3, #2
 8003ae4:	6013      	str	r3, [r2, #0]
 8003ae6:	4770      	bx	lr
 8003ae8:	e000e010 	.word	0xe000e010

08003aec <systick_counter_enable>:
 *
 */

void systick_counter_enable(void)
{
	STK_CSR |= STK_CSR_ENABLE;
 8003aec:	4a02      	ldr	r2, [pc, #8]	; (8003af8 <systick_counter_enable+0xc>)
 8003aee:	6813      	ldr	r3, [r2, #0]
 8003af0:	f043 0301 	orr.w	r3, r3, #1
 8003af4:	6013      	str	r3, [r2, #0]
 8003af6:	4770      	bx	lr
 8003af8:	e000e010 	.word	0xe000e010

08003afc <systick_counter_disable>:
 *
 */

void systick_counter_disable(void)
{
	STK_CSR &= ~STK_CSR_ENABLE;
 8003afc:	4a02      	ldr	r2, [pc, #8]	; (8003b08 <systick_counter_disable+0xc>)
 8003afe:	6813      	ldr	r3, [r2, #0]
 8003b00:	f023 0301 	bic.w	r3, r3, #1
 8003b04:	6013      	str	r3, [r2, #0]
 8003b06:	4770      	bx	lr
 8003b08:	e000e010 	.word	0xe000e010

08003b0c <pwr_set_vos_scale>:

#include <libopencm3/stm32/pwr.h>

void pwr_set_vos_scale(enum pwr_vos_scale scale)
{
	if (scale == PWR_SCALE1) {
 8003b0c:	b928      	cbnz	r0, 8003b1a <pwr_set_vos_scale+0xe>
		PWR_CR |= PWR_CR_VOS;
 8003b0e:	4a06      	ldr	r2, [pc, #24]	; (8003b28 <pwr_set_vos_scale+0x1c>)
 8003b10:	6813      	ldr	r3, [r2, #0]
 8003b12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
	} else if (scale == PWR_SCALE2) {
		PWR_CR &= PWR_CR_VOS;
 8003b16:	6013      	str	r3, [r2, #0]
 8003b18:	4770      	bx	lr
	} else if (scale == PWR_SCALE2) {
 8003b1a:	2801      	cmp	r0, #1
 8003b1c:	d1fc      	bne.n	8003b18 <pwr_set_vos_scale+0xc>
		PWR_CR &= PWR_CR_VOS;
 8003b1e:	4a02      	ldr	r2, [pc, #8]	; (8003b28 <pwr_set_vos_scale+0x1c>)
 8003b20:	6813      	ldr	r3, [r2, #0]
 8003b22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b26:	e7f6      	b.n	8003b16 <pwr_set_vos_scale+0xa>
 8003b28:	40007000 	.word	0x40007000

08003b2c <__aeabi_uldivmod>:
 8003b2c:	b953      	cbnz	r3, 8003b44 <__aeabi_uldivmod+0x18>
 8003b2e:	b94a      	cbnz	r2, 8003b44 <__aeabi_uldivmod+0x18>
 8003b30:	2900      	cmp	r1, #0
 8003b32:	bf08      	it	eq
 8003b34:	2800      	cmpeq	r0, #0
 8003b36:	bf1c      	itt	ne
 8003b38:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8003b3c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8003b40:	f001 b8f8 	b.w	8004d34 <__aeabi_idiv0>
 8003b44:	f1ad 0c08 	sub.w	ip, sp, #8
 8003b48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8003b4c:	f000 f806 	bl	8003b5c <__udivmoddi4>
 8003b50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8003b54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003b58:	b004      	add	sp, #16
 8003b5a:	4770      	bx	lr

08003b5c <__udivmoddi4>:
 8003b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b60:	9e08      	ldr	r6, [sp, #32]
 8003b62:	4604      	mov	r4, r0
 8003b64:	4688      	mov	r8, r1
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d14b      	bne.n	8003c02 <__udivmoddi4+0xa6>
 8003b6a:	428a      	cmp	r2, r1
 8003b6c:	4615      	mov	r5, r2
 8003b6e:	d967      	bls.n	8003c40 <__udivmoddi4+0xe4>
 8003b70:	fab2 f282 	clz	r2, r2
 8003b74:	b14a      	cbz	r2, 8003b8a <__udivmoddi4+0x2e>
 8003b76:	f1c2 0720 	rsb	r7, r2, #32
 8003b7a:	fa01 f302 	lsl.w	r3, r1, r2
 8003b7e:	fa20 f707 	lsr.w	r7, r0, r7
 8003b82:	4095      	lsls	r5, r2
 8003b84:	ea47 0803 	orr.w	r8, r7, r3
 8003b88:	4094      	lsls	r4, r2
 8003b8a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8003b8e:	0c23      	lsrs	r3, r4, #16
 8003b90:	fbb8 f7fe 	udiv	r7, r8, lr
 8003b94:	fa1f fc85 	uxth.w	ip, r5
 8003b98:	fb0e 8817 	mls	r8, lr, r7, r8
 8003b9c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8003ba0:	fb07 f10c 	mul.w	r1, r7, ip
 8003ba4:	4299      	cmp	r1, r3
 8003ba6:	d909      	bls.n	8003bbc <__udivmoddi4+0x60>
 8003ba8:	18eb      	adds	r3, r5, r3
 8003baa:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8003bae:	f080 811b 	bcs.w	8003de8 <__udivmoddi4+0x28c>
 8003bb2:	4299      	cmp	r1, r3
 8003bb4:	f240 8118 	bls.w	8003de8 <__udivmoddi4+0x28c>
 8003bb8:	3f02      	subs	r7, #2
 8003bba:	442b      	add	r3, r5
 8003bbc:	1a5b      	subs	r3, r3, r1
 8003bbe:	b2a4      	uxth	r4, r4
 8003bc0:	fbb3 f0fe 	udiv	r0, r3, lr
 8003bc4:	fb0e 3310 	mls	r3, lr, r0, r3
 8003bc8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8003bcc:	fb00 fc0c 	mul.w	ip, r0, ip
 8003bd0:	45a4      	cmp	ip, r4
 8003bd2:	d909      	bls.n	8003be8 <__udivmoddi4+0x8c>
 8003bd4:	192c      	adds	r4, r5, r4
 8003bd6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003bda:	f080 8107 	bcs.w	8003dec <__udivmoddi4+0x290>
 8003bde:	45a4      	cmp	ip, r4
 8003be0:	f240 8104 	bls.w	8003dec <__udivmoddi4+0x290>
 8003be4:	3802      	subs	r0, #2
 8003be6:	442c      	add	r4, r5
 8003be8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8003bec:	eba4 040c 	sub.w	r4, r4, ip
 8003bf0:	2700      	movs	r7, #0
 8003bf2:	b11e      	cbz	r6, 8003bfc <__udivmoddi4+0xa0>
 8003bf4:	40d4      	lsrs	r4, r2
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	e9c6 4300 	strd	r4, r3, [r6]
 8003bfc:	4639      	mov	r1, r7
 8003bfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c02:	428b      	cmp	r3, r1
 8003c04:	d909      	bls.n	8003c1a <__udivmoddi4+0xbe>
 8003c06:	2e00      	cmp	r6, #0
 8003c08:	f000 80eb 	beq.w	8003de2 <__udivmoddi4+0x286>
 8003c0c:	2700      	movs	r7, #0
 8003c0e:	e9c6 0100 	strd	r0, r1, [r6]
 8003c12:	4638      	mov	r0, r7
 8003c14:	4639      	mov	r1, r7
 8003c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c1a:	fab3 f783 	clz	r7, r3
 8003c1e:	2f00      	cmp	r7, #0
 8003c20:	d147      	bne.n	8003cb2 <__udivmoddi4+0x156>
 8003c22:	428b      	cmp	r3, r1
 8003c24:	d302      	bcc.n	8003c2c <__udivmoddi4+0xd0>
 8003c26:	4282      	cmp	r2, r0
 8003c28:	f200 80fa 	bhi.w	8003e20 <__udivmoddi4+0x2c4>
 8003c2c:	1a84      	subs	r4, r0, r2
 8003c2e:	eb61 0303 	sbc.w	r3, r1, r3
 8003c32:	2001      	movs	r0, #1
 8003c34:	4698      	mov	r8, r3
 8003c36:	2e00      	cmp	r6, #0
 8003c38:	d0e0      	beq.n	8003bfc <__udivmoddi4+0xa0>
 8003c3a:	e9c6 4800 	strd	r4, r8, [r6]
 8003c3e:	e7dd      	b.n	8003bfc <__udivmoddi4+0xa0>
 8003c40:	b902      	cbnz	r2, 8003c44 <__udivmoddi4+0xe8>
 8003c42:	deff      	udf	#255	; 0xff
 8003c44:	fab2 f282 	clz	r2, r2
 8003c48:	2a00      	cmp	r2, #0
 8003c4a:	f040 808f 	bne.w	8003d6c <__udivmoddi4+0x210>
 8003c4e:	1b49      	subs	r1, r1, r5
 8003c50:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8003c54:	fa1f f885 	uxth.w	r8, r5
 8003c58:	2701      	movs	r7, #1
 8003c5a:	fbb1 fcfe 	udiv	ip, r1, lr
 8003c5e:	0c23      	lsrs	r3, r4, #16
 8003c60:	fb0e 111c 	mls	r1, lr, ip, r1
 8003c64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8003c68:	fb08 f10c 	mul.w	r1, r8, ip
 8003c6c:	4299      	cmp	r1, r3
 8003c6e:	d907      	bls.n	8003c80 <__udivmoddi4+0x124>
 8003c70:	18eb      	adds	r3, r5, r3
 8003c72:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8003c76:	d202      	bcs.n	8003c7e <__udivmoddi4+0x122>
 8003c78:	4299      	cmp	r1, r3
 8003c7a:	f200 80cd 	bhi.w	8003e18 <__udivmoddi4+0x2bc>
 8003c7e:	4684      	mov	ip, r0
 8003c80:	1a59      	subs	r1, r3, r1
 8003c82:	b2a3      	uxth	r3, r4
 8003c84:	fbb1 f0fe 	udiv	r0, r1, lr
 8003c88:	fb0e 1410 	mls	r4, lr, r0, r1
 8003c8c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8003c90:	fb08 f800 	mul.w	r8, r8, r0
 8003c94:	45a0      	cmp	r8, r4
 8003c96:	d907      	bls.n	8003ca8 <__udivmoddi4+0x14c>
 8003c98:	192c      	adds	r4, r5, r4
 8003c9a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003c9e:	d202      	bcs.n	8003ca6 <__udivmoddi4+0x14a>
 8003ca0:	45a0      	cmp	r8, r4
 8003ca2:	f200 80b6 	bhi.w	8003e12 <__udivmoddi4+0x2b6>
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	eba4 0408 	sub.w	r4, r4, r8
 8003cac:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8003cb0:	e79f      	b.n	8003bf2 <__udivmoddi4+0x96>
 8003cb2:	f1c7 0c20 	rsb	ip, r7, #32
 8003cb6:	40bb      	lsls	r3, r7
 8003cb8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8003cbc:	ea4e 0e03 	orr.w	lr, lr, r3
 8003cc0:	fa01 f407 	lsl.w	r4, r1, r7
 8003cc4:	fa20 f50c 	lsr.w	r5, r0, ip
 8003cc8:	fa21 f30c 	lsr.w	r3, r1, ip
 8003ccc:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8003cd0:	4325      	orrs	r5, r4
 8003cd2:	fbb3 f9f8 	udiv	r9, r3, r8
 8003cd6:	0c2c      	lsrs	r4, r5, #16
 8003cd8:	fb08 3319 	mls	r3, r8, r9, r3
 8003cdc:	fa1f fa8e 	uxth.w	sl, lr
 8003ce0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8003ce4:	fb09 f40a 	mul.w	r4, r9, sl
 8003ce8:	429c      	cmp	r4, r3
 8003cea:	fa02 f207 	lsl.w	r2, r2, r7
 8003cee:	fa00 f107 	lsl.w	r1, r0, r7
 8003cf2:	d90b      	bls.n	8003d0c <__udivmoddi4+0x1b0>
 8003cf4:	eb1e 0303 	adds.w	r3, lr, r3
 8003cf8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8003cfc:	f080 8087 	bcs.w	8003e0e <__udivmoddi4+0x2b2>
 8003d00:	429c      	cmp	r4, r3
 8003d02:	f240 8084 	bls.w	8003e0e <__udivmoddi4+0x2b2>
 8003d06:	f1a9 0902 	sub.w	r9, r9, #2
 8003d0a:	4473      	add	r3, lr
 8003d0c:	1b1b      	subs	r3, r3, r4
 8003d0e:	b2ad      	uxth	r5, r5
 8003d10:	fbb3 f0f8 	udiv	r0, r3, r8
 8003d14:	fb08 3310 	mls	r3, r8, r0, r3
 8003d18:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8003d1c:	fb00 fa0a 	mul.w	sl, r0, sl
 8003d20:	45a2      	cmp	sl, r4
 8003d22:	d908      	bls.n	8003d36 <__udivmoddi4+0x1da>
 8003d24:	eb1e 0404 	adds.w	r4, lr, r4
 8003d28:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003d2c:	d26b      	bcs.n	8003e06 <__udivmoddi4+0x2aa>
 8003d2e:	45a2      	cmp	sl, r4
 8003d30:	d969      	bls.n	8003e06 <__udivmoddi4+0x2aa>
 8003d32:	3802      	subs	r0, #2
 8003d34:	4474      	add	r4, lr
 8003d36:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8003d3a:	fba0 8902 	umull	r8, r9, r0, r2
 8003d3e:	eba4 040a 	sub.w	r4, r4, sl
 8003d42:	454c      	cmp	r4, r9
 8003d44:	46c2      	mov	sl, r8
 8003d46:	464b      	mov	r3, r9
 8003d48:	d354      	bcc.n	8003df4 <__udivmoddi4+0x298>
 8003d4a:	d051      	beq.n	8003df0 <__udivmoddi4+0x294>
 8003d4c:	2e00      	cmp	r6, #0
 8003d4e:	d069      	beq.n	8003e24 <__udivmoddi4+0x2c8>
 8003d50:	ebb1 050a 	subs.w	r5, r1, sl
 8003d54:	eb64 0403 	sbc.w	r4, r4, r3
 8003d58:	fa04 fc0c 	lsl.w	ip, r4, ip
 8003d5c:	40fd      	lsrs	r5, r7
 8003d5e:	40fc      	lsrs	r4, r7
 8003d60:	ea4c 0505 	orr.w	r5, ip, r5
 8003d64:	e9c6 5400 	strd	r5, r4, [r6]
 8003d68:	2700      	movs	r7, #0
 8003d6a:	e747      	b.n	8003bfc <__udivmoddi4+0xa0>
 8003d6c:	f1c2 0320 	rsb	r3, r2, #32
 8003d70:	fa20 f703 	lsr.w	r7, r0, r3
 8003d74:	4095      	lsls	r5, r2
 8003d76:	fa01 f002 	lsl.w	r0, r1, r2
 8003d7a:	fa21 f303 	lsr.w	r3, r1, r3
 8003d7e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8003d82:	4338      	orrs	r0, r7
 8003d84:	0c01      	lsrs	r1, r0, #16
 8003d86:	fbb3 f7fe 	udiv	r7, r3, lr
 8003d8a:	fa1f f885 	uxth.w	r8, r5
 8003d8e:	fb0e 3317 	mls	r3, lr, r7, r3
 8003d92:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8003d96:	fb07 f308 	mul.w	r3, r7, r8
 8003d9a:	428b      	cmp	r3, r1
 8003d9c:	fa04 f402 	lsl.w	r4, r4, r2
 8003da0:	d907      	bls.n	8003db2 <__udivmoddi4+0x256>
 8003da2:	1869      	adds	r1, r5, r1
 8003da4:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8003da8:	d22f      	bcs.n	8003e0a <__udivmoddi4+0x2ae>
 8003daa:	428b      	cmp	r3, r1
 8003dac:	d92d      	bls.n	8003e0a <__udivmoddi4+0x2ae>
 8003dae:	3f02      	subs	r7, #2
 8003db0:	4429      	add	r1, r5
 8003db2:	1acb      	subs	r3, r1, r3
 8003db4:	b281      	uxth	r1, r0
 8003db6:	fbb3 f0fe 	udiv	r0, r3, lr
 8003dba:	fb0e 3310 	mls	r3, lr, r0, r3
 8003dbe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8003dc2:	fb00 f308 	mul.w	r3, r0, r8
 8003dc6:	428b      	cmp	r3, r1
 8003dc8:	d907      	bls.n	8003dda <__udivmoddi4+0x27e>
 8003dca:	1869      	adds	r1, r5, r1
 8003dcc:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8003dd0:	d217      	bcs.n	8003e02 <__udivmoddi4+0x2a6>
 8003dd2:	428b      	cmp	r3, r1
 8003dd4:	d915      	bls.n	8003e02 <__udivmoddi4+0x2a6>
 8003dd6:	3802      	subs	r0, #2
 8003dd8:	4429      	add	r1, r5
 8003dda:	1ac9      	subs	r1, r1, r3
 8003ddc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8003de0:	e73b      	b.n	8003c5a <__udivmoddi4+0xfe>
 8003de2:	4637      	mov	r7, r6
 8003de4:	4630      	mov	r0, r6
 8003de6:	e709      	b.n	8003bfc <__udivmoddi4+0xa0>
 8003de8:	4607      	mov	r7, r0
 8003dea:	e6e7      	b.n	8003bbc <__udivmoddi4+0x60>
 8003dec:	4618      	mov	r0, r3
 8003dee:	e6fb      	b.n	8003be8 <__udivmoddi4+0x8c>
 8003df0:	4541      	cmp	r1, r8
 8003df2:	d2ab      	bcs.n	8003d4c <__udivmoddi4+0x1f0>
 8003df4:	ebb8 0a02 	subs.w	sl, r8, r2
 8003df8:	eb69 020e 	sbc.w	r2, r9, lr
 8003dfc:	3801      	subs	r0, #1
 8003dfe:	4613      	mov	r3, r2
 8003e00:	e7a4      	b.n	8003d4c <__udivmoddi4+0x1f0>
 8003e02:	4660      	mov	r0, ip
 8003e04:	e7e9      	b.n	8003dda <__udivmoddi4+0x27e>
 8003e06:	4618      	mov	r0, r3
 8003e08:	e795      	b.n	8003d36 <__udivmoddi4+0x1da>
 8003e0a:	4667      	mov	r7, ip
 8003e0c:	e7d1      	b.n	8003db2 <__udivmoddi4+0x256>
 8003e0e:	4681      	mov	r9, r0
 8003e10:	e77c      	b.n	8003d0c <__udivmoddi4+0x1b0>
 8003e12:	3802      	subs	r0, #2
 8003e14:	442c      	add	r4, r5
 8003e16:	e747      	b.n	8003ca8 <__udivmoddi4+0x14c>
 8003e18:	f1ac 0c02 	sub.w	ip, ip, #2
 8003e1c:	442b      	add	r3, r5
 8003e1e:	e72f      	b.n	8003c80 <__udivmoddi4+0x124>
 8003e20:	4638      	mov	r0, r7
 8003e22:	e708      	b.n	8003c36 <__udivmoddi4+0xda>
 8003e24:	4637      	mov	r7, r6
 8003e26:	e6e9      	b.n	8003bfc <__udivmoddi4+0xa0>

08003e28 <selfrel_offset31>:
 8003e28:	6803      	ldr	r3, [r0, #0]
 8003e2a:	005a      	lsls	r2, r3, #1
 8003e2c:	bf4c      	ite	mi
 8003e2e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8003e32:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 8003e36:	4418      	add	r0, r3
 8003e38:	4770      	bx	lr
 8003e3a:	bf00      	nop

08003e3c <search_EIT_table>:
 8003e3c:	b361      	cbz	r1, 8003e98 <search_EIT_table+0x5c>
 8003e3e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e42:	f101 3aff 	add.w	sl, r1, #4294967295	; 0xffffffff
 8003e46:	4690      	mov	r8, r2
 8003e48:	4606      	mov	r6, r0
 8003e4a:	46d1      	mov	r9, sl
 8003e4c:	2700      	movs	r7, #0
 8003e4e:	eb07 0409 	add.w	r4, r7, r9
 8003e52:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 8003e56:	1064      	asrs	r4, r4, #1
 8003e58:	00e5      	lsls	r5, r4, #3
 8003e5a:	1971      	adds	r1, r6, r5
 8003e5c:	4608      	mov	r0, r1
 8003e5e:	f7ff ffe3 	bl	8003e28 <selfrel_offset31>
 8003e62:	45a2      	cmp	sl, r4
 8003e64:	4683      	mov	fp, r0
 8003e66:	f105 0008 	add.w	r0, r5, #8
 8003e6a:	4430      	add	r0, r6
 8003e6c:	d009      	beq.n	8003e82 <search_EIT_table+0x46>
 8003e6e:	f7ff ffdb 	bl	8003e28 <selfrel_offset31>
 8003e72:	45c3      	cmp	fp, r8
 8003e74:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 8003e78:	d805      	bhi.n	8003e86 <search_EIT_table+0x4a>
 8003e7a:	4540      	cmp	r0, r8
 8003e7c:	d209      	bcs.n	8003e92 <search_EIT_table+0x56>
 8003e7e:	1c67      	adds	r7, r4, #1
 8003e80:	e7e5      	b.n	8003e4e <search_EIT_table+0x12>
 8003e82:	45c3      	cmp	fp, r8
 8003e84:	d905      	bls.n	8003e92 <search_EIT_table+0x56>
 8003e86:	42a7      	cmp	r7, r4
 8003e88:	d002      	beq.n	8003e90 <search_EIT_table+0x54>
 8003e8a:	f104 39ff 	add.w	r9, r4, #4294967295	; 0xffffffff
 8003e8e:	e7de      	b.n	8003e4e <search_EIT_table+0x12>
 8003e90:	2100      	movs	r1, #0
 8003e92:	4608      	mov	r0, r1
 8003e94:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e98:	4608      	mov	r0, r1
 8003e9a:	4770      	bx	lr

08003e9c <__gnu_unwind_get_pr_addr>:
 8003e9c:	2801      	cmp	r0, #1
 8003e9e:	d007      	beq.n	8003eb0 <__gnu_unwind_get_pr_addr+0x14>
 8003ea0:	2802      	cmp	r0, #2
 8003ea2:	d007      	beq.n	8003eb4 <__gnu_unwind_get_pr_addr+0x18>
 8003ea4:	4b04      	ldr	r3, [pc, #16]	; (8003eb8 <__gnu_unwind_get_pr_addr+0x1c>)
 8003ea6:	2800      	cmp	r0, #0
 8003ea8:	bf0c      	ite	eq
 8003eaa:	4618      	moveq	r0, r3
 8003eac:	2000      	movne	r0, #0
 8003eae:	4770      	bx	lr
 8003eb0:	4802      	ldr	r0, [pc, #8]	; (8003ebc <__gnu_unwind_get_pr_addr+0x20>)
 8003eb2:	4770      	bx	lr
 8003eb4:	4802      	ldr	r0, [pc, #8]	; (8003ec0 <__gnu_unwind_get_pr_addr+0x24>)
 8003eb6:	4770      	bx	lr
 8003eb8:	08004589 	.word	0x08004589
 8003ebc:	0800458d 	.word	0x0800458d
 8003ec0:	08004591 	.word	0x08004591

08003ec4 <get_eit_entry>:
 8003ec4:	b530      	push	{r4, r5, lr}
 8003ec6:	4b25      	ldr	r3, [pc, #148]	; (8003f5c <get_eit_entry+0x98>)
 8003ec8:	b083      	sub	sp, #12
 8003eca:	4604      	mov	r4, r0
 8003ecc:	1e8d      	subs	r5, r1, #2
 8003ece:	b34b      	cbz	r3, 8003f24 <get_eit_entry+0x60>
 8003ed0:	a901      	add	r1, sp, #4
 8003ed2:	4628      	mov	r0, r5
 8003ed4:	f3af 8000 	nop.w
 8003ed8:	b1f0      	cbz	r0, 8003f18 <get_eit_entry+0x54>
 8003eda:	9901      	ldr	r1, [sp, #4]
 8003edc:	462a      	mov	r2, r5
 8003ede:	f7ff ffad 	bl	8003e3c <search_EIT_table>
 8003ee2:	4601      	mov	r1, r0
 8003ee4:	b1c0      	cbz	r0, 8003f18 <get_eit_entry+0x54>
 8003ee6:	f7ff ff9f 	bl	8003e28 <selfrel_offset31>
 8003eea:	684b      	ldr	r3, [r1, #4]
 8003eec:	64a0      	str	r0, [r4, #72]	; 0x48
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d02e      	beq.n	8003f50 <get_eit_entry+0x8c>
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	f101 0004 	add.w	r0, r1, #4
 8003ef8:	db26      	blt.n	8003f48 <get_eit_entry+0x84>
 8003efa:	f7ff ff95 	bl	8003e28 <selfrel_offset31>
 8003efe:	2300      	movs	r3, #0
 8003f00:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 8003f04:	6803      	ldr	r3, [r0, #0]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	db12      	blt.n	8003f30 <get_eit_entry+0x6c>
 8003f0a:	f7ff ff8d 	bl	8003e28 <selfrel_offset31>
 8003f0e:	2300      	movs	r3, #0
 8003f10:	6120      	str	r0, [r4, #16]
 8003f12:	4618      	mov	r0, r3
 8003f14:	b003      	add	sp, #12
 8003f16:	bd30      	pop	{r4, r5, pc}
 8003f18:	2300      	movs	r3, #0
 8003f1a:	6123      	str	r3, [r4, #16]
 8003f1c:	2309      	movs	r3, #9
 8003f1e:	4618      	mov	r0, r3
 8003f20:	b003      	add	sp, #12
 8003f22:	bd30      	pop	{r4, r5, pc}
 8003f24:	490e      	ldr	r1, [pc, #56]	; (8003f60 <get_eit_entry+0x9c>)
 8003f26:	480f      	ldr	r0, [pc, #60]	; (8003f64 <get_eit_entry+0xa0>)
 8003f28:	1a09      	subs	r1, r1, r0
 8003f2a:	10c9      	asrs	r1, r1, #3
 8003f2c:	9101      	str	r1, [sp, #4]
 8003f2e:	e7d5      	b.n	8003edc <get_eit_entry+0x18>
 8003f30:	f3c3 6003 	ubfx	r0, r3, #24, #4
 8003f34:	f7ff ffb2 	bl	8003e9c <__gnu_unwind_get_pr_addr>
 8003f38:	2800      	cmp	r0, #0
 8003f3a:	bf14      	ite	ne
 8003f3c:	2300      	movne	r3, #0
 8003f3e:	2309      	moveq	r3, #9
 8003f40:	6120      	str	r0, [r4, #16]
 8003f42:	4618      	mov	r0, r3
 8003f44:	b003      	add	sp, #12
 8003f46:	bd30      	pop	{r4, r5, pc}
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 8003f4e:	e7d9      	b.n	8003f04 <get_eit_entry+0x40>
 8003f50:	2300      	movs	r3, #0
 8003f52:	6123      	str	r3, [r4, #16]
 8003f54:	2305      	movs	r3, #5
 8003f56:	4618      	mov	r0, r3
 8003f58:	b003      	add	sp, #12
 8003f5a:	bd30      	pop	{r4, r5, pc}
 8003f5c:	00000000 	.word	0x00000000
 8003f60:	0800562c 	.word	0x0800562c
 8003f64:	08005414 	.word	0x08005414

08003f68 <restore_non_core_regs>:
 8003f68:	6803      	ldr	r3, [r0, #0]
 8003f6a:	07da      	lsls	r2, r3, #31
 8003f6c:	b510      	push	{r4, lr}
 8003f6e:	4604      	mov	r4, r0
 8003f70:	d406      	bmi.n	8003f80 <restore_non_core_regs+0x18>
 8003f72:	079b      	lsls	r3, r3, #30
 8003f74:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8003f78:	d509      	bpl.n	8003f8e <restore_non_core_regs+0x26>
 8003f7a:	f000 fc5f 	bl	800483c <__gnu_Unwind_Restore_VFP_D>
 8003f7e:	6823      	ldr	r3, [r4, #0]
 8003f80:	0759      	lsls	r1, r3, #29
 8003f82:	d509      	bpl.n	8003f98 <restore_non_core_regs+0x30>
 8003f84:	071a      	lsls	r2, r3, #28
 8003f86:	d50e      	bpl.n	8003fa6 <restore_non_core_regs+0x3e>
 8003f88:	06db      	lsls	r3, r3, #27
 8003f8a:	d513      	bpl.n	8003fb4 <restore_non_core_regs+0x4c>
 8003f8c:	bd10      	pop	{r4, pc}
 8003f8e:	f000 fc4d 	bl	800482c <__gnu_Unwind_Restore_VFP>
 8003f92:	6823      	ldr	r3, [r4, #0]
 8003f94:	0759      	lsls	r1, r3, #29
 8003f96:	d4f5      	bmi.n	8003f84 <restore_non_core_regs+0x1c>
 8003f98:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003f9c:	f000 fc56 	bl	800484c <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8003fa0:	6823      	ldr	r3, [r4, #0]
 8003fa2:	071a      	lsls	r2, r3, #28
 8003fa4:	d4f0      	bmi.n	8003f88 <restore_non_core_regs+0x20>
 8003fa6:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8003faa:	f000 fc57 	bl	800485c <__gnu_Unwind_Restore_WMMXD>
 8003fae:	6823      	ldr	r3, [r4, #0]
 8003fb0:	06db      	lsls	r3, r3, #27
 8003fb2:	d4eb      	bmi.n	8003f8c <restore_non_core_regs+0x24>
 8003fb4:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8003fb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003fbc:	f000 bc92 	b.w	80048e4 <__gnu_Unwind_Restore_WMMXC>

08003fc0 <_Unwind_decode_typeinfo_ptr.isra.0>:
 8003fc0:	6803      	ldr	r3, [r0, #0]
 8003fc2:	b103      	cbz	r3, 8003fc6 <_Unwind_decode_typeinfo_ptr.isra.0+0x6>
 8003fc4:	4403      	add	r3, r0
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	4770      	bx	lr
 8003fca:	bf00      	nop

08003fcc <__gnu_unwind_24bit.isra.1>:
 8003fcc:	2009      	movs	r0, #9
 8003fce:	4770      	bx	lr

08003fd0 <_Unwind_DebugHook>:
 8003fd0:	4770      	bx	lr
 8003fd2:	bf00      	nop

08003fd4 <unwind_phase2>:
 8003fd4:	b570      	push	{r4, r5, r6, lr}
 8003fd6:	4604      	mov	r4, r0
 8003fd8:	460d      	mov	r5, r1
 8003fda:	e008      	b.n	8003fee <unwind_phase2+0x1a>
 8003fdc:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8003fde:	6163      	str	r3, [r4, #20]
 8003fe0:	462a      	mov	r2, r5
 8003fe2:	6923      	ldr	r3, [r4, #16]
 8003fe4:	4621      	mov	r1, r4
 8003fe6:	2001      	movs	r0, #1
 8003fe8:	4798      	blx	r3
 8003fea:	2808      	cmp	r0, #8
 8003fec:	d108      	bne.n	8004000 <unwind_phase2+0x2c>
 8003fee:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8003ff0:	4620      	mov	r0, r4
 8003ff2:	f7ff ff67 	bl	8003ec4 <get_eit_entry>
 8003ff6:	4606      	mov	r6, r0
 8003ff8:	2800      	cmp	r0, #0
 8003ffa:	d0ef      	beq.n	8003fdc <unwind_phase2+0x8>
 8003ffc:	f000 fe9c 	bl	8004d38 <abort>
 8004000:	2807      	cmp	r0, #7
 8004002:	d1fb      	bne.n	8003ffc <unwind_phase2+0x28>
 8004004:	4630      	mov	r0, r6
 8004006:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8004008:	f7ff ffe2 	bl	8003fd0 <_Unwind_DebugHook>
 800400c:	1d28      	adds	r0, r5, #4
 800400e:	f000 fc01 	bl	8004814 <__restore_core_regs>
 8004012:	bf00      	nop

08004014 <unwind_phase2_forced>:
 8004014:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004018:	1d0c      	adds	r4, r1, #4
 800401a:	4605      	mov	r5, r0
 800401c:	4617      	mov	r7, r2
 800401e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004020:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 8004024:	ae03      	add	r6, sp, #12
 8004026:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8004028:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800402a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800402c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800402e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8004030:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004034:	ac02      	add	r4, sp, #8
 8004036:	f8d5 800c 	ldr.w	r8, [r5, #12]
 800403a:	f8d5 9018 	ldr.w	r9, [r5, #24]
 800403e:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8004042:	2300      	movs	r3, #0
 8004044:	6023      	str	r3, [r4, #0]
 8004046:	e021      	b.n	800408c <unwind_phase2_forced+0x78>
 8004048:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800404a:	616b      	str	r3, [r5, #20]
 800404c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004050:	4621      	mov	r1, r4
 8004052:	a87a      	add	r0, sp, #488	; 0x1e8
 8004054:	f000 fe86 	bl	8004d64 <memcpy>
 8004058:	692b      	ldr	r3, [r5, #16]
 800405a:	aa7a      	add	r2, sp, #488	; 0x1e8
 800405c:	4629      	mov	r1, r5
 800405e:	4630      	mov	r0, r6
 8004060:	4798      	blx	r3
 8004062:	9b88      	ldr	r3, [sp, #544]	; 0x220
 8004064:	e9cd 4900 	strd	r4, r9, [sp]
 8004068:	4682      	mov	sl, r0
 800406a:	6463      	str	r3, [r4, #68]	; 0x44
 800406c:	4631      	mov	r1, r6
 800406e:	462b      	mov	r3, r5
 8004070:	462a      	mov	r2, r5
 8004072:	2001      	movs	r0, #1
 8004074:	47c0      	blx	r8
 8004076:	4607      	mov	r7, r0
 8004078:	b9f8      	cbnz	r0, 80040ba <unwind_phase2_forced+0xa6>
 800407a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800407e:	a97a      	add	r1, sp, #488	; 0x1e8
 8004080:	4620      	mov	r0, r4
 8004082:	f000 fe6f 	bl	8004d64 <memcpy>
 8004086:	f1ba 0f08 	cmp.w	sl, #8
 800408a:	d11c      	bne.n	80040c6 <unwind_phase2_forced+0xb2>
 800408c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800408e:	4628      	mov	r0, r5
 8004090:	f7ff ff18 	bl	8003ec4 <get_eit_entry>
 8004094:	2f00      	cmp	r7, #0
 8004096:	bf08      	it	eq
 8004098:	2609      	moveq	r6, #9
 800409a:	4607      	mov	r7, r0
 800409c:	bf18      	it	ne
 800409e:	260a      	movne	r6, #10
 80040a0:	2800      	cmp	r0, #0
 80040a2:	d0d1      	beq.n	8004048 <unwind_phase2_forced+0x34>
 80040a4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80040a6:	f046 0110 	orr.w	r1, r6, #16
 80040aa:	e9cd 4900 	strd	r4, r9, [sp]
 80040ae:	462a      	mov	r2, r5
 80040b0:	6463      	str	r3, [r4, #68]	; 0x44
 80040b2:	2001      	movs	r0, #1
 80040b4:	462b      	mov	r3, r5
 80040b6:	47c0      	blx	r8
 80040b8:	b100      	cbz	r0, 80040bc <unwind_phase2_forced+0xa8>
 80040ba:	2709      	movs	r7, #9
 80040bc:	4638      	mov	r0, r7
 80040be:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 80040c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040c6:	f1ba 0f07 	cmp.w	sl, #7
 80040ca:	d1f6      	bne.n	80040ba <unwind_phase2_forced+0xa6>
 80040cc:	4638      	mov	r0, r7
 80040ce:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80040d0:	f7ff ff7e 	bl	8003fd0 <_Unwind_DebugHook>
 80040d4:	a803      	add	r0, sp, #12
 80040d6:	f000 fb9d 	bl	8004814 <__restore_core_regs>
 80040da:	bf00      	nop

080040dc <_Unwind_GetCFA>:
 80040dc:	6c40      	ldr	r0, [r0, #68]	; 0x44
 80040de:	4770      	bx	lr

080040e0 <__gnu_Unwind_RaiseException>:
 80040e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040e2:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 80040e4:	640b      	str	r3, [r1, #64]	; 0x40
 80040e6:	1d0d      	adds	r5, r1, #4
 80040e8:	460f      	mov	r7, r1
 80040ea:	4606      	mov	r6, r0
 80040ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80040ee:	b0f9      	sub	sp, #484	; 0x1e4
 80040f0:	ac01      	add	r4, sp, #4
 80040f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80040f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80040f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80040f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80040fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80040fc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004100:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004104:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8004108:	9500      	str	r5, [sp, #0]
 800410a:	e006      	b.n	800411a <__gnu_Unwind_RaiseException+0x3a>
 800410c:	6933      	ldr	r3, [r6, #16]
 800410e:	466a      	mov	r2, sp
 8004110:	4631      	mov	r1, r6
 8004112:	4798      	blx	r3
 8004114:	2808      	cmp	r0, #8
 8004116:	4604      	mov	r4, r0
 8004118:	d108      	bne.n	800412c <__gnu_Unwind_RaiseException+0x4c>
 800411a:	9910      	ldr	r1, [sp, #64]	; 0x40
 800411c:	4630      	mov	r0, r6
 800411e:	f7ff fed1 	bl	8003ec4 <get_eit_entry>
 8004122:	2800      	cmp	r0, #0
 8004124:	d0f2      	beq.n	800410c <__gnu_Unwind_RaiseException+0x2c>
 8004126:	2009      	movs	r0, #9
 8004128:	b079      	add	sp, #484	; 0x1e4
 800412a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800412c:	4668      	mov	r0, sp
 800412e:	f7ff ff1b 	bl	8003f68 <restore_non_core_regs>
 8004132:	2c06      	cmp	r4, #6
 8004134:	d1f7      	bne.n	8004126 <__gnu_Unwind_RaiseException+0x46>
 8004136:	4639      	mov	r1, r7
 8004138:	4630      	mov	r0, r6
 800413a:	f7ff ff4b 	bl	8003fd4 <unwind_phase2>
 800413e:	bf00      	nop

08004140 <__gnu_Unwind_ForcedUnwind>:
 8004140:	b430      	push	{r4, r5}
 8004142:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8004144:	60c1      	str	r1, [r0, #12]
 8004146:	6182      	str	r2, [r0, #24]
 8004148:	4619      	mov	r1, r3
 800414a:	641d      	str	r5, [r3, #64]	; 0x40
 800414c:	2200      	movs	r2, #0
 800414e:	bc30      	pop	{r4, r5}
 8004150:	e760      	b.n	8004014 <unwind_phase2_forced>
 8004152:	bf00      	nop

08004154 <__gnu_Unwind_Resume>:
 8004154:	b570      	push	{r4, r5, r6, lr}
 8004156:	68c6      	ldr	r6, [r0, #12]
 8004158:	6943      	ldr	r3, [r0, #20]
 800415a:	640b      	str	r3, [r1, #64]	; 0x40
 800415c:	b9be      	cbnz	r6, 800418e <__gnu_Unwind_Resume+0x3a>
 800415e:	6903      	ldr	r3, [r0, #16]
 8004160:	460a      	mov	r2, r1
 8004162:	4604      	mov	r4, r0
 8004164:	460d      	mov	r5, r1
 8004166:	4601      	mov	r1, r0
 8004168:	2002      	movs	r0, #2
 800416a:	4798      	blx	r3
 800416c:	2807      	cmp	r0, #7
 800416e:	d007      	beq.n	8004180 <__gnu_Unwind_Resume+0x2c>
 8004170:	2808      	cmp	r0, #8
 8004172:	d103      	bne.n	800417c <__gnu_Unwind_Resume+0x28>
 8004174:	4629      	mov	r1, r5
 8004176:	4620      	mov	r0, r4
 8004178:	f7ff ff2c 	bl	8003fd4 <unwind_phase2>
 800417c:	f000 fddc 	bl	8004d38 <abort>
 8004180:	4630      	mov	r0, r6
 8004182:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8004184:	f7ff ff24 	bl	8003fd0 <_Unwind_DebugHook>
 8004188:	1d28      	adds	r0, r5, #4
 800418a:	f000 fb43 	bl	8004814 <__restore_core_regs>
 800418e:	2201      	movs	r2, #1
 8004190:	f7ff ff40 	bl	8004014 <unwind_phase2_forced>
 8004194:	f000 fdd0 	bl	8004d38 <abort>

08004198 <__gnu_Unwind_Resume_or_Rethrow>:
 8004198:	68c2      	ldr	r2, [r0, #12]
 800419a:	b11a      	cbz	r2, 80041a4 <__gnu_Unwind_Resume_or_Rethrow+0xc>
 800419c:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 800419e:	640a      	str	r2, [r1, #64]	; 0x40
 80041a0:	2200      	movs	r2, #0
 80041a2:	e737      	b.n	8004014 <unwind_phase2_forced>
 80041a4:	e79c      	b.n	80040e0 <__gnu_Unwind_RaiseException>
 80041a6:	bf00      	nop

080041a8 <_Unwind_Complete>:
 80041a8:	4770      	bx	lr
 80041aa:	bf00      	nop

080041ac <_Unwind_DeleteException>:
 80041ac:	6883      	ldr	r3, [r0, #8]
 80041ae:	b113      	cbz	r3, 80041b6 <_Unwind_DeleteException+0xa>
 80041b0:	4601      	mov	r1, r0
 80041b2:	2001      	movs	r0, #1
 80041b4:	4718      	bx	r3
 80041b6:	4770      	bx	lr

080041b8 <_Unwind_VRS_Get>:
 80041b8:	2904      	cmp	r1, #4
 80041ba:	d807      	bhi.n	80041cc <_Unwind_VRS_Get+0x14>
 80041bc:	e8df f001 	tbb	[pc, r1]
 80041c0:	08060803 	.word	0x08060803
 80041c4:	08          	.byte	0x08
 80041c5:	00          	.byte	0x00
 80041c6:	b90b      	cbnz	r3, 80041cc <_Unwind_VRS_Get+0x14>
 80041c8:	2a0f      	cmp	r2, #15
 80041ca:	d903      	bls.n	80041d4 <_Unwind_VRS_Get+0x1c>
 80041cc:	2002      	movs	r0, #2
 80041ce:	4770      	bx	lr
 80041d0:	2001      	movs	r0, #1
 80041d2:	4770      	bx	lr
 80041d4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80041d8:	4618      	mov	r0, r3
 80041da:	6853      	ldr	r3, [r2, #4]
 80041dc:	9a00      	ldr	r2, [sp, #0]
 80041de:	6013      	str	r3, [r2, #0]
 80041e0:	4770      	bx	lr
 80041e2:	bf00      	nop

080041e4 <_Unwind_GetGR>:
 80041e4:	b510      	push	{r4, lr}
 80041e6:	b084      	sub	sp, #16
 80041e8:	2300      	movs	r3, #0
 80041ea:	ac03      	add	r4, sp, #12
 80041ec:	460a      	mov	r2, r1
 80041ee:	9400      	str	r4, [sp, #0]
 80041f0:	4619      	mov	r1, r3
 80041f2:	f7ff ffe1 	bl	80041b8 <_Unwind_VRS_Get>
 80041f6:	9803      	ldr	r0, [sp, #12]
 80041f8:	b004      	add	sp, #16
 80041fa:	bd10      	pop	{r4, pc}

080041fc <_Unwind_VRS_Set>:
 80041fc:	2904      	cmp	r1, #4
 80041fe:	d807      	bhi.n	8004210 <_Unwind_VRS_Set+0x14>
 8004200:	e8df f001 	tbb	[pc, r1]
 8004204:	08060803 	.word	0x08060803
 8004208:	08          	.byte	0x08
 8004209:	00          	.byte	0x00
 800420a:	b90b      	cbnz	r3, 8004210 <_Unwind_VRS_Set+0x14>
 800420c:	2a0f      	cmp	r2, #15
 800420e:	d903      	bls.n	8004218 <_Unwind_VRS_Set+0x1c>
 8004210:	2002      	movs	r0, #2
 8004212:	4770      	bx	lr
 8004214:	2001      	movs	r0, #1
 8004216:	4770      	bx	lr
 8004218:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800421c:	9a00      	ldr	r2, [sp, #0]
 800421e:	6812      	ldr	r2, [r2, #0]
 8004220:	6042      	str	r2, [r0, #4]
 8004222:	4618      	mov	r0, r3
 8004224:	4770      	bx	lr
 8004226:	bf00      	nop

08004228 <_Unwind_SetGR>:
 8004228:	b510      	push	{r4, lr}
 800422a:	b084      	sub	sp, #16
 800422c:	ac04      	add	r4, sp, #16
 800422e:	2300      	movs	r3, #0
 8004230:	f844 2d04 	str.w	r2, [r4, #-4]!
 8004234:	460a      	mov	r2, r1
 8004236:	9400      	str	r4, [sp, #0]
 8004238:	4619      	mov	r1, r3
 800423a:	f7ff ffdf 	bl	80041fc <_Unwind_VRS_Set>
 800423e:	b004      	add	sp, #16
 8004240:	bd10      	pop	{r4, pc}
 8004242:	bf00      	nop

08004244 <__gnu_Unwind_Backtrace>:
 8004244:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004246:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8004248:	6413      	str	r3, [r2, #64]	; 0x40
 800424a:	1d15      	adds	r5, r2, #4
 800424c:	4607      	mov	r7, r0
 800424e:	460e      	mov	r6, r1
 8004250:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004252:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 8004256:	ac17      	add	r4, sp, #92	; 0x5c
 8004258:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800425a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800425c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800425e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004260:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004262:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004266:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800426a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800426e:	9516      	str	r5, [sp, #88]	; 0x58
 8004270:	e010      	b.n	8004294 <__gnu_Unwind_Backtrace+0x50>
 8004272:	a816      	add	r0, sp, #88	; 0x58
 8004274:	f7ff ffd8 	bl	8004228 <_Unwind_SetGR>
 8004278:	4631      	mov	r1, r6
 800427a:	a816      	add	r0, sp, #88	; 0x58
 800427c:	47b8      	blx	r7
 800427e:	aa16      	add	r2, sp, #88	; 0x58
 8004280:	4669      	mov	r1, sp
 8004282:	b978      	cbnz	r0, 80042a4 <__gnu_Unwind_Backtrace+0x60>
 8004284:	9b04      	ldr	r3, [sp, #16]
 8004286:	2008      	movs	r0, #8
 8004288:	4798      	blx	r3
 800428a:	2805      	cmp	r0, #5
 800428c:	4604      	mov	r4, r0
 800428e:	d00a      	beq.n	80042a6 <__gnu_Unwind_Backtrace+0x62>
 8004290:	2809      	cmp	r0, #9
 8004292:	d007      	beq.n	80042a4 <__gnu_Unwind_Backtrace+0x60>
 8004294:	9926      	ldr	r1, [sp, #152]	; 0x98
 8004296:	4668      	mov	r0, sp
 8004298:	f7ff fe14 	bl	8003ec4 <get_eit_entry>
 800429c:	466a      	mov	r2, sp
 800429e:	210c      	movs	r1, #12
 80042a0:	2800      	cmp	r0, #0
 80042a2:	d0e6      	beq.n	8004272 <__gnu_Unwind_Backtrace+0x2e>
 80042a4:	2409      	movs	r4, #9
 80042a6:	a816      	add	r0, sp, #88	; 0x58
 80042a8:	f7ff fe5e 	bl	8003f68 <restore_non_core_regs>
 80042ac:	4620      	mov	r0, r4
 80042ae:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 80042b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080042b4 <__gnu_unwind_pr_common>:
 80042b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042b8:	460d      	mov	r5, r1
 80042ba:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 80042bc:	b089      	sub	sp, #36	; 0x24
 80042be:	1d0c      	adds	r4, r1, #4
 80042c0:	4616      	mov	r6, r2
 80042c2:	f000 0b03 	and.w	fp, r0, #3
 80042c6:	680a      	ldr	r2, [r1, #0]
 80042c8:	9406      	str	r4, [sp, #24]
 80042ca:	461f      	mov	r7, r3
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d068      	beq.n	80043a2 <__gnu_unwind_pr_common+0xee>
 80042d0:	0c13      	lsrs	r3, r2, #16
 80042d2:	b2d9      	uxtb	r1, r3
 80042d4:	0412      	lsls	r2, r2, #16
 80042d6:	f88d 301d 	strb.w	r3, [sp, #29]
 80042da:	2302      	movs	r3, #2
 80042dc:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 80042e0:	9205      	str	r2, [sp, #20]
 80042e2:	f88d 301c 	strb.w	r3, [sp, #28]
 80042e6:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80042e8:	f1bb 0f02 	cmp.w	fp, #2
 80042ec:	bf08      	it	eq
 80042ee:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 80042f0:	f013 0301 	ands.w	r3, r3, #1
 80042f4:	d146      	bne.n	8004384 <__gnu_unwind_pr_common+0xd0>
 80042f6:	9301      	str	r3, [sp, #4]
 80042f8:	f000 0308 	and.w	r3, r0, #8
 80042fc:	9300      	str	r3, [sp, #0]
 80042fe:	f8d4 9000 	ldr.w	r9, [r4]
 8004302:	f1b9 0f00 	cmp.w	r9, #0
 8004306:	f000 80f3 	beq.w	80044f0 <__gnu_unwind_pr_common+0x23c>
 800430a:	2f02      	cmp	r7, #2
 800430c:	d045      	beq.n	800439a <__gnu_unwind_pr_common+0xe6>
 800430e:	f8b4 9000 	ldrh.w	r9, [r4]
 8004312:	f8b4 8002 	ldrh.w	r8, [r4, #2]
 8004316:	3404      	adds	r4, #4
 8004318:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800431a:	f028 0a01 	bic.w	sl, r8, #1
 800431e:	210f      	movs	r1, #15
 8004320:	4630      	mov	r0, r6
 8004322:	449a      	add	sl, r3
 8004324:	f7ff ff5e 	bl	80041e4 <_Unwind_GetGR>
 8004328:	4582      	cmp	sl, r0
 800432a:	d834      	bhi.n	8004396 <__gnu_unwind_pr_common+0xe2>
 800432c:	f029 0301 	bic.w	r3, r9, #1
 8004330:	4453      	add	r3, sl
 8004332:	4283      	cmp	r3, r0
 8004334:	bf94      	ite	ls
 8004336:	2000      	movls	r0, #0
 8004338:	2001      	movhi	r0, #1
 800433a:	ea4f 0848 	mov.w	r8, r8, lsl #1
 800433e:	f008 0802 	and.w	r8, r8, #2
 8004342:	f009 0901 	and.w	r9, r9, #1
 8004346:	ea48 0809 	orr.w	r8, r8, r9
 800434a:	f1b8 0f01 	cmp.w	r8, #1
 800434e:	d03a      	beq.n	80043c6 <__gnu_unwind_pr_common+0x112>
 8004350:	d331      	bcc.n	80043b6 <__gnu_unwind_pr_common+0x102>
 8004352:	f1b8 0f02 	cmp.w	r8, #2
 8004356:	d11a      	bne.n	800438e <__gnu_unwind_pr_common+0xda>
 8004358:	6823      	ldr	r3, [r4, #0]
 800435a:	f023 4a00 	bic.w	sl, r3, #2147483648	; 0x80000000
 800435e:	f1bb 0f00 	cmp.w	fp, #0
 8004362:	d166      	bne.n	8004432 <__gnu_unwind_pr_common+0x17e>
 8004364:	b130      	cbz	r0, 8004374 <__gnu_unwind_pr_common+0xc0>
 8004366:	9a00      	ldr	r2, [sp, #0]
 8004368:	2a00      	cmp	r2, #0
 800436a:	d06c      	beq.n	8004446 <__gnu_unwind_pr_common+0x192>
 800436c:	f1ba 0f00 	cmp.w	sl, #0
 8004370:	f000 8090 	beq.w	8004494 <__gnu_unwind_pr_common+0x1e0>
 8004374:	2b00      	cmp	r3, #0
 8004376:	da00      	bge.n	800437a <__gnu_unwind_pr_common+0xc6>
 8004378:	3404      	adds	r4, #4
 800437a:	f10a 0301 	add.w	r3, sl, #1
 800437e:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8004382:	e7bc      	b.n	80042fe <__gnu_unwind_pr_common+0x4a>
 8004384:	4630      	mov	r0, r6
 8004386:	a905      	add	r1, sp, #20
 8004388:	f000 fb46 	bl	8004a18 <__gnu_unwind_execute>
 800438c:	b178      	cbz	r0, 80043ae <__gnu_unwind_pr_common+0xfa>
 800438e:	2009      	movs	r0, #9
 8004390:	b009      	add	sp, #36	; 0x24
 8004392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004396:	2000      	movs	r0, #0
 8004398:	e7cf      	b.n	800433a <__gnu_unwind_pr_common+0x86>
 800439a:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800439e:	3408      	adds	r4, #8
 80043a0:	e7ba      	b.n	8004318 <__gnu_unwind_pr_common+0x64>
 80043a2:	0212      	lsls	r2, r2, #8
 80043a4:	2303      	movs	r3, #3
 80043a6:	9205      	str	r2, [sp, #20]
 80043a8:	f8ad 301c 	strh.w	r3, [sp, #28]
 80043ac:	e79b      	b.n	80042e6 <__gnu_unwind_pr_common+0x32>
 80043ae:	2008      	movs	r0, #8
 80043b0:	b009      	add	sp, #36	; 0x24
 80043b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043b6:	f1bb 0f00 	cmp.w	fp, #0
 80043ba:	d002      	beq.n	80043c2 <__gnu_unwind_pr_common+0x10e>
 80043bc:	2800      	cmp	r0, #0
 80043be:	f040 80b4 	bne.w	800452a <__gnu_unwind_pr_common+0x276>
 80043c2:	3404      	adds	r4, #4
 80043c4:	e79b      	b.n	80042fe <__gnu_unwind_pr_common+0x4a>
 80043c6:	f1bb 0f00 	cmp.w	fp, #0
 80043ca:	d118      	bne.n	80043fe <__gnu_unwind_pr_common+0x14a>
 80043cc:	b1a8      	cbz	r0, 80043fa <__gnu_unwind_pr_common+0x146>
 80043ce:	e9d4 2300 	ldrd	r2, r3, [r4]
 80043d2:	1c99      	adds	r1, r3, #2
 80043d4:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 80043d8:	d0d9      	beq.n	800438e <__gnu_unwind_pr_common+0xda>
 80043da:	f105 0158 	add.w	r1, r5, #88	; 0x58
 80043de:	3301      	adds	r3, #1
 80043e0:	9104      	str	r1, [sp, #16]
 80043e2:	f000 80b5 	beq.w	8004550 <__gnu_unwind_pr_common+0x29c>
 80043e6:	1d20      	adds	r0, r4, #4
 80043e8:	f7ff fdea 	bl	8003fc0 <_Unwind_decode_typeinfo_ptr.isra.0>
 80043ec:	ab04      	add	r3, sp, #16
 80043ee:	4601      	mov	r1, r0
 80043f0:	4628      	mov	r0, r5
 80043f2:	f3af 8000 	nop.w
 80043f6:	2800      	cmp	r0, #0
 80043f8:	d167      	bne.n	80044ca <__gnu_unwind_pr_common+0x216>
 80043fa:	3408      	adds	r4, #8
 80043fc:	e77f      	b.n	80042fe <__gnu_unwind_pr_common+0x4a>
 80043fe:	210d      	movs	r1, #13
 8004400:	4630      	mov	r0, r6
 8004402:	f8d5 8020 	ldr.w	r8, [r5, #32]
 8004406:	f7ff feed 	bl	80041e4 <_Unwind_GetGR>
 800440a:	4580      	cmp	r8, r0
 800440c:	d1f5      	bne.n	80043fa <__gnu_unwind_pr_common+0x146>
 800440e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8004410:	429c      	cmp	r4, r3
 8004412:	d1f2      	bne.n	80043fa <__gnu_unwind_pr_common+0x146>
 8004414:	4620      	mov	r0, r4
 8004416:	f7ff fd07 	bl	8003e28 <selfrel_offset31>
 800441a:	210f      	movs	r1, #15
 800441c:	4602      	mov	r2, r0
 800441e:	4630      	mov	r0, r6
 8004420:	f7ff ff02 	bl	8004228 <_Unwind_SetGR>
 8004424:	4630      	mov	r0, r6
 8004426:	462a      	mov	r2, r5
 8004428:	2100      	movs	r1, #0
 800442a:	f7ff fefd 	bl	8004228 <_Unwind_SetGR>
 800442e:	2007      	movs	r0, #7
 8004430:	e7ae      	b.n	8004390 <__gnu_unwind_pr_common+0xdc>
 8004432:	210d      	movs	r1, #13
 8004434:	4630      	mov	r0, r6
 8004436:	f8d5 8020 	ldr.w	r8, [r5, #32]
 800443a:	f7ff fed3 	bl	80041e4 <_Unwind_GetGR>
 800443e:	4580      	cmp	r8, r0
 8004440:	d032      	beq.n	80044a8 <__gnu_unwind_pr_common+0x1f4>
 8004442:	6823      	ldr	r3, [r4, #0]
 8004444:	e796      	b.n	8004374 <__gnu_unwind_pr_common+0xc0>
 8004446:	f1ba 0f00 	cmp.w	sl, #0
 800444a:	d023      	beq.n	8004494 <__gnu_unwind_pr_common+0x1e0>
 800444c:	f105 0358 	add.w	r3, r5, #88	; 0x58
 8004450:	f104 0804 	add.w	r8, r4, #4
 8004454:	f8cd b008 	str.w	fp, [sp, #8]
 8004458:	f8dd 9000 	ldr.w	r9, [sp]
 800445c:	9703      	str	r7, [sp, #12]
 800445e:	46a3      	mov	fp, r4
 8004460:	461c      	mov	r4, r3
 8004462:	e002      	b.n	800446a <__gnu_unwind_pr_common+0x1b6>
 8004464:	4557      	cmp	r7, sl
 8004466:	46b9      	mov	r9, r7
 8004468:	d040      	beq.n	80044ec <__gnu_unwind_pr_common+0x238>
 800446a:	4640      	mov	r0, r8
 800446c:	9404      	str	r4, [sp, #16]
 800446e:	f7ff fda7 	bl	8003fc0 <_Unwind_decode_typeinfo_ptr.isra.0>
 8004472:	ab04      	add	r3, sp, #16
 8004474:	4601      	mov	r1, r0
 8004476:	2200      	movs	r2, #0
 8004478:	4628      	mov	r0, r5
 800447a:	f3af 8000 	nop.w
 800447e:	f109 0701 	add.w	r7, r9, #1
 8004482:	f108 0804 	add.w	r8, r8, #4
 8004486:	2800      	cmp	r0, #0
 8004488:	d0ec      	beq.n	8004464 <__gnu_unwind_pr_common+0x1b0>
 800448a:	45d1      	cmp	r9, sl
 800448c:	465c      	mov	r4, fp
 800448e:	e9dd b702 	ldrd	fp, r7, [sp, #8]
 8004492:	d1d6      	bne.n	8004442 <__gnu_unwind_pr_common+0x18e>
 8004494:	4630      	mov	r0, r6
 8004496:	210d      	movs	r1, #13
 8004498:	f7ff fea4 	bl	80041e4 <_Unwind_GetGR>
 800449c:	9b04      	ldr	r3, [sp, #16]
 800449e:	6228      	str	r0, [r5, #32]
 80044a0:	e9c5 3409 	strd	r3, r4, [r5, #36]	; 0x24
 80044a4:	2006      	movs	r0, #6
 80044a6:	e773      	b.n	8004390 <__gnu_unwind_pr_common+0xdc>
 80044a8:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80044aa:	429c      	cmp	r4, r3
 80044ac:	d1c9      	bne.n	8004442 <__gnu_unwind_pr_common+0x18e>
 80044ae:	2204      	movs	r2, #4
 80044b0:	f04f 0800 	mov.w	r8, #0
 80044b4:	18a3      	adds	r3, r4, r2
 80044b6:	e9c5 a80a 	strd	sl, r8, [r5, #40]	; 0x28
 80044ba:	e9c5 230c 	strd	r2, r3, [r5, #48]	; 0x30
 80044be:	6823      	ldr	r3, [r4, #0]
 80044c0:	4543      	cmp	r3, r8
 80044c2:	db4d      	blt.n	8004560 <__gnu_unwind_pr_common+0x2ac>
 80044c4:	2301      	movs	r3, #1
 80044c6:	9301      	str	r3, [sp, #4]
 80044c8:	e757      	b.n	800437a <__gnu_unwind_pr_common+0xc6>
 80044ca:	4680      	mov	r8, r0
 80044cc:	210d      	movs	r1, #13
 80044ce:	4630      	mov	r0, r6
 80044d0:	f7ff fe88 	bl	80041e4 <_Unwind_GetGR>
 80044d4:	f1b8 0f02 	cmp.w	r8, #2
 80044d8:	6228      	str	r0, [r5, #32]
 80044da:	d13e      	bne.n	800455a <__gnu_unwind_pr_common+0x2a6>
 80044dc:	462b      	mov	r3, r5
 80044de:	9a04      	ldr	r2, [sp, #16]
 80044e0:	f843 2f2c 	str.w	r2, [r3, #44]!
 80044e4:	626b      	str	r3, [r5, #36]	; 0x24
 80044e6:	62ac      	str	r4, [r5, #40]	; 0x28
 80044e8:	2006      	movs	r0, #6
 80044ea:	e751      	b.n	8004390 <__gnu_unwind_pr_common+0xdc>
 80044ec:	465c      	mov	r4, fp
 80044ee:	e7d1      	b.n	8004494 <__gnu_unwind_pr_common+0x1e0>
 80044f0:	a905      	add	r1, sp, #20
 80044f2:	4630      	mov	r0, r6
 80044f4:	f000 fa90 	bl	8004a18 <__gnu_unwind_execute>
 80044f8:	2800      	cmp	r0, #0
 80044fa:	f47f af48 	bne.w	800438e <__gnu_unwind_pr_common+0xda>
 80044fe:	9b01      	ldr	r3, [sp, #4]
 8004500:	2b00      	cmp	r3, #0
 8004502:	f43f af54 	beq.w	80043ae <__gnu_unwind_pr_common+0xfa>
 8004506:	210f      	movs	r1, #15
 8004508:	4630      	mov	r0, r6
 800450a:	f7ff fe6b 	bl	80041e4 <_Unwind_GetGR>
 800450e:	210e      	movs	r1, #14
 8004510:	4602      	mov	r2, r0
 8004512:	4630      	mov	r0, r6
 8004514:	f7ff fe88 	bl	8004228 <_Unwind_SetGR>
 8004518:	4630      	mov	r0, r6
 800451a:	4a1a      	ldr	r2, [pc, #104]	; (8004584 <__gnu_unwind_pr_common+0x2d0>)
 800451c:	210f      	movs	r1, #15
 800451e:	f7ff fe83 	bl	8004228 <_Unwind_SetGR>
 8004522:	2007      	movs	r0, #7
 8004524:	b009      	add	sp, #36	; 0x24
 8004526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800452a:	4620      	mov	r0, r4
 800452c:	f7ff fc7c 	bl	8003e28 <selfrel_offset31>
 8004530:	3404      	adds	r4, #4
 8004532:	4607      	mov	r7, r0
 8004534:	63ac      	str	r4, [r5, #56]	; 0x38
 8004536:	4628      	mov	r0, r5
 8004538:	f3af 8000 	nop.w
 800453c:	2800      	cmp	r0, #0
 800453e:	f43f af26 	beq.w	800438e <__gnu_unwind_pr_common+0xda>
 8004542:	4630      	mov	r0, r6
 8004544:	463a      	mov	r2, r7
 8004546:	210f      	movs	r1, #15
 8004548:	f7ff fe6e 	bl	8004228 <_Unwind_SetGR>
 800454c:	2007      	movs	r0, #7
 800454e:	e71f      	b.n	8004390 <__gnu_unwind_pr_common+0xdc>
 8004550:	4630      	mov	r0, r6
 8004552:	210d      	movs	r1, #13
 8004554:	f7ff fe46 	bl	80041e4 <_Unwind_GetGR>
 8004558:	6228      	str	r0, [r5, #32]
 800455a:	9b04      	ldr	r3, [sp, #16]
 800455c:	626b      	str	r3, [r5, #36]	; 0x24
 800455e:	e7c2      	b.n	80044e6 <__gnu_unwind_pr_common+0x232>
 8004560:	f10a 0001 	add.w	r0, sl, #1
 8004564:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8004568:	f7ff fc5e 	bl	8003e28 <selfrel_offset31>
 800456c:	210f      	movs	r1, #15
 800456e:	4602      	mov	r2, r0
 8004570:	4630      	mov	r0, r6
 8004572:	f7ff fe59 	bl	8004228 <_Unwind_SetGR>
 8004576:	4630      	mov	r0, r6
 8004578:	462a      	mov	r2, r5
 800457a:	4641      	mov	r1, r8
 800457c:	f7ff fe54 	bl	8004228 <_Unwind_SetGR>
 8004580:	2007      	movs	r0, #7
 8004582:	e705      	b.n	8004390 <__gnu_unwind_pr_common+0xdc>
 8004584:	00000000 	.word	0x00000000

08004588 <__aeabi_unwind_cpp_pr0>:
 8004588:	2300      	movs	r3, #0
 800458a:	e693      	b.n	80042b4 <__gnu_unwind_pr_common>

0800458c <__aeabi_unwind_cpp_pr1>:
 800458c:	2301      	movs	r3, #1
 800458e:	e691      	b.n	80042b4 <__gnu_unwind_pr_common>

08004590 <__aeabi_unwind_cpp_pr2>:
 8004590:	2302      	movs	r3, #2
 8004592:	e68f      	b.n	80042b4 <__gnu_unwind_pr_common>

08004594 <_Unwind_VRS_Pop>:
 8004594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004598:	4605      	mov	r5, r0
 800459a:	b0c4      	sub	sp, #272	; 0x110
 800459c:	2904      	cmp	r1, #4
 800459e:	d806      	bhi.n	80045ae <_Unwind_VRS_Pop+0x1a>
 80045a0:	e8df f001 	tbb	[pc, r1]
 80045a4:	03052b4d 	.word	0x03052b4d
 80045a8:	09          	.byte	0x09
 80045a9:	00          	.byte	0x00
 80045aa:	2b03      	cmp	r3, #3
 80045ac:	d05f      	beq.n	800466e <_Unwind_VRS_Pop+0xda>
 80045ae:	2002      	movs	r0, #2
 80045b0:	b044      	add	sp, #272	; 0x110
 80045b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d1f9      	bne.n	80045ae <_Unwind_VRS_Pop+0x1a>
 80045ba:	2a10      	cmp	r2, #16
 80045bc:	d8f7      	bhi.n	80045ae <_Unwind_VRS_Pop+0x1a>
 80045be:	682b      	ldr	r3, [r5, #0]
 80045c0:	06dc      	lsls	r4, r3, #27
 80045c2:	f100 80f4 	bmi.w	80047ae <_Unwind_VRS_Pop+0x21a>
 80045c6:	ac22      	add	r4, sp, #136	; 0x88
 80045c8:	4620      	mov	r0, r4
 80045ca:	9201      	str	r2, [sp, #4]
 80045cc:	f000 f994 	bl	80048f8 <__gnu_Unwind_Save_WMMXC>
 80045d0:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 80045d2:	9a01      	ldr	r2, [sp, #4]
 80045d4:	2300      	movs	r3, #0
 80045d6:	2601      	movs	r6, #1
 80045d8:	fa06 f103 	lsl.w	r1, r6, r3
 80045dc:	4211      	tst	r1, r2
 80045de:	d003      	beq.n	80045e8 <_Unwind_VRS_Pop+0x54>
 80045e0:	6801      	ldr	r1, [r0, #0]
 80045e2:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
 80045e6:	3004      	adds	r0, #4
 80045e8:	3301      	adds	r3, #1
 80045ea:	2b04      	cmp	r3, #4
 80045ec:	d1f4      	bne.n	80045d8 <_Unwind_VRS_Pop+0x44>
 80045ee:	63a8      	str	r0, [r5, #56]	; 0x38
 80045f0:	4620      	mov	r0, r4
 80045f2:	f000 f977 	bl	80048e4 <__gnu_Unwind_Restore_WMMXC>
 80045f6:	2000      	movs	r0, #0
 80045f8:	e7da      	b.n	80045b0 <_Unwind_VRS_Pop+0x1c>
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	ea4f 4612 	mov.w	r6, r2, lsr #16
 8004600:	b297      	uxth	r7, r2
 8004602:	d052      	beq.n	80046aa <_Unwind_VRS_Pop+0x116>
 8004604:	2b05      	cmp	r3, #5
 8004606:	d1d2      	bne.n	80045ae <_Unwind_VRS_Pop+0x1a>
 8004608:	eb06 0807 	add.w	r8, r6, r7
 800460c:	f1b8 0f20 	cmp.w	r8, #32
 8004610:	d8cd      	bhi.n	80045ae <_Unwind_VRS_Pop+0x1a>
 8004612:	2e0f      	cmp	r6, #15
 8004614:	f240 8099 	bls.w	800474a <_Unwind_VRS_Pop+0x1b6>
 8004618:	46b8      	mov	r8, r7
 800461a:	2f00      	cmp	r7, #0
 800461c:	f040 80db 	bne.w	80047d6 <_Unwind_VRS_Pop+0x242>
 8004620:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8004622:	63aa      	str	r2, [r5, #56]	; 0x38
 8004624:	2e0f      	cmp	r6, #15
 8004626:	f240 80be 	bls.w	80047a6 <_Unwind_VRS_Pop+0x212>
 800462a:	f1b8 0f00 	cmp.w	r8, #0
 800462e:	d002      	beq.n	8004636 <_Unwind_VRS_Pop+0xa2>
 8004630:	a802      	add	r0, sp, #8
 8004632:	f000 f90b 	bl	800484c <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8004636:	2000      	movs	r0, #0
 8004638:	b044      	add	sp, #272	; 0x110
 800463a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800463e:	2b00      	cmp	r3, #0
 8004640:	d1b5      	bne.n	80045ae <_Unwind_VRS_Pop+0x1a>
 8004642:	6bac      	ldr	r4, [r5, #56]	; 0x38
 8004644:	b297      	uxth	r7, r2
 8004646:	1d28      	adds	r0, r5, #4
 8004648:	2601      	movs	r6, #1
 800464a:	fa06 f103 	lsl.w	r1, r6, r3
 800464e:	4239      	tst	r1, r7
 8004650:	f103 0301 	add.w	r3, r3, #1
 8004654:	d002      	beq.n	800465c <_Unwind_VRS_Pop+0xc8>
 8004656:	6821      	ldr	r1, [r4, #0]
 8004658:	6001      	str	r1, [r0, #0]
 800465a:	3404      	adds	r4, #4
 800465c:	2b10      	cmp	r3, #16
 800465e:	f100 0004 	add.w	r0, r0, #4
 8004662:	d1f2      	bne.n	800464a <_Unwind_VRS_Pop+0xb6>
 8004664:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
 8004668:	d1e5      	bne.n	8004636 <_Unwind_VRS_Pop+0xa2>
 800466a:	63ac      	str	r4, [r5, #56]	; 0x38
 800466c:	e7a0      	b.n	80045b0 <_Unwind_VRS_Pop+0x1c>
 800466e:	0c16      	lsrs	r6, r2, #16
 8004670:	b297      	uxth	r7, r2
 8004672:	19f3      	adds	r3, r6, r7
 8004674:	2b10      	cmp	r3, #16
 8004676:	d89a      	bhi.n	80045ae <_Unwind_VRS_Pop+0x1a>
 8004678:	682b      	ldr	r3, [r5, #0]
 800467a:	071a      	lsls	r2, r3, #28
 800467c:	d45d      	bmi.n	800473a <_Unwind_VRS_Pop+0x1a6>
 800467e:	ac22      	add	r4, sp, #136	; 0x88
 8004680:	4620      	mov	r0, r4
 8004682:	f000 f90d 	bl	80048a0 <__gnu_Unwind_Save_WMMXD>
 8004686:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800468a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800468c:	b13f      	cbz	r7, 800469e <_Unwind_VRS_Pop+0x10a>
 800468e:	eb03 02c7 	add.w	r2, r3, r7, lsl #3
 8004692:	6818      	ldr	r0, [r3, #0]
 8004694:	f841 0b04 	str.w	r0, [r1], #4
 8004698:	3304      	adds	r3, #4
 800469a:	4293      	cmp	r3, r2
 800469c:	d1f9      	bne.n	8004692 <_Unwind_VRS_Pop+0xfe>
 800469e:	4620      	mov	r0, r4
 80046a0:	63ab      	str	r3, [r5, #56]	; 0x38
 80046a2:	f000 f8db 	bl	800485c <__gnu_Unwind_Restore_WMMXD>
 80046a6:	2000      	movs	r0, #0
 80046a8:	e782      	b.n	80045b0 <_Unwind_VRS_Pop+0x1c>
 80046aa:	19f2      	adds	r2, r6, r7
 80046ac:	2a10      	cmp	r2, #16
 80046ae:	f63f af7e 	bhi.w	80045ae <_Unwind_VRS_Pop+0x1a>
 80046b2:	2e0f      	cmp	r6, #15
 80046b4:	f63f af7b 	bhi.w	80045ae <_Unwind_VRS_Pop+0x1a>
 80046b8:	682a      	ldr	r2, [r5, #0]
 80046ba:	07d1      	lsls	r1, r2, #31
 80046bc:	d508      	bpl.n	80046d0 <_Unwind_VRS_Pop+0x13c>
 80046be:	4628      	mov	r0, r5
 80046c0:	f022 0203 	bic.w	r2, r2, #3
 80046c4:	f840 2b48 	str.w	r2, [r0], #72
 80046c8:	9301      	str	r3, [sp, #4]
 80046ca:	f000 f8b3 	bl	8004834 <__gnu_Unwind_Save_VFP>
 80046ce:	9b01      	ldr	r3, [sp, #4]
 80046d0:	9301      	str	r3, [sp, #4]
 80046d2:	ac22      	add	r4, sp, #136	; 0x88
 80046d4:	4620      	mov	r0, r4
 80046d6:	f000 f8ad 	bl	8004834 <__gnu_Unwind_Save_VFP>
 80046da:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 80046dc:	9b01      	ldr	r3, [sp, #4]
 80046de:	2f00      	cmp	r7, #0
 80046e0:	f000 8095 	beq.w	800480e <_Unwind_VRS_Pop+0x27a>
 80046e4:	007f      	lsls	r7, r7, #1
 80046e6:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80046ea:	f04f 0800 	mov.w	r8, #0
 80046ee:	3c04      	subs	r4, #4
 80046f0:	eb01 0287 	add.w	r2, r1, r7, lsl #2
 80046f4:	f851 0b04 	ldr.w	r0, [r1], #4
 80046f8:	f844 0f04 	str.w	r0, [r4, #4]!
 80046fc:	4291      	cmp	r1, r2
 80046fe:	d1f9      	bne.n	80046f4 <_Unwind_VRS_Pop+0x160>
 8004700:	f1b8 0f00 	cmp.w	r8, #0
 8004704:	d00f      	beq.n	8004726 <_Unwind_VRS_Pop+0x192>
 8004706:	ac02      	add	r4, sp, #8
 8004708:	2e10      	cmp	r6, #16
 800470a:	4631      	mov	r1, r6
 800470c:	bf38      	it	cc
 800470e:	2110      	movcc	r1, #16
 8004710:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8004714:	3984      	subs	r1, #132	; 0x84
 8004716:	eb02 04c8 	add.w	r4, r2, r8, lsl #3
 800471a:	f852 0b04 	ldr.w	r0, [r2], #4
 800471e:	f841 0f04 	str.w	r0, [r1, #4]!
 8004722:	4294      	cmp	r4, r2
 8004724:	d1f9      	bne.n	800471a <_Unwind_VRS_Pop+0x186>
 8004726:	2b01      	cmp	r3, #1
 8004728:	f47f af7b 	bne.w	8004622 <_Unwind_VRS_Pop+0x8e>
 800472c:	ac22      	add	r4, sp, #136	; 0x88
 800472e:	3204      	adds	r2, #4
 8004730:	63aa      	str	r2, [r5, #56]	; 0x38
 8004732:	4620      	mov	r0, r4
 8004734:	f000 f87a 	bl	800482c <__gnu_Unwind_Restore_VFP>
 8004738:	e77d      	b.n	8004636 <_Unwind_VRS_Pop+0xa2>
 800473a:	f023 0308 	bic.w	r3, r3, #8
 800473e:	602b      	str	r3, [r5, #0]
 8004740:	f505 70a8 	add.w	r0, r5, #336	; 0x150
 8004744:	f000 f8ac 	bl	80048a0 <__gnu_Unwind_Save_WMMXD>
 8004748:	e799      	b.n	800467e <_Unwind_VRS_Pop+0xea>
 800474a:	f1b8 0f10 	cmp.w	r8, #16
 800474e:	682a      	ldr	r2, [r5, #0]
 8004750:	d943      	bls.n	80047da <_Unwind_VRS_Pop+0x246>
 8004752:	07d0      	lsls	r0, r2, #31
 8004754:	f1a8 0810 	sub.w	r8, r8, #16
 8004758:	d50b      	bpl.n	8004772 <_Unwind_VRS_Pop+0x1de>
 800475a:	4628      	mov	r0, r5
 800475c:	f022 0201 	bic.w	r2, r2, #1
 8004760:	f042 0202 	orr.w	r2, r2, #2
 8004764:	f840 2b48 	str.w	r2, [r0], #72
 8004768:	9301      	str	r3, [sp, #4]
 800476a:	f000 f86b 	bl	8004844 <__gnu_Unwind_Save_VFP_D>
 800476e:	682a      	ldr	r2, [r5, #0]
 8004770:	9b01      	ldr	r3, [sp, #4]
 8004772:	0751      	lsls	r1, r2, #29
 8004774:	d425      	bmi.n	80047c2 <_Unwind_VRS_Pop+0x22e>
 8004776:	2e0f      	cmp	r6, #15
 8004778:	d804      	bhi.n	8004784 <_Unwind_VRS_Pop+0x1f0>
 800477a:	a822      	add	r0, sp, #136	; 0x88
 800477c:	9301      	str	r3, [sp, #4]
 800477e:	f000 f861 	bl	8004844 <__gnu_Unwind_Save_VFP_D>
 8004782:	9b01      	ldr	r3, [sp, #4]
 8004784:	9301      	str	r3, [sp, #4]
 8004786:	ac02      	add	r4, sp, #8
 8004788:	4620      	mov	r0, r4
 800478a:	f000 f863 	bl	8004854 <__gnu_Unwind_Save_VFP_D_16_to_31>
 800478e:	f1c6 0110 	rsb	r1, r6, #16
 8004792:	2900      	cmp	r1, #0
 8004794:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8004796:	9b01      	ldr	r3, [sp, #4]
 8004798:	ddb6      	ble.n	8004708 <_Unwind_VRS_Pop+0x174>
 800479a:	ac22      	add	r4, sp, #136	; 0x88
 800479c:	004f      	lsls	r7, r1, #1
 800479e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80047a2:	4611      	mov	r1, r2
 80047a4:	e7a3      	b.n	80046ee <_Unwind_VRS_Pop+0x15a>
 80047a6:	a822      	add	r0, sp, #136	; 0x88
 80047a8:	f000 f848 	bl	800483c <__gnu_Unwind_Restore_VFP_D>
 80047ac:	e73d      	b.n	800462a <_Unwind_VRS_Pop+0x96>
 80047ae:	f023 0310 	bic.w	r3, r3, #16
 80047b2:	602b      	str	r3, [r5, #0]
 80047b4:	f505 70e8 	add.w	r0, r5, #464	; 0x1d0
 80047b8:	9201      	str	r2, [sp, #4]
 80047ba:	f000 f89d 	bl	80048f8 <__gnu_Unwind_Save_WMMXC>
 80047be:	9a01      	ldr	r2, [sp, #4]
 80047c0:	e701      	b.n	80045c6 <_Unwind_VRS_Pop+0x32>
 80047c2:	4628      	mov	r0, r5
 80047c4:	f022 0204 	bic.w	r2, r2, #4
 80047c8:	f840 2bd0 	str.w	r2, [r0], #208
 80047cc:	9301      	str	r3, [sp, #4]
 80047ce:	f000 f841 	bl	8004854 <__gnu_Unwind_Save_VFP_D_16_to_31>
 80047d2:	9b01      	ldr	r3, [sp, #4]
 80047d4:	e7cf      	b.n	8004776 <_Unwind_VRS_Pop+0x1e2>
 80047d6:	682a      	ldr	r2, [r5, #0]
 80047d8:	e7cb      	b.n	8004772 <_Unwind_VRS_Pop+0x1de>
 80047da:	07d0      	lsls	r0, r2, #31
 80047dc:	d50a      	bpl.n	80047f4 <_Unwind_VRS_Pop+0x260>
 80047de:	4628      	mov	r0, r5
 80047e0:	f022 0201 	bic.w	r2, r2, #1
 80047e4:	f042 0202 	orr.w	r2, r2, #2
 80047e8:	f840 2b48 	str.w	r2, [r0], #72
 80047ec:	9301      	str	r3, [sp, #4]
 80047ee:	f000 f829 	bl	8004844 <__gnu_Unwind_Save_VFP_D>
 80047f2:	9b01      	ldr	r3, [sp, #4]
 80047f4:	9301      	str	r3, [sp, #4]
 80047f6:	ac22      	add	r4, sp, #136	; 0x88
 80047f8:	4620      	mov	r0, r4
 80047fa:	f000 f823 	bl	8004844 <__gnu_Unwind_Save_VFP_D>
 80047fe:	46b8      	mov	r8, r7
 8004800:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 8004802:	9b01      	ldr	r3, [sp, #4]
 8004804:	2f00      	cmp	r7, #0
 8004806:	f47f af6d 	bne.w	80046e4 <_Unwind_VRS_Pop+0x150>
 800480a:	460a      	mov	r2, r1
 800480c:	e709      	b.n	8004622 <_Unwind_VRS_Pop+0x8e>
 800480e:	460a      	mov	r2, r1
 8004810:	e78d      	b.n	800472e <_Unwind_VRS_Pop+0x19a>
 8004812:	bf00      	nop

08004814 <__restore_core_regs>:
 8004814:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8004818:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 800481c:	469c      	mov	ip, r3
 800481e:	46a6      	mov	lr, r4
 8004820:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8004824:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8004828:	46e5      	mov	sp, ip
 800482a:	bd00      	pop	{pc}

0800482c <__gnu_Unwind_Restore_VFP>:
 800482c:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8004830:	4770      	bx	lr
 8004832:	bf00      	nop

08004834 <__gnu_Unwind_Save_VFP>:
 8004834:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8004838:	4770      	bx	lr
 800483a:	bf00      	nop

0800483c <__gnu_Unwind_Restore_VFP_D>:
 800483c:	ec90 0b20 	vldmia	r0, {d0-d15}
 8004840:	4770      	bx	lr
 8004842:	bf00      	nop

08004844 <__gnu_Unwind_Save_VFP_D>:
 8004844:	ec80 0b20 	vstmia	r0, {d0-d15}
 8004848:	4770      	bx	lr
 800484a:	bf00      	nop

0800484c <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 800484c:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8004850:	4770      	bx	lr
 8004852:	bf00      	nop

08004854 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8004854:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8004858:	4770      	bx	lr
 800485a:	bf00      	nop

0800485c <__gnu_Unwind_Restore_WMMXD>:
 800485c:	ecf0 0102 	ldfe	f0, [r0], #8
 8004860:	ecf0 1102 	ldfe	f1, [r0], #8
 8004864:	ecf0 2102 	ldfe	f2, [r0], #8
 8004868:	ecf0 3102 	ldfe	f3, [r0], #8
 800486c:	ecf0 4102 	ldfe	f4, [r0], #8
 8004870:	ecf0 5102 	ldfe	f5, [r0], #8
 8004874:	ecf0 6102 	ldfe	f6, [r0], #8
 8004878:	ecf0 7102 	ldfe	f7, [r0], #8
 800487c:	ecf0 8102 	ldfp	f0, [r0], #8
 8004880:	ecf0 9102 	ldfp	f1, [r0], #8
 8004884:	ecf0 a102 	ldfp	f2, [r0], #8
 8004888:	ecf0 b102 	ldfp	f3, [r0], #8
 800488c:	ecf0 c102 	ldfp	f4, [r0], #8
 8004890:	ecf0 d102 	ldfp	f5, [r0], #8
 8004894:	ecf0 e102 	ldfp	f6, [r0], #8
 8004898:	ecf0 f102 	ldfp	f7, [r0], #8
 800489c:	4770      	bx	lr
 800489e:	bf00      	nop

080048a0 <__gnu_Unwind_Save_WMMXD>:
 80048a0:	ece0 0102 	stfe	f0, [r0], #8
 80048a4:	ece0 1102 	stfe	f1, [r0], #8
 80048a8:	ece0 2102 	stfe	f2, [r0], #8
 80048ac:	ece0 3102 	stfe	f3, [r0], #8
 80048b0:	ece0 4102 	stfe	f4, [r0], #8
 80048b4:	ece0 5102 	stfe	f5, [r0], #8
 80048b8:	ece0 6102 	stfe	f6, [r0], #8
 80048bc:	ece0 7102 	stfe	f7, [r0], #8
 80048c0:	ece0 8102 	stfp	f0, [r0], #8
 80048c4:	ece0 9102 	stfp	f1, [r0], #8
 80048c8:	ece0 a102 	stfp	f2, [r0], #8
 80048cc:	ece0 b102 	stfp	f3, [r0], #8
 80048d0:	ece0 c102 	stfp	f4, [r0], #8
 80048d4:	ece0 d102 	stfp	f5, [r0], #8
 80048d8:	ece0 e102 	stfp	f6, [r0], #8
 80048dc:	ece0 f102 	stfp	f7, [r0], #8
 80048e0:	4770      	bx	lr
 80048e2:	bf00      	nop

080048e4 <__gnu_Unwind_Restore_WMMXC>:
 80048e4:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 80048e8:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 80048ec:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 80048f0:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 80048f4:	4770      	bx	lr
 80048f6:	bf00      	nop

080048f8 <__gnu_Unwind_Save_WMMXC>:
 80048f8:	fca0 8101 	stc2	1, cr8, [r0], #4
 80048fc:	fca0 9101 	stc2	1, cr9, [r0], #4
 8004900:	fca0 a101 	stc2	1, cr10, [r0], #4
 8004904:	fca0 b101 	stc2	1, cr11, [r0], #4
 8004908:	4770      	bx	lr
 800490a:	bf00      	nop

0800490c <_Unwind_RaiseException>:
 800490c:	46ec      	mov	ip, sp
 800490e:	b500      	push	{lr}
 8004910:	e92d 5000 	stmdb	sp!, {ip, lr}
 8004914:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8004918:	f04f 0300 	mov.w	r3, #0
 800491c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8004920:	a901      	add	r1, sp, #4
 8004922:	f7ff fbdd 	bl	80040e0 <__gnu_Unwind_RaiseException>
 8004926:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800492a:	b012      	add	sp, #72	; 0x48
 800492c:	4770      	bx	lr
 800492e:	bf00      	nop

08004930 <_Unwind_Resume>:
 8004930:	46ec      	mov	ip, sp
 8004932:	b500      	push	{lr}
 8004934:	e92d 5000 	stmdb	sp!, {ip, lr}
 8004938:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 800493c:	f04f 0300 	mov.w	r3, #0
 8004940:	e92d 000c 	stmdb	sp!, {r2, r3}
 8004944:	a901      	add	r1, sp, #4
 8004946:	f7ff fc05 	bl	8004154 <__gnu_Unwind_Resume>
 800494a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800494e:	b012      	add	sp, #72	; 0x48
 8004950:	4770      	bx	lr
 8004952:	bf00      	nop

08004954 <_Unwind_Resume_or_Rethrow>:
 8004954:	46ec      	mov	ip, sp
 8004956:	b500      	push	{lr}
 8004958:	e92d 5000 	stmdb	sp!, {ip, lr}
 800495c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8004960:	f04f 0300 	mov.w	r3, #0
 8004964:	e92d 000c 	stmdb	sp!, {r2, r3}
 8004968:	a901      	add	r1, sp, #4
 800496a:	f7ff fc15 	bl	8004198 <__gnu_Unwind_Resume_or_Rethrow>
 800496e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8004972:	b012      	add	sp, #72	; 0x48
 8004974:	4770      	bx	lr
 8004976:	bf00      	nop

08004978 <_Unwind_ForcedUnwind>:
 8004978:	46ec      	mov	ip, sp
 800497a:	b500      	push	{lr}
 800497c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8004980:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8004984:	f04f 0300 	mov.w	r3, #0
 8004988:	e92d 000c 	stmdb	sp!, {r2, r3}
 800498c:	ab01      	add	r3, sp, #4
 800498e:	f7ff fbd7 	bl	8004140 <__gnu_Unwind_ForcedUnwind>
 8004992:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8004996:	b012      	add	sp, #72	; 0x48
 8004998:	4770      	bx	lr
 800499a:	bf00      	nop

0800499c <_Unwind_Backtrace>:
 800499c:	46ec      	mov	ip, sp
 800499e:	b500      	push	{lr}
 80049a0:	e92d 5000 	stmdb	sp!, {ip, lr}
 80049a4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80049a8:	f04f 0300 	mov.w	r3, #0
 80049ac:	e92d 000c 	stmdb	sp!, {r2, r3}
 80049b0:	aa01      	add	r2, sp, #4
 80049b2:	f7ff fc47 	bl	8004244 <__gnu_Unwind_Backtrace>
 80049b6:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80049ba:	b012      	add	sp, #72	; 0x48
 80049bc:	4770      	bx	lr
 80049be:	bf00      	nop

080049c0 <next_unwind_byte>:
 80049c0:	7a02      	ldrb	r2, [r0, #8]
 80049c2:	b982      	cbnz	r2, 80049e6 <next_unwind_byte+0x26>
 80049c4:	7a43      	ldrb	r3, [r0, #9]
 80049c6:	b1ab      	cbz	r3, 80049f4 <next_unwind_byte+0x34>
 80049c8:	6842      	ldr	r2, [r0, #4]
 80049ca:	3b01      	subs	r3, #1
 80049cc:	b410      	push	{r4}
 80049ce:	7243      	strb	r3, [r0, #9]
 80049d0:	6813      	ldr	r3, [r2, #0]
 80049d2:	2103      	movs	r1, #3
 80049d4:	1d14      	adds	r4, r2, #4
 80049d6:	7201      	strb	r1, [r0, #8]
 80049d8:	021a      	lsls	r2, r3, #8
 80049da:	6044      	str	r4, [r0, #4]
 80049dc:	6002      	str	r2, [r0, #0]
 80049de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80049e2:	0e18      	lsrs	r0, r3, #24
 80049e4:	4770      	bx	lr
 80049e6:	6803      	ldr	r3, [r0, #0]
 80049e8:	3a01      	subs	r2, #1
 80049ea:	7202      	strb	r2, [r0, #8]
 80049ec:	021a      	lsls	r2, r3, #8
 80049ee:	6002      	str	r2, [r0, #0]
 80049f0:	0e18      	lsrs	r0, r3, #24
 80049f2:	4770      	bx	lr
 80049f4:	20b0      	movs	r0, #176	; 0xb0
 80049f6:	4770      	bx	lr

080049f8 <_Unwind_GetGR.constprop.0>:
 80049f8:	b500      	push	{lr}
 80049fa:	b085      	sub	sp, #20
 80049fc:	aa03      	add	r2, sp, #12
 80049fe:	2300      	movs	r3, #0
 8004a00:	9200      	str	r2, [sp, #0]
 8004a02:	4619      	mov	r1, r3
 8004a04:	220c      	movs	r2, #12
 8004a06:	f7ff fbd7 	bl	80041b8 <_Unwind_VRS_Get>
 8004a0a:	9803      	ldr	r0, [sp, #12]
 8004a0c:	b005      	add	sp, #20
 8004a0e:	f85d fb04 	ldr.w	pc, [sp], #4
 8004a12:	bf00      	nop

08004a14 <unwind_UCB_from_context>:
 8004a14:	e7f0      	b.n	80049f8 <_Unwind_GetGR.constprop.0>
 8004a16:	bf00      	nop

08004a18 <__gnu_unwind_execute>:
 8004a18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004a1c:	4605      	mov	r5, r0
 8004a1e:	b085      	sub	sp, #20
 8004a20:	460e      	mov	r6, r1
 8004a22:	f04f 0800 	mov.w	r8, #0
 8004a26:	4630      	mov	r0, r6
 8004a28:	f7ff ffca 	bl	80049c0 <next_unwind_byte>
 8004a2c:	28b0      	cmp	r0, #176	; 0xb0
 8004a2e:	4604      	mov	r4, r0
 8004a30:	f000 80b1 	beq.w	8004b96 <__gnu_unwind_execute+0x17e>
 8004a34:	0607      	lsls	r7, r0, #24
 8004a36:	d520      	bpl.n	8004a7a <__gnu_unwind_execute+0x62>
 8004a38:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8004a3c:	2b80      	cmp	r3, #128	; 0x80
 8004a3e:	d065      	beq.n	8004b0c <__gnu_unwind_execute+0xf4>
 8004a40:	2b90      	cmp	r3, #144	; 0x90
 8004a42:	d036      	beq.n	8004ab2 <__gnu_unwind_execute+0x9a>
 8004a44:	2ba0      	cmp	r3, #160	; 0xa0
 8004a46:	d078      	beq.n	8004b3a <__gnu_unwind_execute+0x122>
 8004a48:	2bb0      	cmp	r3, #176	; 0xb0
 8004a4a:	d047      	beq.n	8004adc <__gnu_unwind_execute+0xc4>
 8004a4c:	2bc0      	cmp	r3, #192	; 0xc0
 8004a4e:	f000 808a 	beq.w	8004b66 <__gnu_unwind_execute+0x14e>
 8004a52:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8004a56:	2bd0      	cmp	r3, #208	; 0xd0
 8004a58:	d10b      	bne.n	8004a72 <__gnu_unwind_execute+0x5a>
 8004a5a:	f000 0207 	and.w	r2, r0, #7
 8004a5e:	3201      	adds	r2, #1
 8004a60:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8004a64:	2305      	movs	r3, #5
 8004a66:	2101      	movs	r1, #1
 8004a68:	4628      	mov	r0, r5
 8004a6a:	f7ff fd93 	bl	8004594 <_Unwind_VRS_Pop>
 8004a6e:	2800      	cmp	r0, #0
 8004a70:	d0d9      	beq.n	8004a26 <__gnu_unwind_execute+0xe>
 8004a72:	2009      	movs	r0, #9
 8004a74:	b005      	add	sp, #20
 8004a76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004a7a:	f10d 090c 	add.w	r9, sp, #12
 8004a7e:	2300      	movs	r3, #0
 8004a80:	4619      	mov	r1, r3
 8004a82:	0087      	lsls	r7, r0, #2
 8004a84:	f8cd 9000 	str.w	r9, [sp]
 8004a88:	220d      	movs	r2, #13
 8004a8a:	4628      	mov	r0, r5
 8004a8c:	f7ff fb94 	bl	80041b8 <_Unwind_VRS_Get>
 8004a90:	b2ff      	uxtb	r7, r7
 8004a92:	9b03      	ldr	r3, [sp, #12]
 8004a94:	f8cd 9000 	str.w	r9, [sp]
 8004a98:	3704      	adds	r7, #4
 8004a9a:	0660      	lsls	r0, r4, #25
 8004a9c:	bf4c      	ite	mi
 8004a9e:	1bdf      	submi	r7, r3, r7
 8004aa0:	18ff      	addpl	r7, r7, r3
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	4619      	mov	r1, r3
 8004aa6:	220d      	movs	r2, #13
 8004aa8:	4628      	mov	r0, r5
 8004aaa:	9703      	str	r7, [sp, #12]
 8004aac:	f7ff fba6 	bl	80041fc <_Unwind_VRS_Set>
 8004ab0:	e7b9      	b.n	8004a26 <__gnu_unwind_execute+0xe>
 8004ab2:	f000 030d 	and.w	r3, r0, #13
 8004ab6:	2b0d      	cmp	r3, #13
 8004ab8:	d0db      	beq.n	8004a72 <__gnu_unwind_execute+0x5a>
 8004aba:	af03      	add	r7, sp, #12
 8004abc:	2300      	movs	r3, #0
 8004abe:	f000 020f 	and.w	r2, r0, #15
 8004ac2:	4619      	mov	r1, r3
 8004ac4:	9700      	str	r7, [sp, #0]
 8004ac6:	4628      	mov	r0, r5
 8004ac8:	f7ff fb76 	bl	80041b8 <_Unwind_VRS_Get>
 8004acc:	2300      	movs	r3, #0
 8004ace:	9700      	str	r7, [sp, #0]
 8004ad0:	4619      	mov	r1, r3
 8004ad2:	220d      	movs	r2, #13
 8004ad4:	4628      	mov	r0, r5
 8004ad6:	f7ff fb91 	bl	80041fc <_Unwind_VRS_Set>
 8004ada:	e7a4      	b.n	8004a26 <__gnu_unwind_execute+0xe>
 8004adc:	28b1      	cmp	r0, #177	; 0xb1
 8004ade:	d05f      	beq.n	8004ba0 <__gnu_unwind_execute+0x188>
 8004ae0:	28b2      	cmp	r0, #178	; 0xb2
 8004ae2:	f000 80cc 	beq.w	8004c7e <__gnu_unwind_execute+0x266>
 8004ae6:	28b3      	cmp	r0, #179	; 0xb3
 8004ae8:	d07e      	beq.n	8004be8 <__gnu_unwind_execute+0x1d0>
 8004aea:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 8004aee:	2bb4      	cmp	r3, #180	; 0xb4
 8004af0:	d0bf      	beq.n	8004a72 <__gnu_unwind_execute+0x5a>
 8004af2:	f000 0207 	and.w	r2, r0, #7
 8004af6:	3201      	adds	r2, #1
 8004af8:	2301      	movs	r3, #1
 8004afa:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8004afe:	4619      	mov	r1, r3
 8004b00:	4628      	mov	r0, r5
 8004b02:	f7ff fd47 	bl	8004594 <_Unwind_VRS_Pop>
 8004b06:	2800      	cmp	r0, #0
 8004b08:	d08d      	beq.n	8004a26 <__gnu_unwind_execute+0xe>
 8004b0a:	e7b2      	b.n	8004a72 <__gnu_unwind_execute+0x5a>
 8004b0c:	4630      	mov	r0, r6
 8004b0e:	f7ff ff57 	bl	80049c0 <next_unwind_byte>
 8004b12:	0224      	lsls	r4, r4, #8
 8004b14:	4304      	orrs	r4, r0
 8004b16:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8004b1a:	d0aa      	beq.n	8004a72 <__gnu_unwind_execute+0x5a>
 8004b1c:	0124      	lsls	r4, r4, #4
 8004b1e:	2300      	movs	r3, #0
 8004b20:	b2a2      	uxth	r2, r4
 8004b22:	4619      	mov	r1, r3
 8004b24:	4628      	mov	r0, r5
 8004b26:	f7ff fd35 	bl	8004594 <_Unwind_VRS_Pop>
 8004b2a:	2800      	cmp	r0, #0
 8004b2c:	d1a1      	bne.n	8004a72 <__gnu_unwind_execute+0x5a>
 8004b2e:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8004b32:	bf18      	it	ne
 8004b34:	f04f 0801 	movne.w	r8, #1
 8004b38:	e775      	b.n	8004a26 <__gnu_unwind_execute+0xe>
 8004b3a:	43c2      	mvns	r2, r0
 8004b3c:	f002 0307 	and.w	r3, r2, #7
 8004b40:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 8004b44:	411a      	asrs	r2, r3
 8004b46:	0701      	lsls	r1, r0, #28
 8004b48:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 8004b4c:	f04f 0300 	mov.w	r3, #0
 8004b50:	bf48      	it	mi
 8004b52:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 8004b56:	4619      	mov	r1, r3
 8004b58:	4628      	mov	r0, r5
 8004b5a:	f7ff fd1b 	bl	8004594 <_Unwind_VRS_Pop>
 8004b5e:	2800      	cmp	r0, #0
 8004b60:	f43f af61 	beq.w	8004a26 <__gnu_unwind_execute+0xe>
 8004b64:	e785      	b.n	8004a72 <__gnu_unwind_execute+0x5a>
 8004b66:	28c6      	cmp	r0, #198	; 0xc6
 8004b68:	d051      	beq.n	8004c0e <__gnu_unwind_execute+0x1f6>
 8004b6a:	28c7      	cmp	r0, #199	; 0xc7
 8004b6c:	d05a      	beq.n	8004c24 <__gnu_unwind_execute+0x20c>
 8004b6e:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8004b72:	2bc0      	cmp	r3, #192	; 0xc0
 8004b74:	d069      	beq.n	8004c4a <__gnu_unwind_execute+0x232>
 8004b76:	28c8      	cmp	r0, #200	; 0xc8
 8004b78:	d075      	beq.n	8004c66 <__gnu_unwind_execute+0x24e>
 8004b7a:	28c9      	cmp	r0, #201	; 0xc9
 8004b7c:	f47f af79 	bne.w	8004a72 <__gnu_unwind_execute+0x5a>
 8004b80:	4630      	mov	r0, r6
 8004b82:	f7ff ff1d 	bl	80049c0 <next_unwind_byte>
 8004b86:	0302      	lsls	r2, r0, #12
 8004b88:	f000 000f 	and.w	r0, r0, #15
 8004b8c:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 8004b90:	3001      	adds	r0, #1
 8004b92:	4302      	orrs	r2, r0
 8004b94:	e766      	b.n	8004a64 <__gnu_unwind_execute+0x4c>
 8004b96:	f1b8 0f00 	cmp.w	r8, #0
 8004b9a:	d014      	beq.n	8004bc6 <__gnu_unwind_execute+0x1ae>
 8004b9c:	2000      	movs	r0, #0
 8004b9e:	e769      	b.n	8004a74 <__gnu_unwind_execute+0x5c>
 8004ba0:	4630      	mov	r0, r6
 8004ba2:	f7ff ff0d 	bl	80049c0 <next_unwind_byte>
 8004ba6:	2800      	cmp	r0, #0
 8004ba8:	f43f af63 	beq.w	8004a72 <__gnu_unwind_execute+0x5a>
 8004bac:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8004bb0:	f47f af5f 	bne.w	8004a72 <__gnu_unwind_execute+0x5a>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	4619      	mov	r1, r3
 8004bb8:	4628      	mov	r0, r5
 8004bba:	f7ff fceb 	bl	8004594 <_Unwind_VRS_Pop>
 8004bbe:	2800      	cmp	r0, #0
 8004bc0:	f43f af31 	beq.w	8004a26 <__gnu_unwind_execute+0xe>
 8004bc4:	e755      	b.n	8004a72 <__gnu_unwind_execute+0x5a>
 8004bc6:	ac03      	add	r4, sp, #12
 8004bc8:	4643      	mov	r3, r8
 8004bca:	220e      	movs	r2, #14
 8004bcc:	4641      	mov	r1, r8
 8004bce:	9400      	str	r4, [sp, #0]
 8004bd0:	4628      	mov	r0, r5
 8004bd2:	f7ff faf1 	bl	80041b8 <_Unwind_VRS_Get>
 8004bd6:	9400      	str	r4, [sp, #0]
 8004bd8:	4628      	mov	r0, r5
 8004bda:	4643      	mov	r3, r8
 8004bdc:	220f      	movs	r2, #15
 8004bde:	4641      	mov	r1, r8
 8004be0:	f7ff fb0c 	bl	80041fc <_Unwind_VRS_Set>
 8004be4:	4640      	mov	r0, r8
 8004be6:	e745      	b.n	8004a74 <__gnu_unwind_execute+0x5c>
 8004be8:	4630      	mov	r0, r6
 8004bea:	f7ff fee9 	bl	80049c0 <next_unwind_byte>
 8004bee:	0301      	lsls	r1, r0, #12
 8004bf0:	f000 000f 	and.w	r0, r0, #15
 8004bf4:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8004bf8:	1c42      	adds	r2, r0, #1
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	430a      	orrs	r2, r1
 8004bfe:	4628      	mov	r0, r5
 8004c00:	4619      	mov	r1, r3
 8004c02:	f7ff fcc7 	bl	8004594 <_Unwind_VRS_Pop>
 8004c06:	2800      	cmp	r0, #0
 8004c08:	f43f af0d 	beq.w	8004a26 <__gnu_unwind_execute+0xe>
 8004c0c:	e731      	b.n	8004a72 <__gnu_unwind_execute+0x5a>
 8004c0e:	4630      	mov	r0, r6
 8004c10:	f7ff fed6 	bl	80049c0 <next_unwind_byte>
 8004c14:	0301      	lsls	r1, r0, #12
 8004c16:	f000 000f 	and.w	r0, r0, #15
 8004c1a:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8004c1e:	1c42      	adds	r2, r0, #1
 8004c20:	2303      	movs	r3, #3
 8004c22:	e7eb      	b.n	8004bfc <__gnu_unwind_execute+0x1e4>
 8004c24:	4630      	mov	r0, r6
 8004c26:	f7ff fecb 	bl	80049c0 <next_unwind_byte>
 8004c2a:	4602      	mov	r2, r0
 8004c2c:	2800      	cmp	r0, #0
 8004c2e:	f43f af20 	beq.w	8004a72 <__gnu_unwind_execute+0x5a>
 8004c32:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8004c36:	f47f af1c 	bne.w	8004a72 <__gnu_unwind_execute+0x5a>
 8004c3a:	2104      	movs	r1, #4
 8004c3c:	4628      	mov	r0, r5
 8004c3e:	f7ff fca9 	bl	8004594 <_Unwind_VRS_Pop>
 8004c42:	2800      	cmp	r0, #0
 8004c44:	f43f aeef 	beq.w	8004a26 <__gnu_unwind_execute+0xe>
 8004c48:	e713      	b.n	8004a72 <__gnu_unwind_execute+0x5a>
 8004c4a:	f000 020f 	and.w	r2, r0, #15
 8004c4e:	3201      	adds	r2, #1
 8004c50:	2303      	movs	r3, #3
 8004c52:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8004c56:	4619      	mov	r1, r3
 8004c58:	4628      	mov	r0, r5
 8004c5a:	f7ff fc9b 	bl	8004594 <_Unwind_VRS_Pop>
 8004c5e:	2800      	cmp	r0, #0
 8004c60:	f43f aee1 	beq.w	8004a26 <__gnu_unwind_execute+0xe>
 8004c64:	e705      	b.n	8004a72 <__gnu_unwind_execute+0x5a>
 8004c66:	4630      	mov	r0, r6
 8004c68:	f7ff feaa 	bl	80049c0 <next_unwind_byte>
 8004c6c:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8004c70:	f000 030f 	and.w	r3, r0, #15
 8004c74:	3210      	adds	r2, #16
 8004c76:	3301      	adds	r3, #1
 8004c78:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 8004c7c:	e6f2      	b.n	8004a64 <__gnu_unwind_execute+0x4c>
 8004c7e:	2300      	movs	r3, #0
 8004c80:	f10d 090c 	add.w	r9, sp, #12
 8004c84:	220d      	movs	r2, #13
 8004c86:	4619      	mov	r1, r3
 8004c88:	f8cd 9000 	str.w	r9, [sp]
 8004c8c:	4628      	mov	r0, r5
 8004c8e:	f7ff fa93 	bl	80041b8 <_Unwind_VRS_Get>
 8004c92:	4630      	mov	r0, r6
 8004c94:	f7ff fe94 	bl	80049c0 <next_unwind_byte>
 8004c98:	0602      	lsls	r2, r0, #24
 8004c9a:	f04f 0702 	mov.w	r7, #2
 8004c9e:	d50c      	bpl.n	8004cba <__gnu_unwind_execute+0x2a2>
 8004ca0:	9b03      	ldr	r3, [sp, #12]
 8004ca2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8004ca6:	40b8      	lsls	r0, r7
 8004ca8:	4403      	add	r3, r0
 8004caa:	4630      	mov	r0, r6
 8004cac:	9303      	str	r3, [sp, #12]
 8004cae:	f7ff fe87 	bl	80049c0 <next_unwind_byte>
 8004cb2:	0603      	lsls	r3, r0, #24
 8004cb4:	f107 0707 	add.w	r7, r7, #7
 8004cb8:	d4f2      	bmi.n	8004ca0 <__gnu_unwind_execute+0x288>
 8004cba:	9b03      	ldr	r3, [sp, #12]
 8004cbc:	f8cd 9000 	str.w	r9, [sp]
 8004cc0:	f000 047f 	and.w	r4, r0, #127	; 0x7f
 8004cc4:	f503 7201 	add.w	r2, r3, #516	; 0x204
 8004cc8:	40bc      	lsls	r4, r7
 8004cca:	2300      	movs	r3, #0
 8004ccc:	4414      	add	r4, r2
 8004cce:	4619      	mov	r1, r3
 8004cd0:	220d      	movs	r2, #13
 8004cd2:	4628      	mov	r0, r5
 8004cd4:	9403      	str	r4, [sp, #12]
 8004cd6:	f7ff fa91 	bl	80041fc <_Unwind_VRS_Set>
 8004cda:	e6a4      	b.n	8004a26 <__gnu_unwind_execute+0xe>

08004cdc <__gnu_unwind_frame>:
 8004cdc:	b510      	push	{r4, lr}
 8004cde:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8004ce0:	b084      	sub	sp, #16
 8004ce2:	685a      	ldr	r2, [r3, #4]
 8004ce4:	2003      	movs	r0, #3
 8004ce6:	f88d 000c 	strb.w	r0, [sp, #12]
 8004cea:	79dc      	ldrb	r4, [r3, #7]
 8004cec:	f88d 400d 	strb.w	r4, [sp, #13]
 8004cf0:	0212      	lsls	r2, r2, #8
 8004cf2:	3308      	adds	r3, #8
 8004cf4:	4608      	mov	r0, r1
 8004cf6:	a901      	add	r1, sp, #4
 8004cf8:	9201      	str	r2, [sp, #4]
 8004cfa:	9302      	str	r3, [sp, #8]
 8004cfc:	f7ff fe8c 	bl	8004a18 <__gnu_unwind_execute>
 8004d00:	b004      	add	sp, #16
 8004d02:	bd10      	pop	{r4, pc}

08004d04 <_Unwind_GetRegionStart>:
 8004d04:	b508      	push	{r3, lr}
 8004d06:	f7ff fe85 	bl	8004a14 <unwind_UCB_from_context>
 8004d0a:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8004d0c:	bd08      	pop	{r3, pc}
 8004d0e:	bf00      	nop

08004d10 <_Unwind_GetLanguageSpecificData>:
 8004d10:	b508      	push	{r3, lr}
 8004d12:	f7ff fe7f 	bl	8004a14 <unwind_UCB_from_context>
 8004d16:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8004d18:	79c3      	ldrb	r3, [r0, #7]
 8004d1a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8004d1e:	3008      	adds	r0, #8
 8004d20:	bd08      	pop	{r3, pc}
 8004d22:	bf00      	nop

08004d24 <_Unwind_GetDataRelBase>:
 8004d24:	b508      	push	{r3, lr}
 8004d26:	f000 f807 	bl	8004d38 <abort>
 8004d2a:	bf00      	nop

08004d2c <_Unwind_GetTextRelBase>:
 8004d2c:	b508      	push	{r3, lr}
 8004d2e:	f7ff fff9 	bl	8004d24 <_Unwind_GetDataRelBase>
 8004d32:	bf00      	nop

08004d34 <__aeabi_idiv0>:
 8004d34:	4770      	bx	lr
 8004d36:	bf00      	nop

08004d38 <abort>:
 8004d38:	b508      	push	{r3, lr}
 8004d3a:	2006      	movs	r0, #6
 8004d3c:	f000 f84e 	bl	8004ddc <raise>
 8004d40:	2001      	movs	r0, #1
 8004d42:	f000 f877 	bl	8004e34 <_exit>

08004d46 <memcmp>:
 8004d46:	b530      	push	{r4, r5, lr}
 8004d48:	2400      	movs	r4, #0
 8004d4a:	42a2      	cmp	r2, r4
 8004d4c:	d101      	bne.n	8004d52 <memcmp+0xc>
 8004d4e:	2000      	movs	r0, #0
 8004d50:	e007      	b.n	8004d62 <memcmp+0x1c>
 8004d52:	5d03      	ldrb	r3, [r0, r4]
 8004d54:	3401      	adds	r4, #1
 8004d56:	190d      	adds	r5, r1, r4
 8004d58:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8004d5c:	42ab      	cmp	r3, r5
 8004d5e:	d0f4      	beq.n	8004d4a <memcmp+0x4>
 8004d60:	1b58      	subs	r0, r3, r5
 8004d62:	bd30      	pop	{r4, r5, pc}

08004d64 <memcpy>:
 8004d64:	b510      	push	{r4, lr}
 8004d66:	1e43      	subs	r3, r0, #1
 8004d68:	440a      	add	r2, r1
 8004d6a:	4291      	cmp	r1, r2
 8004d6c:	d100      	bne.n	8004d70 <memcpy+0xc>
 8004d6e:	bd10      	pop	{r4, pc}
 8004d70:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d74:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d78:	e7f7      	b.n	8004d6a <memcpy+0x6>

08004d7a <memset>:
 8004d7a:	4402      	add	r2, r0
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d100      	bne.n	8004d84 <memset+0xa>
 8004d82:	4770      	bx	lr
 8004d84:	f803 1b01 	strb.w	r1, [r3], #1
 8004d88:	e7f9      	b.n	8004d7e <memset+0x4>

08004d8a <_raise_r>:
 8004d8a:	291f      	cmp	r1, #31
 8004d8c:	b538      	push	{r3, r4, r5, lr}
 8004d8e:	4604      	mov	r4, r0
 8004d90:	460d      	mov	r5, r1
 8004d92:	d904      	bls.n	8004d9e <_raise_r+0x14>
 8004d94:	2316      	movs	r3, #22
 8004d96:	6003      	str	r3, [r0, #0]
 8004d98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d9c:	bd38      	pop	{r3, r4, r5, pc}
 8004d9e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004da0:	b112      	cbz	r2, 8004da8 <_raise_r+0x1e>
 8004da2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004da6:	b94b      	cbnz	r3, 8004dbc <_raise_r+0x32>
 8004da8:	4620      	mov	r0, r4
 8004daa:	f000 f831 	bl	8004e10 <_getpid_r>
 8004dae:	462a      	mov	r2, r5
 8004db0:	4601      	mov	r1, r0
 8004db2:	4620      	mov	r0, r4
 8004db4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004db8:	f000 b818 	b.w	8004dec <_kill_r>
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d00a      	beq.n	8004dd6 <_raise_r+0x4c>
 8004dc0:	1c59      	adds	r1, r3, #1
 8004dc2:	d103      	bne.n	8004dcc <_raise_r+0x42>
 8004dc4:	2316      	movs	r3, #22
 8004dc6:	6003      	str	r3, [r0, #0]
 8004dc8:	2001      	movs	r0, #1
 8004dca:	e7e7      	b.n	8004d9c <_raise_r+0x12>
 8004dcc:	2400      	movs	r4, #0
 8004dce:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004dd2:	4628      	mov	r0, r5
 8004dd4:	4798      	blx	r3
 8004dd6:	2000      	movs	r0, #0
 8004dd8:	e7e0      	b.n	8004d9c <_raise_r+0x12>
	...

08004ddc <raise>:
 8004ddc:	4b02      	ldr	r3, [pc, #8]	; (8004de8 <raise+0xc>)
 8004dde:	4601      	mov	r1, r0
 8004de0:	6818      	ldr	r0, [r3, #0]
 8004de2:	f7ff bfd2 	b.w	8004d8a <_raise_r>
 8004de6:	bf00      	nop
 8004de8:	20000574 	.word	0x20000574

08004dec <_kill_r>:
 8004dec:	b538      	push	{r3, r4, r5, lr}
 8004dee:	4c07      	ldr	r4, [pc, #28]	; (8004e0c <_kill_r+0x20>)
 8004df0:	2300      	movs	r3, #0
 8004df2:	4605      	mov	r5, r0
 8004df4:	4608      	mov	r0, r1
 8004df6:	4611      	mov	r1, r2
 8004df8:	6023      	str	r3, [r4, #0]
 8004dfa:	f000 f813 	bl	8004e24 <_kill>
 8004dfe:	1c43      	adds	r3, r0, #1
 8004e00:	d102      	bne.n	8004e08 <_kill_r+0x1c>
 8004e02:	6823      	ldr	r3, [r4, #0]
 8004e04:	b103      	cbz	r3, 8004e08 <_kill_r+0x1c>
 8004e06:	602b      	str	r3, [r5, #0]
 8004e08:	bd38      	pop	{r3, r4, r5, pc}
 8004e0a:	bf00      	nop
 8004e0c:	20004a44 	.word	0x20004a44

08004e10 <_getpid_r>:
 8004e10:	f000 b800 	b.w	8004e14 <_getpid>

08004e14 <_getpid>:
 8004e14:	4b02      	ldr	r3, [pc, #8]	; (8004e20 <_getpid+0xc>)
 8004e16:	2258      	movs	r2, #88	; 0x58
 8004e18:	601a      	str	r2, [r3, #0]
 8004e1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004e1e:	4770      	bx	lr
 8004e20:	20004a44 	.word	0x20004a44

08004e24 <_kill>:
 8004e24:	4b02      	ldr	r3, [pc, #8]	; (8004e30 <_kill+0xc>)
 8004e26:	2258      	movs	r2, #88	; 0x58
 8004e28:	601a      	str	r2, [r3, #0]
 8004e2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004e2e:	4770      	bx	lr
 8004e30:	20004a44 	.word	0x20004a44

08004e34 <_exit>:
 8004e34:	e7fe      	b.n	8004e34 <_exit>
 8004e36:	bf00      	nop
 8004e38:	0000      	.short	0x0000
 8004e3a:	7277      	.short	0x7277
 8004e3c:	20657469 	.word	0x20657469
 8004e40:	61647075 	.word	0x61647075
 8004e44:	203f6574 	.word	0x203f6574
 8004e48:	00736579 	.word	0x00736579
 8004e4c:	74697277 	.word	0x74697277
 8004e50:	70752065 	.word	0x70752065
 8004e54:	65746164 	.word	0x65746164
 8004e58:	6f6e203f 	.word	0x6f6e203f
 8004e5c:	65686300 	.word	0x65686300
 8004e60:	6e696b63 	.word	0x6e696b63
 8004e64:	2e2e2067 	.word	0x2e2e2067
 8004e68:	7563002e 	.word	0x7563002e
 8004e6c:	6e657272 	.word	0x6e657272
 8004e70:	6d692074 	.word	0x6d692074
 8004e74:	3a656761 	.word	0x3a656761
 8004e78:	0a732520 	.word	0x0a732520
 8004e7c:	65686300 	.word	0x65686300
 8004e80:	6e696b63 	.word	0x6e696b63
 8004e84:	6f662067 	.word	0x6f662067
 8004e88:	70752072 	.word	0x70752072
 8004e8c:	65746164 	.word	0x65746164
 8004e90:	616d6920 	.word	0x616d6920
 8004e94:	2e206567 	.word	0x2e206567
 8004e98:	000a2e2e 	.word	0x000a2e2e
 8004e9c:	6e756f66 	.word	0x6e756f66
 8004ea0:	70752064 	.word	0x70752064
 8004ea4:	65746164 	.word	0x65746164
 8004ea8:	616d6920 	.word	0x616d6920
 8004eac:	203a6567 	.word	0x203a6567
 8004eb0:	000a7325 	.word	0x000a7325
 8004eb4:	657a6973 	.word	0x657a6973
 8004eb8:	7a25203a 	.word	0x7a25203a
 8004ebc:	79622064 	.word	0x79622064
 8004ec0:	0a736574 	.word	0x0a736574
 8004ec4:	32302500 	.word	0x32302500
 8004ec8:	65760078 	.word	0x65760078
 8004ecc:	79666972 	.word	0x79666972
 8004ed0:	20676e69 	.word	0x20676e69
 8004ed4:	61647075 	.word	0x61647075
 8004ed8:	69206574 	.word	0x69206574
 8004edc:	6567616d 	.word	0x6567616d
 8004ee0:	2e2e2e20 	.word	0x2e2e2e20
 8004ee4:	6f6e000a 	.word	0x6f6e000a
 8004ee8:	64707520 	.word	0x64707520
 8004eec:	20657461 	.word	0x20657461
 8004ef0:	67616d69 	.word	0x67616d69
 8004ef4:	6f662065 	.word	0x6f662065
 8004ef8:	3a646e75 	.word	0x3a646e75
 8004efc:	0a732520 	.word	0x0a732520
 8004f00:	72657600 	.word	0x72657600
 8004f04:	69796669 	.word	0x69796669
 8004f08:	6920676e 	.word	0x6920676e
 8004f0c:	6567616d 	.word	0x6567616d
 8004f10:	25642520 	.word	0x25642520
 8004f14:	6f630025 	.word	0x6f630025
 8004f18:	7475706d 	.word	0x7475706d
 8004f1c:	6d206465 	.word	0x6d206465
 8004f20:	75733564 	.word	0x75733564
 8004f24:	00203a6d 	.word	0x00203a6d
 8004f28:	696c6176 	.word	0x696c6176
 8004f2c:	6d692064 	.word	0x6d692064
 8004f30:	0a656761 	.word	0x0a656761
 8004f34:	766e6900 	.word	0x766e6900
 8004f38:	64696c61 	.word	0x64696c61
 8004f3c:	616d6920 	.word	0x616d6920
 8004f40:	28206567 	.word	0x28206567
 8004f44:	7335646d 	.word	0x7335646d
 8004f48:	6d206d75 	.word	0x6d206d75
 8004f4c:	616d7369 	.word	0x616d7369
 8004f50:	29686374 	.word	0x29686374
 8004f54:	6e69000a 	.word	0x6e69000a
 8004f58:	696c6176 	.word	0x696c6176
 8004f5c:	68632064 	.word	0x68632064
 8004f60:	736b6365 	.word	0x736b6365
 8004f64:	77006d75 	.word	0x77006d75
 8004f68:	69746972 	.word	0x69746972
 8004f6c:	7520676e 	.word	0x7520676e
 8004f70:	74616470 	.word	0x74616470
 8004f74:	6d692065 	.word	0x6d692065
 8004f78:	20656761 	.word	0x20656761
 8004f7c:	30206f74 	.word	0x30206f74
 8004f80:	38302578 	.word	0x38302578
 8004f84:	2e20786c 	.word	0x2e20786c
 8004f88:	000a2e2e 	.word	0x000a2e2e
 8004f8c:	74697277 	.word	0x74697277
 8004f90:	20676e69 	.word	0x20676e69
 8004f94:	67616d69 	.word	0x67616d69
 8004f98:	64252065 	.word	0x64252065
 8004f9c:	65002525 	.word	0x65002525
 8004fa0:	69736172 	.word	0x69736172
 8004fa4:	7320676e 	.word	0x7320676e
 8004fa8:	6f746365 	.word	0x6f746365
 8004fac:	64252072 	.word	0x64252072
 8004fb0:	20746120 	.word	0x20746120
 8004fb4:	30257830 	.word	0x30257830
 8004fb8:	20786c38 	.word	0x20786c38
 8004fbc:	202e2e2e 	.word	0x202e2e2e
 8004fc0:	6e6f6400 	.word	0x6e6f6400
 8004fc4:	77000a65 	.word	0x77000a65
 8004fc8:	65746972 	.word	0x65746972
 8004fcc:	63757320 	.word	0x63757320
 8004fd0:	73736563 	.word	0x73736563
 8004fd4:	0a6c7566 	.word	0x0a6c7566
 8004fd8:	72657600 	.word	0x72657600
 8004fdc:	69796669 	.word	0x69796669
 8004fe0:	7720676e 	.word	0x7720676e
 8004fe4:	74746972 	.word	0x74746972
 8004fe8:	69206e65 	.word	0x69206e65
 8004fec:	6567616d 	.word	0x6567616d
 8004ff0:	2e2e2e20 	.word	0x2e2e2e20
 8004ff4:	6576000a 	.word	0x6576000a
 8004ff8:	79666972 	.word	0x79666972
 8004ffc:	00676e69 	.word	0x00676e69
 8005000:	6c696166 	.word	0x6c696166
 8005004:	74206465 	.word	0x74206465
 8005008:	7277206f 	.word	0x7277206f
 800500c:	20657469 	.word	0x20657469
 8005010:	61647075 	.word	0x61647075
 8005014:	69206574 	.word	0x69206574
 8005018:	6567616d 	.word	0x6567616d
 800501c:	7325203a 	.word	0x7325203a
 8005020:	6576000a 	.word	0x6576000a
 8005024:	79666972 	.word	0x79666972
 8005028:	63757320 	.word	0x63757320
 800502c:	73736563 	.word	0x73736563
 8005030:	0a6c7566 	.word	0x0a6c7566
 8005034:	63757300 	.word	0x63757300
 8005038:	73736563 	.word	0x73736563
 800503c:	006c7566 	.word	0x006c7566
 8005040:	69726576 	.word	0x69726576
 8005044:	66207966 	.word	0x66207966
 8005048:	656c6961 	.word	0x656c6961
 800504c:	6d282064 	.word	0x6d282064
 8005050:	75733564 	.word	0x75733564
 8005054:	696d206d 	.word	0x696d206d
 8005058:	74616d73 	.word	0x74616d73
 800505c:	0a296863 	.word	0x0a296863
 8005060:	69727700 	.word	0x69727700
 8005064:	676e6974 	.word	0x676e6974
 8005068:	616d6920 	.word	0x616d6920
 800506c:	66206567 	.word	0x66206567
 8005070:	656c6961 	.word	0x656c6961
 8005074:	72700064 	.word	0x72700064
 8005078:	20737365 	.word	0x20737365
 800507c:	6f636e65 	.word	0x6f636e65
 8005080:	20726564 	.word	0x20726564
 8005084:	72206f74 	.word	0x72206f74
 8005088:	74657365 	.word	0x74657365
 800508c:	0021      	.short	0x0021
 800508e:	6f62      	.short	0x6f62
 8005090:	6f6c746f 	.word	0x6f6c746f
 8005094:	72656461 	.word	0x72656461
 8005098:	2e642520 	.word	0x2e642520
 800509c:	63006425 	.word	0x63006425
 80050a0:	65727275 	.word	0x65727275
 80050a4:	003a746e 	.word	0x003a746e
 80050a8:	61647075 	.word	0x61647075
 80050ac:	003a6574 	.word	0x003a6574
 80050b0:	28207325 	.word	0x28207325
 80050b4:	252e6425 	.word	0x252e6425
 80050b8:	64252e64 	.word	0x64252e64
 80050bc:	6e690029 	.word	0x6e690029
 80050c0:	696c6176 	.word	0x696c6176
 80050c4:	6d692064 	.word	0x6d692064
 80050c8:	00656761 	.word	0x00656761

080050cc <_ZL15flashSectorAddr>:
 80050cc:	08000000 08004000 08008000 0800c000     .....@..........
 80050dc:	08010000 08020000 08040000 08060000     ................
 80050ec:	08080000 080a0000 080c0000 080e0000     ................
 80050fc:	6f6f620a 616f6c74 20726564 252e6425     .bootloader %d.%
 800510c:	6c000a64 6964616f 2520676e 2e2e2073     d..loading %s ..
 800511c:	0a0a0a2e 73696400 6e695f6b 61697469     .....disk_initia
 800512c:	657a696c 72647028 64253d76 63000a29     lize(pdrv=%d)..c
 800513c:	20647261 657a6973 25203d20 000a756c     ard size = %lu..
 800514c:	45535341 69205452 552f206e 73726573     ASSERT in /Users
 800515c:	7575742f 702f656c 6f667265 72656d72     /tuule/performer
 800516c:	6372732f 7070612f 6f622f73 6f6c746f     /src/apps/bootlo
 800517c:	72656461 4364532f 2e647261 3a707063     ader/SdCard.cpp:
 800518c:	0a393932 66667562 6e207265 6920746f     299.buffer not i
 800519c:	5253206e 000a4d41 6c696166 74206465     n SRAM..failed t
 80051ac:	6f6d206f 20746e75 72726528 203a726f     o mount (error: 
 80051bc:	00296425 41445055 442e4554 66005441     %d).UPDATE.DAT.f
 80051cc:	656c6961 6f742064 65706f20 6966206e     ailed to open fi
 80051dc:	2820656c 6f727265 25203a72 66002964     le (error: %d).f
 80051ec:	656c6961 6f742064 61747320 69662074     ailed to stat fi
 80051fc:	2820656c 6f727265 25203a72 66002964     le (error: %d).f
 800520c:	656c6961 6f742064 65657320 6576206b     ailed to seek ve
 800521c:	6f697372 7228206e 6c757365 25203a74     rsion (result: %
 800522c:	66002964 656c6961 6f742064 61657220     d).failed to rea
 800523c:	65762064 6f697372 6174206e 65282067     d version tag (e
 800524c:	726f7272 6425203a 61660029 64656c69     rror: %d).failed
 800525c:	206f7420 6b656573 65686320 75736b63      to seek checksu
 800526c:	7228206d 6c757365 25203a74 66002964     m (result: %d).f
 800527c:	656c6961 6f742064 61657220 68632064     ailed to read ch
 800528c:	736b6365 28206d75 6f727265 25203a72     ecksum (error: %
 800529c:	66002964 656c6961 6f742064 61657220     d).failed to rea
 80052ac:	61642064 28206174 6f727265 25203a72     d data (error: %
 80052bc:	66002964 656c6961 6f742064 65657320     d).failed to see
 80052cc:	7473206b 20747261 73657228 3a746c75     k start (result:
 80052dc:	29642520 6c756e00 6f4e006c 6f6c6620      %d).null.No flo
 80052ec:	46007461 46005441 32335441 2b2a2200     at.FAT.FAT32."*+
 80052fc:	3c3b3a2c 5b3f3e3d 007f7c5d              ,:;<=>?[]|..

08005308 <rcc_hse_8mhz_3v3>:
 8005308:	00600008 00000202 00000603 01040500     ..`.............
 8005318:	02dc6c00 00b71b00 016e3600 01500008     .l.......6n...P.
 8005328:	00000704 00000602 00000400 0501bd00     ................
 8005338:	0280de80 0501bd00 00f00008 00000502     ................
 8005348:	00000603 01040500 07270e00 01c9c380     ..........'.....
 8005358:	03938700 01500008 00000702 00000605     ......P.........
 8005368:	00040500 0a037a00 0280de80 0501bd00     .....z..........
